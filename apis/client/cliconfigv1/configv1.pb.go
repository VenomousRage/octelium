// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: configv1.proto

package cliconfigv1

import (
	authv1 "github.com/octelium/octelium/apis/main/authv1"
	userv1 "github.com/octelium/octelium/apis/main/userv1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Connection_Preferences_L3Mode int32

const (
	Connection_Preferences_BOTH Connection_Preferences_L3Mode = 0
	Connection_Preferences_V4   Connection_Preferences_L3Mode = 1
	Connection_Preferences_V6   Connection_Preferences_L3Mode = 2
)

// Enum value maps for Connection_Preferences_L3Mode.
var (
	Connection_Preferences_L3Mode_name = map[int32]string{
		0: "BOTH",
		1: "V4",
		2: "V6",
	}
	Connection_Preferences_L3Mode_value = map[string]int32{
		"BOTH": 0,
		"V4":   1,
		"V6":   2,
	}
)

func (x Connection_Preferences_L3Mode) Enum() *Connection_Preferences_L3Mode {
	p := new(Connection_Preferences_L3Mode)
	*p = x
	return p
}

func (x Connection_Preferences_L3Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_L3Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[0].Descriptor()
}

func (Connection_Preferences_L3Mode) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[0]
}

func (x Connection_Preferences_L3Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_L3Mode.Descriptor instead.
func (Connection_Preferences_L3Mode) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Connection_Preferences_RuntimeMode int32

const (
	Connection_Preferences_MACHINE   Connection_Preferences_RuntimeMode = 0
	Connection_Preferences_CONTAINER Connection_Preferences_RuntimeMode = 1
	Connection_Preferences_IN_APP    Connection_Preferences_RuntimeMode = 2
)

// Enum value maps for Connection_Preferences_RuntimeMode.
var (
	Connection_Preferences_RuntimeMode_name = map[int32]string{
		0: "MACHINE",
		1: "CONTAINER",
		2: "IN_APP",
	}
	Connection_Preferences_RuntimeMode_value = map[string]int32{
		"MACHINE":   0,
		"CONTAINER": 1,
		"IN_APP":    2,
	}
)

func (x Connection_Preferences_RuntimeMode) Enum() *Connection_Preferences_RuntimeMode {
	p := new(Connection_Preferences_RuntimeMode)
	*p = x
	return p
}

func (x Connection_Preferences_RuntimeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_RuntimeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[1].Descriptor()
}

func (Connection_Preferences_RuntimeMode) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[1]
}

func (x Connection_Preferences_RuntimeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_RuntimeMode.Descriptor instead.
func (Connection_Preferences_RuntimeMode) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 1}
}

type Connection_Preferences_ConnectionType int32

const (
	Connection_Preferences_CONNECTION_TYPE_UNSET  Connection_Preferences_ConnectionType = 0
	Connection_Preferences_CONNECTION_TYPE_WG     Connection_Preferences_ConnectionType = 1
	Connection_Preferences_CONNECTION_TYPE_QUICV0 Connection_Preferences_ConnectionType = 2
)

// Enum value maps for Connection_Preferences_ConnectionType.
var (
	Connection_Preferences_ConnectionType_name = map[int32]string{
		0: "CONNECTION_TYPE_UNSET",
		1: "CONNECTION_TYPE_WG",
		2: "CONNECTION_TYPE_QUICV0",
	}
	Connection_Preferences_ConnectionType_value = map[string]int32{
		"CONNECTION_TYPE_UNSET":  0,
		"CONNECTION_TYPE_WG":     1,
		"CONNECTION_TYPE_QUICV0": 2,
	}
)

func (x Connection_Preferences_ConnectionType) Enum() *Connection_Preferences_ConnectionType {
	p := new(Connection_Preferences_ConnectionType)
	*p = x
	return p
}

func (x Connection_Preferences_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[2].Descriptor()
}

func (Connection_Preferences_ConnectionType) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[2]
}

func (x Connection_Preferences_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_ConnectionType.Descriptor instead.
func (Connection_Preferences_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 2}
}

type Connection_Preferences_ServeOpts_ProxyMode int32

const (
	Connection_Preferences_ServeOpts_NONE           Connection_Preferences_ServeOpts_ProxyMode = 0
	Connection_Preferences_ServeOpts_USERSPACE      Connection_Preferences_ServeOpts_ProxyMode = 1
	Connection_Preferences_ServeOpts_ENVOY_EMBEDDED Connection_Preferences_ServeOpts_ProxyMode = 2
	Connection_Preferences_ServeOpts_ENVOY          Connection_Preferences_ServeOpts_ProxyMode = 3
)

// Enum value maps for Connection_Preferences_ServeOpts_ProxyMode.
var (
	Connection_Preferences_ServeOpts_ProxyMode_name = map[int32]string{
		0: "NONE",
		1: "USERSPACE",
		2: "ENVOY_EMBEDDED",
		3: "ENVOY",
	}
	Connection_Preferences_ServeOpts_ProxyMode_value = map[string]int32{
		"NONE":           0,
		"USERSPACE":      1,
		"ENVOY_EMBEDDED": 2,
		"ENVOY":          3,
	}
)

func (x Connection_Preferences_ServeOpts_ProxyMode) Enum() *Connection_Preferences_ServeOpts_ProxyMode {
	p := new(Connection_Preferences_ServeOpts_ProxyMode)
	*p = x
	return p
}

func (x Connection_Preferences_ServeOpts_ProxyMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_ServeOpts_ProxyMode) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[3].Descriptor()
}

func (Connection_Preferences_ServeOpts_ProxyMode) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[3]
}

func (x Connection_Preferences_ServeOpts_ProxyMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_ServeOpts_ProxyMode.Descriptor instead.
func (Connection_Preferences_ServeOpts_ProxyMode) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type Connection_Preferences_Linux_DNSMode int32

const (
	Connection_Preferences_Linux_NO_DNS         Connection_Preferences_Linux_DNSMode = 0
	Connection_Preferences_Linux_RESOLVECTL_BIN Connection_Preferences_Linux_DNSMode = 1
	Connection_Preferences_Linux_RESOLVCONF     Connection_Preferences_Linux_DNSMode = 2
	Connection_Preferences_Linux_NETWORKMANAGER Connection_Preferences_Linux_DNSMode = 3
	Connection_Preferences_Linux_IN_APP         Connection_Preferences_Linux_DNSMode = 4
)

// Enum value maps for Connection_Preferences_Linux_DNSMode.
var (
	Connection_Preferences_Linux_DNSMode_name = map[int32]string{
		0: "NO_DNS",
		1: "RESOLVECTL_BIN",
		2: "RESOLVCONF",
		3: "NETWORKMANAGER",
		4: "IN_APP",
	}
	Connection_Preferences_Linux_DNSMode_value = map[string]int32{
		"NO_DNS":         0,
		"RESOLVECTL_BIN": 1,
		"RESOLVCONF":     2,
		"NETWORKMANAGER": 3,
		"IN_APP":         4,
	}
)

func (x Connection_Preferences_Linux_DNSMode) Enum() *Connection_Preferences_Linux_DNSMode {
	p := new(Connection_Preferences_Linux_DNSMode)
	*p = x
	return p
}

func (x Connection_Preferences_Linux_DNSMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_Linux_DNSMode) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[4].Descriptor()
}

func (Connection_Preferences_Linux_DNSMode) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[4]
}

func (x Connection_Preferences_Linux_DNSMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_Linux_DNSMode.Descriptor instead.
func (Connection_Preferences_Linux_DNSMode) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

type Connection_Preferences_Linux_ImplementationMode int32

const (
	Connection_Preferences_Linux_WG_KERNEL    Connection_Preferences_Linux_ImplementationMode = 0
	Connection_Preferences_Linux_WG_USERSPACE Connection_Preferences_Linux_ImplementationMode = 1
	Connection_Preferences_Linux_WG_NETSTACK  Connection_Preferences_Linux_ImplementationMode = 2
)

// Enum value maps for Connection_Preferences_Linux_ImplementationMode.
var (
	Connection_Preferences_Linux_ImplementationMode_name = map[int32]string{
		0: "WG_KERNEL",
		1: "WG_USERSPACE",
		2: "WG_NETSTACK",
	}
	Connection_Preferences_Linux_ImplementationMode_value = map[string]int32{
		"WG_KERNEL":    0,
		"WG_USERSPACE": 1,
		"WG_NETSTACK":  2,
	}
)

func (x Connection_Preferences_Linux_ImplementationMode) Enum() *Connection_Preferences_Linux_ImplementationMode {
	p := new(Connection_Preferences_Linux_ImplementationMode)
	*p = x
	return p
}

func (x Connection_Preferences_Linux_ImplementationMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_Linux_ImplementationMode) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[5].Descriptor()
}

func (Connection_Preferences_Linux_ImplementationMode) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[5]
}

func (x Connection_Preferences_Linux_ImplementationMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_Linux_ImplementationMode.Descriptor instead.
func (Connection_Preferences_Linux_ImplementationMode) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

type Connection_Preferences_MacOS_DNSMode int32

const (
	Connection_Preferences_MacOS_RESOLVCONF   Connection_Preferences_MacOS_DNSMode = 0
	Connection_Preferences_MacOS_NETWORKSETUP Connection_Preferences_MacOS_DNSMode = 1
	Connection_Preferences_MacOS_IN_APP       Connection_Preferences_MacOS_DNSMode = 2
)

// Enum value maps for Connection_Preferences_MacOS_DNSMode.
var (
	Connection_Preferences_MacOS_DNSMode_name = map[int32]string{
		0: "RESOLVCONF",
		1: "NETWORKSETUP",
		2: "IN_APP",
	}
	Connection_Preferences_MacOS_DNSMode_value = map[string]int32{
		"RESOLVCONF":   0,
		"NETWORKSETUP": 1,
		"IN_APP":       2,
	}
)

func (x Connection_Preferences_MacOS_DNSMode) Enum() *Connection_Preferences_MacOS_DNSMode {
	p := new(Connection_Preferences_MacOS_DNSMode)
	*p = x
	return p
}

func (x Connection_Preferences_MacOS_DNSMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_MacOS_DNSMode) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[6].Descriptor()
}

func (Connection_Preferences_MacOS_DNSMode) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[6]
}

func (x Connection_Preferences_MacOS_DNSMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_MacOS_DNSMode.Descriptor instead.
func (Connection_Preferences_MacOS_DNSMode) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

type Connection_Preferences_PublishedService_L4Type int32

const (
	Connection_Preferences_PublishedService_UNKNOWN Connection_Preferences_PublishedService_L4Type = 0
	Connection_Preferences_PublishedService_TCP     Connection_Preferences_PublishedService_L4Type = 1
	Connection_Preferences_PublishedService_UDP     Connection_Preferences_PublishedService_L4Type = 2
)

// Enum value maps for Connection_Preferences_PublishedService_L4Type.
var (
	Connection_Preferences_PublishedService_L4Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "TCP",
		2: "UDP",
	}
	Connection_Preferences_PublishedService_L4Type_value = map[string]int32{
		"UNKNOWN": 0,
		"TCP":     1,
		"UDP":     2,
	}
)

func (x Connection_Preferences_PublishedService_L4Type) Enum() *Connection_Preferences_PublishedService_L4Type {
	p := new(Connection_Preferences_PublishedService_L4Type)
	*p = x
	return p
}

func (x Connection_Preferences_PublishedService_L4Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_Preferences_PublishedService_L4Type) Descriptor() protoreflect.EnumDescriptor {
	return file_configv1_proto_enumTypes[7].Descriptor()
}

func (Connection_Preferences_PublishedService_L4Type) Type() protoreflect.EnumType {
	return &file_configv1_proto_enumTypes[7]
}

func (x Connection_Preferences_PublishedService_L4Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_Preferences_PublishedService_L4Type.Descriptor instead.
func (Connection_Preferences_PublishedService_L4Type) EnumDescriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 4, 0}
}

type Connection struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp  `protobuf:"bytes,1,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Connection    *userv1.ConnectionState `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
	Preferences   *Connection_Preferences `protobuf:"bytes,3,opt,name=preferences,proto3" json:"preferences,omitempty"`
	Info          *Connection_Info        `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection) Reset() {
	*x = Connection{}
	mi := &file_configv1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0}
}

func (x *Connection) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Connection) GetConnection() *userv1.ConnectionState {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Connection) GetPreferences() *Connection_Preferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

func (x *Connection) GetInfo() *Connection_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type State struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	DomainMap     map[string]*State_Domain `protobuf:"bytes,1,rep,name=domainMap,proto3" json:"domainMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *State) Reset() {
	*x = State{}
	mi := &file_configv1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{1}
}

func (x *State) GetDomainMap() map[string]*State_Domain {
	if x != nil {
		return x.DomainMap
	}
	return nil
}

type Connection_Preferences struct {
	state             protoimpl.MessageState                     `protogen:"open.v1"`
	DeviceName        string                                     `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	LinuxPrefs        *Connection_Preferences_Linux              `protobuf:"bytes,2,opt,name=linuxPrefs,proto3" json:"linuxPrefs,omitempty"`
	L3Mode            Connection_Preferences_L3Mode              `protobuf:"varint,3,opt,name=l3Mode,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_L3Mode" json:"l3Mode,omitempty"`
	WindowsPrefs      *Connection_Preferences_Windows            `protobuf:"bytes,4,opt,name=windowsPrefs,proto3" json:"windowsPrefs,omitempty"`
	MacosPrefs        *Connection_Preferences_MacOS              `protobuf:"bytes,5,opt,name=macosPrefs,proto3" json:"macosPrefs,omitempty"`
	IgnoreDNS         bool                                       `protobuf:"varint,6,opt,name=ignoreDNS,proto3" json:"ignoreDNS,omitempty"`
	KeepAliveSeconds  int32                                      `protobuf:"varint,7,opt,name=keepAliveSeconds,proto3" json:"keepAliveSeconds,omitempty"`
	Enforcel3Mode     bool                                       `protobuf:"varint,8,opt,name=enforcel3Mode,proto3" json:"enforcel3Mode,omitempty"`
	Mtu               int32                                      `protobuf:"varint,9,opt,name=mtu,proto3" json:"mtu,omitempty"`
	ServeOpts         *Connection_Preferences_ServeOpts          `protobuf:"bytes,10,opt,name=serveOpts,proto3" json:"serveOpts,omitempty"`
	RuntimeMode       Connection_Preferences_RuntimeMode         `protobuf:"varint,11,opt,name=runtimeMode,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_RuntimeMode" json:"runtimeMode,omitempty"`
	PublishedServices []*Connection_Preferences_PublishedService `protobuf:"bytes,12,rep,name=publishedServices,proto3" json:"publishedServices,omitempty"`
	ConnectionType    Connection_Preferences_ConnectionType      `protobuf:"varint,13,opt,name=connectionType,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_ConnectionType" json:"connectionType,omitempty"`
	ESSH              *Connection_Preferences_ESSH               `protobuf:"bytes,14,opt,name=eSSH,proto3" json:"eSSH,omitempty"`
	LocalDNS          *Connection_Preferences_LocalDNS           `protobuf:"bytes,15,opt,name=localDNS,proto3" json:"localDNS,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Connection_Preferences) Reset() {
	*x = Connection_Preferences{}
	mi := &file_configv1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences) ProtoMessage() {}

func (x *Connection_Preferences) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences.ProtoReflect.Descriptor instead.
func (*Connection_Preferences) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Connection_Preferences) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *Connection_Preferences) GetLinuxPrefs() *Connection_Preferences_Linux {
	if x != nil {
		return x.LinuxPrefs
	}
	return nil
}

func (x *Connection_Preferences) GetL3Mode() Connection_Preferences_L3Mode {
	if x != nil {
		return x.L3Mode
	}
	return Connection_Preferences_BOTH
}

func (x *Connection_Preferences) GetWindowsPrefs() *Connection_Preferences_Windows {
	if x != nil {
		return x.WindowsPrefs
	}
	return nil
}

func (x *Connection_Preferences) GetMacosPrefs() *Connection_Preferences_MacOS {
	if x != nil {
		return x.MacosPrefs
	}
	return nil
}

func (x *Connection_Preferences) GetIgnoreDNS() bool {
	if x != nil {
		return x.IgnoreDNS
	}
	return false
}

func (x *Connection_Preferences) GetKeepAliveSeconds() int32 {
	if x != nil {
		return x.KeepAliveSeconds
	}
	return 0
}

func (x *Connection_Preferences) GetEnforcel3Mode() bool {
	if x != nil {
		return x.Enforcel3Mode
	}
	return false
}

func (x *Connection_Preferences) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *Connection_Preferences) GetServeOpts() *Connection_Preferences_ServeOpts {
	if x != nil {
		return x.ServeOpts
	}
	return nil
}

func (x *Connection_Preferences) GetRuntimeMode() Connection_Preferences_RuntimeMode {
	if x != nil {
		return x.RuntimeMode
	}
	return Connection_Preferences_MACHINE
}

func (x *Connection_Preferences) GetPublishedServices() []*Connection_Preferences_PublishedService {
	if x != nil {
		return x.PublishedServices
	}
	return nil
}

func (x *Connection_Preferences) GetConnectionType() Connection_Preferences_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return Connection_Preferences_CONNECTION_TYPE_UNSET
}

func (x *Connection_Preferences) GetESSH() *Connection_Preferences_ESSH {
	if x != nil {
		return x.ESSH
	}
	return nil
}

func (x *Connection_Preferences) GetLocalDNS() *Connection_Preferences_LocalDNS {
	if x != nil {
		return x.LocalDNS
	}
	return nil
}

type Connection_Info struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Cluster       *Connection_Info_Cluster `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Info) Reset() {
	*x = Connection_Info{}
	mi := &file_configv1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Info) ProtoMessage() {}

func (x *Connection_Info) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Info.ProtoReflect.Descriptor instead.
func (*Connection_Info) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Connection_Info) GetCluster() *Connection_Info_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

type Connection_Preferences_ServeOpts struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	IsEnabled     bool                                       `protobuf:"varint,1,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	ProxyMode     Connection_Preferences_ServeOpts_ProxyMode `protobuf:"varint,2,opt,name=proxyMode,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_ServeOpts_ProxyMode" json:"proxyMode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Preferences_ServeOpts) Reset() {
	*x = Connection_Preferences_ServeOpts{}
	mi := &file_configv1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_ServeOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_ServeOpts) ProtoMessage() {}

func (x *Connection_Preferences_ServeOpts) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_ServeOpts.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_ServeOpts) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Connection_Preferences_ServeOpts) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Connection_Preferences_ServeOpts) GetProxyMode() Connection_Preferences_ServeOpts_ProxyMode {
	if x != nil {
		return x.ProxyMode
	}
	return Connection_Preferences_ServeOpts_NONE
}

type Connection_Preferences_Linux struct {
	state                     protoimpl.MessageState                          `protogen:"open.v1"`
	ResolvConf                []byte                                          `protobuf:"bytes,1,opt,name=resolvConf,proto3" json:"resolvConf,omitempty"`
	Namespace                 string                                          `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	MainTableIndex            int64                                           `protobuf:"varint,3,opt,name=mainTableIndex,proto3" json:"mainTableIndex,omitempty"`
	TableIndex                int64                                           `protobuf:"varint,4,opt,name=tableIndex,proto3" json:"tableIndex,omitempty"`
	DnsMode                   Connection_Preferences_Linux_DNSMode            `protobuf:"varint,6,opt,name=dnsMode,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_Linux_DNSMode" json:"dnsMode,omitempty"`
	ImplementationMode        Connection_Preferences_Linux_ImplementationMode `protobuf:"varint,7,opt,name=implementationMode,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_Linux_ImplementationMode" json:"implementationMode,omitempty"`
	EnforceImplementationMode bool                                            `protobuf:"varint,8,opt,name=enforceImplementationMode,proto3" json:"enforceImplementationMode,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Connection_Preferences_Linux) Reset() {
	*x = Connection_Preferences_Linux{}
	mi := &file_configv1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_Linux) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_Linux) ProtoMessage() {}

func (x *Connection_Preferences_Linux) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_Linux.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_Linux) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *Connection_Preferences_Linux) GetResolvConf() []byte {
	if x != nil {
		return x.ResolvConf
	}
	return nil
}

func (x *Connection_Preferences_Linux) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Connection_Preferences_Linux) GetMainTableIndex() int64 {
	if x != nil {
		return x.MainTableIndex
	}
	return 0
}

func (x *Connection_Preferences_Linux) GetTableIndex() int64 {
	if x != nil {
		return x.TableIndex
	}
	return 0
}

func (x *Connection_Preferences_Linux) GetDnsMode() Connection_Preferences_Linux_DNSMode {
	if x != nil {
		return x.DnsMode
	}
	return Connection_Preferences_Linux_NO_DNS
}

func (x *Connection_Preferences_Linux) GetImplementationMode() Connection_Preferences_Linux_ImplementationMode {
	if x != nil {
		return x.ImplementationMode
	}
	return Connection_Preferences_Linux_WG_KERNEL
}

func (x *Connection_Preferences_Linux) GetEnforceImplementationMode() bool {
	if x != nil {
		return x.EnforceImplementationMode
	}
	return false
}

type Connection_Preferences_Windows struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Preferences_Windows) Reset() {
	*x = Connection_Preferences_Windows{}
	mi := &file_configv1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_Windows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_Windows) ProtoMessage() {}

func (x *Connection_Preferences_Windows) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_Windows.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_Windows) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 2}
}

type Connection_Preferences_MacOS struct {
	state              protoimpl.MessageState                           `protogen:"open.v1"`
	ResolvConf         []byte                                           `protobuf:"bytes,1,opt,name=resolvConf,proto3" json:"resolvConf,omitempty"`
	DnsMode            Connection_Preferences_MacOS_DNSMode             `protobuf:"varint,2,opt,name=dnsMode,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_MacOS_DNSMode" json:"dnsMode,omitempty"`
	NetworkSetupConfig *Connection_Preferences_MacOS_NetworkSetupConfig `protobuf:"bytes,3,opt,name=networkSetupConfig,proto3" json:"networkSetupConfig,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Connection_Preferences_MacOS) Reset() {
	*x = Connection_Preferences_MacOS{}
	mi := &file_configv1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_MacOS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_MacOS) ProtoMessage() {}

func (x *Connection_Preferences_MacOS) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_MacOS.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_MacOS) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 3}
}

func (x *Connection_Preferences_MacOS) GetResolvConf() []byte {
	if x != nil {
		return x.ResolvConf
	}
	return nil
}

func (x *Connection_Preferences_MacOS) GetDnsMode() Connection_Preferences_MacOS_DNSMode {
	if x != nil {
		return x.DnsMode
	}
	return Connection_Preferences_MacOS_RESOLVCONF
}

func (x *Connection_Preferences_MacOS) GetNetworkSetupConfig() *Connection_Preferences_MacOS_NetworkSetupConfig {
	if x != nil {
		return x.NetworkSetupConfig
	}
	return nil
}

type Connection_Preferences_PublishedService struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Name          string                                         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace     string                                         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Fqdn          string                                         `protobuf:"bytes,3,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Port          int32                                          `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	HostPort      int32                                          `protobuf:"varint,5,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	L4Type        Connection_Preferences_PublishedService_L4Type `protobuf:"varint,6,opt,name=l4Type,proto3,enum=octelium.api.client.config.v1.Connection_Preferences_PublishedService_L4Type" json:"l4Type,omitempty"`
	HostAddress   string                                         `protobuf:"bytes,7,opt,name=hostAddress,proto3" json:"hostAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Preferences_PublishedService) Reset() {
	*x = Connection_Preferences_PublishedService{}
	mi := &file_configv1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_PublishedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_PublishedService) ProtoMessage() {}

func (x *Connection_Preferences_PublishedService) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_PublishedService.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_PublishedService) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 4}
}

func (x *Connection_Preferences_PublishedService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection_Preferences_PublishedService) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Connection_Preferences_PublishedService) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *Connection_Preferences_PublishedService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Connection_Preferences_PublishedService) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *Connection_Preferences_PublishedService) GetL4Type() Connection_Preferences_PublishedService_L4Type {
	if x != nil {
		return x.L4Type
	}
	return Connection_Preferences_PublishedService_UNKNOWN
}

func (x *Connection_Preferences_PublishedService) GetHostAddress() string {
	if x != nil {
		return x.HostAddress
	}
	return ""
}

type Connection_Preferences_ESSH struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	IsEnabled         bool                   `protobuf:"varint,1,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	User              string                 `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Port              int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	ListenIPAddresses []string               `protobuf:"bytes,4,rep,name=listenIPAddresses,proto3" json:"listenIPAddresses,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Connection_Preferences_ESSH) Reset() {
	*x = Connection_Preferences_ESSH{}
	mi := &file_configv1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_ESSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_ESSH) ProtoMessage() {}

func (x *Connection_Preferences_ESSH) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_ESSH.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_ESSH) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 5}
}

func (x *Connection_Preferences_ESSH) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Connection_Preferences_ESSH) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Connection_Preferences_ESSH) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Connection_Preferences_ESSH) GetListenIPAddresses() []string {
	if x != nil {
		return x.ListenIPAddresses
	}
	return nil
}

type Connection_Preferences_LocalDNS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsEnabled     bool                   `protobuf:"varint,1,opt,name=isEnabled,proto3" json:"isEnabled,omitempty"`
	ListenAddress string                 `protobuf:"bytes,2,opt,name=listenAddress,proto3" json:"listenAddress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Preferences_LocalDNS) Reset() {
	*x = Connection_Preferences_LocalDNS{}
	mi := &file_configv1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_LocalDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_LocalDNS) ProtoMessage() {}

func (x *Connection_Preferences_LocalDNS) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_LocalDNS.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_LocalDNS) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 6}
}

func (x *Connection_Preferences_LocalDNS) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Connection_Preferences_LocalDNS) GetListenAddress() string {
	if x != nil {
		return x.ListenAddress
	}
	return ""
}

type Connection_Preferences_MacOS_NetworkSetupConfig struct {
	state         protoimpl.MessageState                                     `protogen:"open.v1"`
	Services      []*Connection_Preferences_MacOS_NetworkSetupConfig_Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig) Reset() {
	*x = Connection_Preferences_MacOS_NetworkSetupConfig{}
	mi := &file_configv1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_MacOS_NetworkSetupConfig) ProtoMessage() {}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_MacOS_NetworkSetupConfig.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_MacOS_NetworkSetupConfig) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 3, 0}
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig) GetServices() []*Connection_Preferences_MacOS_NetworkSetupConfig_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

type Connection_Preferences_MacOS_NetworkSetupConfig_Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DnsServers    []string               `protobuf:"bytes,2,rep,name=dnsServers,proto3" json:"dnsServers,omitempty"`
	DnsDomains    []string               `protobuf:"bytes,3,rep,name=dnsDomains,proto3" json:"dnsDomains,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig_Service) Reset() {
	*x = Connection_Preferences_MacOS_NetworkSetupConfig_Service{}
	mi := &file_configv1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Preferences_MacOS_NetworkSetupConfig_Service) ProtoMessage() {}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig_Service) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Preferences_MacOS_NetworkSetupConfig_Service.ProtoReflect.Descriptor instead.
func (*Connection_Preferences_MacOS_NetworkSetupConfig_Service) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 0, 3, 0, 0}
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig_Service) GetDnsServers() []string {
	if x != nil {
		return x.DnsServers
	}
	return nil
}

func (x *Connection_Preferences_MacOS_NetworkSetupConfig_Service) GetDnsDomains() []string {
	if x != nil {
		return x.DnsDomains
	}
	return nil
}

type Connection_Info_Cluster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Connection_Info_Cluster) Reset() {
	*x = Connection_Info_Cluster{}
	mi := &file_configv1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Connection_Info_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Info_Cluster) ProtoMessage() {}

func (x *Connection_Info_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Info_Cluster.ProtoReflect.Descriptor instead.
func (*Connection_Info_Cluster) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Connection_Info_Cluster) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type State_Domain struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SessionToken      *authv1.SessionToken   `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	SessionTokenSetAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sessionTokenSetAt,proto3" json:"sessionTokenSetAt,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *State_Domain) Reset() {
	*x = State_Domain{}
	mi := &file_configv1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *State_Domain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Domain) ProtoMessage() {}

func (x *State_Domain) ProtoReflect() protoreflect.Message {
	mi := &file_configv1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Domain.ProtoReflect.Descriptor instead.
func (*State_Domain) Descriptor() ([]byte, []int) {
	return file_configv1_proto_rawDescGZIP(), []int{1, 0}
}

func (x *State_Domain) GetSessionToken() *authv1.SessionToken {
	if x != nil {
		return x.SessionToken
	}
	return nil
}

func (x *State_Domain) GetSessionTokenSetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SessionTokenSetAt
	}
	return nil
}

var File_configv1_proto protoreflect.FileDescriptor

var file_configv1_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x26, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x76,
	0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xcb, 0x1c, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x42,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x1a, 0x9c, 0x19, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x50, 0x72, 0x65, 0x66, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x50, 0x72, 0x65, 0x66, 0x73, 0x12,
	0x54, 0x0a, 0x06, 0x6c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6c,
	0x33, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x61, 0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x73, 0x50, 0x72, 0x65, 0x66, 0x73, 0x12, 0x5b, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x6f,
	0x73, 0x50, 0x72, 0x65, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x6f, 0x73,
	0x50, 0x72, 0x65, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44,
	0x4e, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x44, 0x4e, 0x53, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6b,
	0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6c, 0x33, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6c,
	0x33, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x5d, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x4f, 0x70, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x6c, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4e, 0x0a, 0x04, 0x65, 0x53, 0x53, 0x48, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x53, 0x53, 0x48, 0x52, 0x04, 0x65, 0x53, 0x53, 0x48, 0x12,
	0x5a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e,
	0x53, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e, 0x53, 0x1a, 0xd7, 0x01, 0x0a, 0x09,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x67, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x43, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x53, 0x45, 0x52, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x56, 0x4f, 0x59, 0x5f,
	0x45, 0x4d, 0x42, 0x45, 0x44, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4e,
	0x56, 0x4f, 0x59, 0x10, 0x03, 0x1a, 0xcd, 0x04, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5d, 0x0a, 0x07, 0x64, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x6e, 0x75, 0x78, 0x2e, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x64, 0x6e, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7e, 0x0a, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x49, 0x6d,
	0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x12, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x59, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x4f, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x43, 0x54, 0x4c, 0x5f, 0x42, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x04, 0x22, 0x46, 0x0a,
	0x12, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x47, 0x5f, 0x4b, 0x45, 0x52, 0x4e, 0x45, 0x4c,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x50, 0x41,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x47, 0x5f, 0x4e, 0x45, 0x54, 0x53, 0x54,
	0x41, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x09, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x1a, 0xa9, 0x04, 0x0a, 0x05, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x5d, 0x0a, 0x07, 0x64, 0x6e,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x2e, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x64, 0x6e, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7e, 0x0a, 0x12, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x63,
	0x4f, 0x53, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xe7, 0x01, 0x0a, 0x12, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x72, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x4f, 0x53, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x5d, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6e, 0x73, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x45, 0x54, 0x55, 0x50, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x02, 0x1a, 0xba, 0x02, 0x0a,
	0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x65, 0x0a, 0x06, 0x6c, 0x34, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x27, 0x0a, 0x06, 0x4c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x1a, 0x7a, 0x0a, 0x04, 0x45, 0x53, 0x53,
	0x48, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x44, 0x4e,
	0x53, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x22, 0x0a, 0x06, 0x4c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x36, 0x10, 0x02, 0x22, 0x35, 0x0a, 0x0b, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x43, 0x48,
	0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x02,
	0x22, 0x5f, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x10,
	0x02, 0x1a, 0x7b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x07, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x21, 0x0a, 0x07, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xe7,
	0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x1a, 0x9f, 0x01, 0x0a, 0x06,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x74, 0x41, 0x74, 0x1a, 0x69, 0x0a,
	0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_configv1_proto_rawDescOnce sync.Once
	file_configv1_proto_rawDescData = file_configv1_proto_rawDesc
)

func file_configv1_proto_rawDescGZIP() []byte {
	file_configv1_proto_rawDescOnce.Do(func() {
		file_configv1_proto_rawDescData = protoimpl.X.CompressGZIP(file_configv1_proto_rawDescData)
	})
	return file_configv1_proto_rawDescData
}

var file_configv1_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_configv1_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_configv1_proto_goTypes = []any{
	(Connection_Preferences_L3Mode)(0),                              // 0: octelium.api.client.config.v1.Connection.Preferences.L3Mode
	(Connection_Preferences_RuntimeMode)(0),                         // 1: octelium.api.client.config.v1.Connection.Preferences.RuntimeMode
	(Connection_Preferences_ConnectionType)(0),                      // 2: octelium.api.client.config.v1.Connection.Preferences.ConnectionType
	(Connection_Preferences_ServeOpts_ProxyMode)(0),                 // 3: octelium.api.client.config.v1.Connection.Preferences.ServeOpts.ProxyMode
	(Connection_Preferences_Linux_DNSMode)(0),                       // 4: octelium.api.client.config.v1.Connection.Preferences.Linux.DNSMode
	(Connection_Preferences_Linux_ImplementationMode)(0),            // 5: octelium.api.client.config.v1.Connection.Preferences.Linux.ImplementationMode
	(Connection_Preferences_MacOS_DNSMode)(0),                       // 6: octelium.api.client.config.v1.Connection.Preferences.MacOS.DNSMode
	(Connection_Preferences_PublishedService_L4Type)(0),             // 7: octelium.api.client.config.v1.Connection.Preferences.PublishedService.L4Type
	(*Connection)(nil),                                              // 8: octelium.api.client.config.v1.Connection
	(*State)(nil),                                                   // 9: octelium.api.client.config.v1.State
	(*Connection_Preferences)(nil),                                  // 10: octelium.api.client.config.v1.Connection.Preferences
	(*Connection_Info)(nil),                                         // 11: octelium.api.client.config.v1.Connection.Info
	(*Connection_Preferences_ServeOpts)(nil),                        // 12: octelium.api.client.config.v1.Connection.Preferences.ServeOpts
	(*Connection_Preferences_Linux)(nil),                            // 13: octelium.api.client.config.v1.Connection.Preferences.Linux
	(*Connection_Preferences_Windows)(nil),                          // 14: octelium.api.client.config.v1.Connection.Preferences.Windows
	(*Connection_Preferences_MacOS)(nil),                            // 15: octelium.api.client.config.v1.Connection.Preferences.MacOS
	(*Connection_Preferences_PublishedService)(nil),                 // 16: octelium.api.client.config.v1.Connection.Preferences.PublishedService
	(*Connection_Preferences_ESSH)(nil),                             // 17: octelium.api.client.config.v1.Connection.Preferences.ESSH
	(*Connection_Preferences_LocalDNS)(nil),                         // 18: octelium.api.client.config.v1.Connection.Preferences.LocalDNS
	(*Connection_Preferences_MacOS_NetworkSetupConfig)(nil),         // 19: octelium.api.client.config.v1.Connection.Preferences.MacOS.NetworkSetupConfig
	(*Connection_Preferences_MacOS_NetworkSetupConfig_Service)(nil), // 20: octelium.api.client.config.v1.Connection.Preferences.MacOS.NetworkSetupConfig.Service
	(*Connection_Info_Cluster)(nil),                                 // 21: octelium.api.client.config.v1.Connection.Info.Cluster
	(*State_Domain)(nil),                                            // 22: octelium.api.client.config.v1.State.Domain
	nil,                                                             // 23: octelium.api.client.config.v1.State.DomainMapEntry
	(*timestamppb.Timestamp)(nil),                                   // 24: google.protobuf.Timestamp
	(*userv1.ConnectionState)(nil),                                  // 25: octelium.api.main.user.v1.ConnectionState
	(*authv1.SessionToken)(nil),                                     // 26: octelium.api.main.auth.v1.SessionToken
}
var file_configv1_proto_depIdxs = []int32{
	24, // 0: octelium.api.client.config.v1.Connection.createdAt:type_name -> google.protobuf.Timestamp
	25, // 1: octelium.api.client.config.v1.Connection.connection:type_name -> octelium.api.main.user.v1.ConnectionState
	10, // 2: octelium.api.client.config.v1.Connection.preferences:type_name -> octelium.api.client.config.v1.Connection.Preferences
	11, // 3: octelium.api.client.config.v1.Connection.info:type_name -> octelium.api.client.config.v1.Connection.Info
	23, // 4: octelium.api.client.config.v1.State.domainMap:type_name -> octelium.api.client.config.v1.State.DomainMapEntry
	13, // 5: octelium.api.client.config.v1.Connection.Preferences.linuxPrefs:type_name -> octelium.api.client.config.v1.Connection.Preferences.Linux
	0,  // 6: octelium.api.client.config.v1.Connection.Preferences.l3Mode:type_name -> octelium.api.client.config.v1.Connection.Preferences.L3Mode
	14, // 7: octelium.api.client.config.v1.Connection.Preferences.windowsPrefs:type_name -> octelium.api.client.config.v1.Connection.Preferences.Windows
	15, // 8: octelium.api.client.config.v1.Connection.Preferences.macosPrefs:type_name -> octelium.api.client.config.v1.Connection.Preferences.MacOS
	12, // 9: octelium.api.client.config.v1.Connection.Preferences.serveOpts:type_name -> octelium.api.client.config.v1.Connection.Preferences.ServeOpts
	1,  // 10: octelium.api.client.config.v1.Connection.Preferences.runtimeMode:type_name -> octelium.api.client.config.v1.Connection.Preferences.RuntimeMode
	16, // 11: octelium.api.client.config.v1.Connection.Preferences.publishedServices:type_name -> octelium.api.client.config.v1.Connection.Preferences.PublishedService
	2,  // 12: octelium.api.client.config.v1.Connection.Preferences.connectionType:type_name -> octelium.api.client.config.v1.Connection.Preferences.ConnectionType
	17, // 13: octelium.api.client.config.v1.Connection.Preferences.eSSH:type_name -> octelium.api.client.config.v1.Connection.Preferences.ESSH
	18, // 14: octelium.api.client.config.v1.Connection.Preferences.localDNS:type_name -> octelium.api.client.config.v1.Connection.Preferences.LocalDNS
	21, // 15: octelium.api.client.config.v1.Connection.Info.cluster:type_name -> octelium.api.client.config.v1.Connection.Info.Cluster
	3,  // 16: octelium.api.client.config.v1.Connection.Preferences.ServeOpts.proxyMode:type_name -> octelium.api.client.config.v1.Connection.Preferences.ServeOpts.ProxyMode
	4,  // 17: octelium.api.client.config.v1.Connection.Preferences.Linux.dnsMode:type_name -> octelium.api.client.config.v1.Connection.Preferences.Linux.DNSMode
	5,  // 18: octelium.api.client.config.v1.Connection.Preferences.Linux.implementationMode:type_name -> octelium.api.client.config.v1.Connection.Preferences.Linux.ImplementationMode
	6,  // 19: octelium.api.client.config.v1.Connection.Preferences.MacOS.dnsMode:type_name -> octelium.api.client.config.v1.Connection.Preferences.MacOS.DNSMode
	19, // 20: octelium.api.client.config.v1.Connection.Preferences.MacOS.networkSetupConfig:type_name -> octelium.api.client.config.v1.Connection.Preferences.MacOS.NetworkSetupConfig
	7,  // 21: octelium.api.client.config.v1.Connection.Preferences.PublishedService.l4Type:type_name -> octelium.api.client.config.v1.Connection.Preferences.PublishedService.L4Type
	20, // 22: octelium.api.client.config.v1.Connection.Preferences.MacOS.NetworkSetupConfig.services:type_name -> octelium.api.client.config.v1.Connection.Preferences.MacOS.NetworkSetupConfig.Service
	26, // 23: octelium.api.client.config.v1.State.Domain.sessionToken:type_name -> octelium.api.main.auth.v1.SessionToken
	24, // 24: octelium.api.client.config.v1.State.Domain.sessionTokenSetAt:type_name -> google.protobuf.Timestamp
	22, // 25: octelium.api.client.config.v1.State.DomainMapEntry.value:type_name -> octelium.api.client.config.v1.State.Domain
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_configv1_proto_init() }
func file_configv1_proto_init() {
	if File_configv1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_configv1_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_configv1_proto_goTypes,
		DependencyIndexes: file_configv1_proto_depIdxs,
		EnumInfos:         file_configv1_proto_enumTypes,
		MessageInfos:      file_configv1_proto_msgTypes,
	}.Build()
	File_configv1_proto = out.File
	file_configv1_proto_rawDesc = nil
	file_configv1_proto_goTypes = nil
	file_configv1_proto_depIdxs = nil
}
