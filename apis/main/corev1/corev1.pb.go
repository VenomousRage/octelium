// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: corev1.proto

package corev1

import (
	metav1 "github.com/octelium/octelium/apis/main/metav1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type User_Spec_Type int32

const (
	// TYPE_UNKNOWN is reserved. Not used by any User.
	User_Spec_TYPE_UNKNOWN User_Spec_Type = 0
	// HUMAN means that the User is used by a human.
	User_Spec_HUMAN User_Spec_Type = 1
	// WORKLOAD means that the User is used by a workload (e.g. container,
	// pod, sdk, server, etc...)
	User_Spec_WORKLOAD User_Spec_Type = 2
)

// Enum value maps for User_Spec_Type.
var (
	User_Spec_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "HUMAN",
		2: "WORKLOAD",
	}
	User_Spec_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"HUMAN":        1,
		"WORKLOAD":     2,
	}
)

func (x User_Spec_Type) Enum() *User_Spec_Type {
	p := new(User_Spec_Type)
	*p = x
	return p
}

func (x User_Spec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (User_Spec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[0].Descriptor()
}

func (User_Spec_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[0]
}

func (x User_Spec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use User_Spec_Type.Descriptor instead.
func (User_Spec_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 0, 0}
}

type Service_Spec_Mode int32

const (
	Service_Spec_MODE_UNSET Service_Spec_Mode = 0
	// TCP is the TCP mode. This is the default mode if not explicitly set.
	Service_Spec_TCP Service_Spec_Mode = 1
	// UDP is the UDP mode
	Service_Spec_UDP Service_Spec_Mode = 2
	// HTTP is the HTTP mode
	Service_Spec_HTTP Service_Spec_Mode = 3
	// SSH is the SSH mode
	Service_Spec_SSH Service_Spec_Mode = 4
	// KUBERNETES is the Kubernetes mode
	Service_Spec_KUBERNETES Service_Spec_Mode = 5
	// POSTGRES is the PostgreSQL mode
	Service_Spec_POSTGRES Service_Spec_Mode = 6
	// MYSQL is the MySQL mode
	Service_Spec_MYSQL Service_Spec_Mode = 7
	// GRPC is the gRPC mode
	Service_Spec_GRPC Service_Spec_Mode = 8
	// WEB is the WEB mode. Use this mode over the typical HTTP mode as a hint
	// for the Cluster and the Users that this is a web application that can
	// be accessed over browsers by HUMAN Users.
	Service_Spec_WEB Service_Spec_Mode = 9
	// DNS is the DNS mode
	Service_Spec_DNS Service_Spec_Mode = 10
)

// Enum value maps for Service_Spec_Mode.
var (
	Service_Spec_Mode_name = map[int32]string{
		0:  "MODE_UNSET",
		1:  "TCP",
		2:  "UDP",
		3:  "HTTP",
		4:  "SSH",
		5:  "KUBERNETES",
		6:  "POSTGRES",
		7:  "MYSQL",
		8:  "GRPC",
		9:  "WEB",
		10: "DNS",
	}
	Service_Spec_Mode_value = map[string]int32{
		"MODE_UNSET": 0,
		"TCP":        1,
		"UDP":        2,
		"HTTP":       3,
		"SSH":        4,
		"KUBERNETES": 5,
		"POSTGRES":   6,
		"MYSQL":      7,
		"GRPC":       8,
		"WEB":        9,
		"DNS":        10,
	}
)

func (x Service_Spec_Mode) Enum() *Service_Spec_Mode {
	p := new(Service_Spec_Mode)
	*p = x
	return p
}

func (x Service_Spec_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[1].Descriptor()
}

func (Service_Spec_Mode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[1]
}

func (x Service_Spec_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Mode.Descriptor instead.
func (Service_Spec_Mode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 0}
}

type Service_Spec_Config_HTTP_Body_Mode int32

const (
	Service_Spec_Config_HTTP_Body_MODE_UNSET Service_Spec_Config_HTTP_Body_Mode = 0
	// JSON means that the request body must be validated for a valid
	// JSON
	Service_Spec_Config_HTTP_Body_JSON Service_Spec_Config_HTTP_Body_Mode = 1
)

// Enum value maps for Service_Spec_Config_HTTP_Body_Mode.
var (
	Service_Spec_Config_HTTP_Body_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "JSON",
	}
	Service_Spec_Config_HTTP_Body_Mode_value = map[string]int32{
		"MODE_UNSET": 0,
		"JSON":       1,
	}
)

func (x Service_Spec_Config_HTTP_Body_Mode) Enum() *Service_Spec_Config_HTTP_Body_Mode {
	p := new(Service_Spec_Config_HTTP_Body_Mode)
	*p = x
	return p
}

func (x Service_Spec_Config_HTTP_Body_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Config_HTTP_Body_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[2].Descriptor()
}

func (Service_Spec_Config_HTTP_Body_Mode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[2]
}

func (x Service_Spec_Config_HTTP_Body_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Body_Mode.Descriptor instead.
func (Service_Spec_Config_HTTP_Body_Mode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 3, 0}
}

type Service_Spec_Config_HTTP_Header_ForwardedMode int32

const (
	Service_Spec_Config_HTTP_Header_UNSET Service_Spec_Config_HTTP_Header_ForwardedMode = 0
	// DROP deletes the Forwarded header. Currently the default
	// behavior.
	Service_Spec_Config_HTTP_Header_DROP Service_Spec_Config_HTTP_Header_ForwardedMode = 1
	// OBFUSCATE obfuscates from and by fields of the header
	Service_Spec_Config_HTTP_Header_OBFUSCATE Service_Spec_Config_HTTP_Header_ForwardedMode = 2
	// TRANSPARENT transparently passes the Forwarded header as is, if
	// exists.
	Service_Spec_Config_HTTP_Header_TRANSPARENT Service_Spec_Config_HTTP_Header_ForwardedMode = 3
)

// Enum value maps for Service_Spec_Config_HTTP_Header_ForwardedMode.
var (
	Service_Spec_Config_HTTP_Header_ForwardedMode_name = map[int32]string{
		0: "UNSET",
		1: "DROP",
		2: "OBFUSCATE",
		3: "TRANSPARENT",
	}
	Service_Spec_Config_HTTP_Header_ForwardedMode_value = map[string]int32{
		"UNSET":       0,
		"DROP":        1,
		"OBFUSCATE":   2,
		"TRANSPARENT": 3,
	}
)

func (x Service_Spec_Config_HTTP_Header_ForwardedMode) Enum() *Service_Spec_Config_HTTP_Header_ForwardedMode {
	p := new(Service_Spec_Config_HTTP_Header_ForwardedMode)
	*p = x
	return p
}

func (x Service_Spec_Config_HTTP_Header_ForwardedMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Config_HTTP_Header_ForwardedMode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[3].Descriptor()
}

func (Service_Spec_Config_HTTP_Header_ForwardedMode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[3]
}

func (x Service_Spec_Config_HTTP_Header_ForwardedMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Header_ForwardedMode.Descriptor instead.
func (Service_Spec_Config_HTTP_Header_ForwardedMode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 4, 0}
}

type Service_Spec_Config_HTTP_Plugin_Phase int32

const (
	Service_Spec_Config_HTTP_Plugin_PHASE_UNSET Service_Spec_Config_HTTP_Plugin_Phase = 0
	Service_Spec_Config_HTTP_Plugin_PRE_AUTH    Service_Spec_Config_HTTP_Plugin_Phase = 1
	Service_Spec_Config_HTTP_Plugin_POST_AUTH   Service_Spec_Config_HTTP_Plugin_Phase = 2
)

// Enum value maps for Service_Spec_Config_HTTP_Plugin_Phase.
var (
	Service_Spec_Config_HTTP_Plugin_Phase_name = map[int32]string{
		0: "PHASE_UNSET",
		1: "PRE_AUTH",
		2: "POST_AUTH",
	}
	Service_Spec_Config_HTTP_Plugin_Phase_value = map[string]int32{
		"PHASE_UNSET": 0,
		"PRE_AUTH":    1,
		"POST_AUTH":   2,
	}
)

func (x Service_Spec_Config_HTTP_Plugin_Phase) Enum() *Service_Spec_Config_HTTP_Plugin_Phase {
	p := new(Service_Spec_Config_HTTP_Plugin_Phase)
	*p = x
	return p
}

func (x Service_Spec_Config_HTTP_Plugin_Phase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Config_HTTP_Plugin_Phase) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[4].Descriptor()
}

func (Service_Spec_Config_HTTP_Plugin_Phase) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[4]
}

func (x Service_Spec_Config_HTTP_Plugin_Phase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_Phase.Descriptor instead.
func (Service_Spec_Config_HTTP_Plugin_Phase) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 0}
}

type Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode int32

const (
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HEADER_SEND_MODE_UNSET Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode = 0
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_SEND                   Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode = 1
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_SKIP                   Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode = 2
)

// Enum value maps for Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode.
var (
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode_name = map[int32]string{
		0: "HEADER_SEND_MODE_UNSET",
		1: "SEND",
		2: "SKIP",
	}
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode_value = map[string]int32{
		"HEADER_SEND_MODE_UNSET": 0,
		"SEND":                   1,
		"SKIP":                   2,
	}
)

func (x Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode) Enum() *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode {
	p := new(Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode)
	*p = x
	return p
}

func (x Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[5].Descriptor()
}

func (Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[5]
}

func (x Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode.Descriptor instead.
func (Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 0, 1, 0}
}

type Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode int32

const (
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BODY_SEND_MODE_UNSET Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode = 0
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_NONE                 Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode = 1
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BUFFERED             Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode = 2
)

// Enum value maps for Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode.
var (
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode_name = map[int32]string{
		0: "BODY_SEND_MODE_UNSET",
		1: "NONE",
		2: "BUFFERED",
	}
	Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode_value = map[string]int32{
		"BODY_SEND_MODE_UNSET": 0,
		"NONE":                 1,
		"BUFFERED":             2,
	}
)

func (x Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode) Enum() *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode {
	p := new(Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode)
	*p = x
	return p
}

func (x Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[6].Descriptor()
}

func (Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[6]
}

func (x Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode.Descriptor instead.
func (Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 0, 1, 1}
}

type Service_Spec_Config_Postgres_SSLMode int32

const (
	// SSL_MODE_UNSET fallbacks to the default behavior which is currently
	// "prefer"
	Service_Spec_Config_Postgres_SSL_MODE_UNSET Service_Spec_Config_Postgres_SSLMode = 0
	// DISABLE sets SSL mode to "disable"
	Service_Spec_Config_Postgres_DISABLE Service_Spec_Config_Postgres_SSLMode = 1
	// REQUIRE sets SSL mode to "require". This is extremely recommended
	// over the default "prefer" mode if the upstream is listening over
	// TLS which is the case for SaaS databases.
	Service_Spec_Config_Postgres_REQUIRE Service_Spec_Config_Postgres_SSLMode = 2
)

// Enum value maps for Service_Spec_Config_Postgres_SSLMode.
var (
	Service_Spec_Config_Postgres_SSLMode_name = map[int32]string{
		0: "SSL_MODE_UNSET",
		1: "DISABLE",
		2: "REQUIRE",
	}
	Service_Spec_Config_Postgres_SSLMode_value = map[string]int32{
		"SSL_MODE_UNSET": 0,
		"DISABLE":        1,
		"REQUIRE":        2,
	}
)

func (x Service_Spec_Config_Postgres_SSLMode) Enum() *Service_Spec_Config_Postgres_SSLMode {
	p := new(Service_Spec_Config_Postgres_SSLMode)
	*p = x
	return p
}

func (x Service_Spec_Config_Postgres_SSLMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Config_Postgres_SSLMode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[7].Descriptor()
}

func (Service_Spec_Config_Postgres_SSLMode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[7]
}

func (x Service_Spec_Config_Postgres_SSLMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Config_Postgres_SSLMode.Descriptor instead.
func (Service_Spec_Config_Postgres_SSLMode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 2, 0}
}

type Service_Spec_Config_Postgres_Authorization_Mode int32

const (
	// MODE_UNSET uses the default configuration which is currently NONE
	Service_Spec_Config_Postgres_Authorization_MODE_UNSET Service_Spec_Config_Postgres_Authorization_Mode = 0
	// ALL forces authorization for every PostgreSQL command (e.g. query
	// commands) not just at the beginning of the connection
	Service_Spec_Config_Postgres_Authorization_ALL Service_Spec_Config_Postgres_Authorization_Mode = 1
	// NONE which is currently the default behavior enforces
	// authorization only at the beginning of the connection
	Service_Spec_Config_Postgres_Authorization_NONE Service_Spec_Config_Postgres_Authorization_Mode = 2
)

// Enum value maps for Service_Spec_Config_Postgres_Authorization_Mode.
var (
	Service_Spec_Config_Postgres_Authorization_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "ALL",
		2: "NONE",
	}
	Service_Spec_Config_Postgres_Authorization_Mode_value = map[string]int32{
		"MODE_UNSET": 0,
		"ALL":        1,
		"NONE":       2,
	}
)

func (x Service_Spec_Config_Postgres_Authorization_Mode) Enum() *Service_Spec_Config_Postgres_Authorization_Mode {
	p := new(Service_Spec_Config_Postgres_Authorization_Mode)
	*p = x
	return p
}

func (x Service_Spec_Config_Postgres_Authorization_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Config_Postgres_Authorization_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[8].Descriptor()
}

func (Service_Spec_Config_Postgres_Authorization_Mode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[8]
}

func (x Service_Spec_Config_Postgres_Authorization_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Config_Postgres_Authorization_Mode.Descriptor instead.
func (Service_Spec_Config_Postgres_Authorization_Mode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 2, 1, 0}
}

type Session_Spec_State int32

const (
	// STATE_UNKNOWN is not used
	Session_Spec_STATE_UNKNOWN Session_Spec_State = 0
	// ACTIVE means that the Session is active
	Session_Spec_ACTIVE Session_Spec_State = 1
	// PENDING means that the Session is pending an activation or rejection.
	Session_Spec_PENDING Session_Spec_State = 2
	// REJECTED means that the Session is rejected
	Session_Spec_REJECTED Session_Spec_State = 3
)

// Enum value maps for Session_Spec_State.
var (
	Session_Spec_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "ACTIVE",
		2: "PENDING",
		3: "REJECTED",
	}
	Session_Spec_State_value = map[string]int32{
		"STATE_UNKNOWN": 0,
		"ACTIVE":        1,
		"PENDING":       2,
		"REJECTED":      3,
	}
)

func (x Session_Spec_State) Enum() *Session_Spec_State {
	p := new(Session_Spec_State)
	*p = x
	return p
}

func (x Session_Spec_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Spec_State) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[9].Descriptor()
}

func (Session_Spec_State) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[9]
}

func (x Session_Spec_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Spec_State.Descriptor instead.
func (Session_Spec_State) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 0, 0}
}

type Session_Status_Type int32

const (
	Session_Status_TYPE_UNKNOWN Session_Status_Type = 0
	// CLIENT is meant for client-based Sessions (i.e. the octelium client)
	Session_Status_CLIENT Session_Status_Type = 1
	// CLIENTLESS is meant for client-less/BeyondCorp-based Sessions
	Session_Status_CLIENTLESS Session_Status_Type = 2
)

// Enum value maps for Session_Status_Type.
var (
	Session_Status_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "CLIENT",
		2: "CLIENTLESS",
	}
	Session_Status_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"CLIENT":       1,
		"CLIENTLESS":   2,
	}
)

func (x Session_Status_Type) Enum() *Session_Status_Type {
	p := new(Session_Status_Type)
	*p = x
	return p
}

func (x Session_Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[10].Descriptor()
}

func (Session_Status_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[10]
}

func (x Session_Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Type.Descriptor instead.
func (Session_Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0}
}

type Session_Status_Connection_L3Mode int32

const (
	// BOTH means that the connection is dual-stack
	Session_Status_Connection_BOTH Session_Status_Connection_L3Mode = 0
	// V4 means that the connection is IPv4-only
	Session_Status_Connection_V4 Session_Status_Connection_L3Mode = 1
	// V6 means that the connection is IPv6-only
	Session_Status_Connection_V6 Session_Status_Connection_L3Mode = 2
)

// Enum value maps for Session_Status_Connection_L3Mode.
var (
	Session_Status_Connection_L3Mode_name = map[int32]string{
		0: "BOTH",
		1: "V4",
		2: "V6",
	}
	Session_Status_Connection_L3Mode_value = map[string]int32{
		"BOTH": 0,
		"V4":   1,
		"V6":   2,
	}
)

func (x Session_Status_Connection_L3Mode) Enum() *Session_Status_Connection_L3Mode {
	p := new(Session_Status_Connection_L3Mode)
	*p = x
	return p
}

func (x Session_Status_Connection_L3Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Connection_L3Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[11].Descriptor()
}

func (Session_Status_Connection_L3Mode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[11]
}

func (x Session_Status_Connection_L3Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Connection_L3Mode.Descriptor instead.
func (Session_Status_Connection_L3Mode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 0}
}

type Session_Status_Connection_Type int32

const (
	// TYPE_UNKNOWN is not used
	Session_Status_Connection_TYPE_UNKNOWN Session_Status_Connection_Type = 0
	// WIREGUARD means that the connection is WireGuard
	Session_Status_Connection_WIREGUARD Session_Status_Connection_Type = 1
	// QUICV0 means that the connection is QUICv0
	Session_Status_Connection_QUICV0 Session_Status_Connection_Type = 2
)

// Enum value maps for Session_Status_Connection_Type.
var (
	Session_Status_Connection_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "WIREGUARD",
		2: "QUICV0",
	}
	Session_Status_Connection_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"WIREGUARD":    1,
		"QUICV0":       2,
	}
)

func (x Session_Status_Connection_Type) Enum() *Session_Status_Connection_Type {
	p := new(Session_Status_Connection_Type)
	*p = x
	return p
}

func (x Session_Status_Connection_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Connection_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[12].Descriptor()
}

func (Session_Status_Connection_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[12]
}

func (x Session_Status_Connection_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Connection_Type.Descriptor instead.
func (Session_Status_Connection_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 1}
}

type Session_Status_Connection_Upstream_L4Type int32

const (
	// L4_UNKNOWN is not used
	Session_Status_Connection_Upstream_L4_UNKNOWN Session_Status_Connection_Upstream_L4Type = 0
	// TCP means that the upstream is TCP-based
	Session_Status_Connection_Upstream_TCP Session_Status_Connection_Upstream_L4Type = 1
	// UDP means that the upstream is UDP-based
	Session_Status_Connection_Upstream_UDP Session_Status_Connection_Upstream_L4Type = 2
)

// Enum value maps for Session_Status_Connection_Upstream_L4Type.
var (
	Session_Status_Connection_Upstream_L4Type_name = map[int32]string{
		0: "L4_UNKNOWN",
		1: "TCP",
		2: "UDP",
	}
	Session_Status_Connection_Upstream_L4Type_value = map[string]int32{
		"L4_UNKNOWN": 0,
		"TCP":        1,
		"UDP":        2,
	}
)

func (x Session_Status_Connection_Upstream_L4Type) Enum() *Session_Status_Connection_Upstream_L4Type {
	p := new(Session_Status_Connection_Upstream_L4Type)
	*p = x
	return p
}

func (x Session_Status_Connection_Upstream_L4Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Connection_Upstream_L4Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[13].Descriptor()
}

func (Session_Status_Connection_Upstream_L4Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[13]
}

func (x Session_Status_Connection_Upstream_L4Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Connection_Upstream_L4Type.Descriptor instead.
func (Session_Status_Connection_Upstream_L4Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 1, 0}
}

type Session_Status_Connection_Upstream_Mode int32

const (
	// MODE_UNSET is not used
	Session_Status_Connection_Upstream_MODE_UNSET Session_Status_Connection_Upstream_Mode = 0
	// DEFAULT means that the upstream is a typical server that can
	// be connected to from the client
	Session_Status_Connection_Upstream_DEFAULT Session_Status_Connection_Upstream_Mode = 1
	// ESSH means that the upstream is an embedded SSH server running
	// from within the client
	Session_Status_Connection_Upstream_ESSH Session_Status_Connection_Upstream_Mode = 2
)

// Enum value maps for Session_Status_Connection_Upstream_Mode.
var (
	Session_Status_Connection_Upstream_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "DEFAULT",
		2: "ESSH",
	}
	Session_Status_Connection_Upstream_Mode_value = map[string]int32{
		"MODE_UNSET": 0,
		"DEFAULT":    1,
		"ESSH":       2,
	}
)

func (x Session_Status_Connection_Upstream_Mode) Enum() *Session_Status_Connection_Upstream_Mode {
	p := new(Session_Status_Connection_Upstream_Mode)
	*p = x
	return p
}

func (x Session_Status_Connection_Upstream_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Connection_Upstream_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[14].Descriptor()
}

func (Session_Status_Connection_Upstream_Mode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[14]
}

func (x Session_Status_Connection_Upstream_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Connection_Upstream_Mode.Descriptor instead.
func (Session_Status_Connection_Upstream_Mode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 1, 1}
}

type Session_Status_Authentication_Info_Type int32

const (
	Session_Status_Authentication_Info_TYPE_UNSET        Session_Status_Authentication_Info_Type = 0
	Session_Status_Authentication_Info_CREDENTIAL        Session_Status_Authentication_Info_Type = 1
	Session_Status_Authentication_Info_INTERNAL          Session_Status_Authentication_Info_Type = 2
	Session_Status_Authentication_Info_REFRESH_TOKEN     Session_Status_Authentication_Info_Type = 3
	Session_Status_Authentication_Info_EXTERNAL          Session_Status_Authentication_Info_Type = 4
	Session_Status_Authentication_Info_IDENTITY_PROVIDER Session_Status_Authentication_Info_Type = 5
	Session_Status_Authentication_Info_AUTHENTICATOR     Session_Status_Authentication_Info_Type = 6
)

// Enum value maps for Session_Status_Authentication_Info_Type.
var (
	Session_Status_Authentication_Info_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		1: "CREDENTIAL",
		2: "INTERNAL",
		3: "REFRESH_TOKEN",
		4: "EXTERNAL",
		5: "IDENTITY_PROVIDER",
		6: "AUTHENTICATOR",
	}
	Session_Status_Authentication_Info_Type_value = map[string]int32{
		"TYPE_UNSET":        0,
		"CREDENTIAL":        1,
		"INTERNAL":          2,
		"REFRESH_TOKEN":     3,
		"EXTERNAL":          4,
		"IDENTITY_PROVIDER": 5,
		"AUTHENTICATOR":     6,
	}
)

func (x Session_Status_Authentication_Info_Type) Enum() *Session_Status_Authentication_Info_Type {
	p := new(Session_Status_Authentication_Info_Type)
	*p = x
	return p
}

func (x Session_Status_Authentication_Info_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Authentication_Info_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[15].Descriptor()
}

func (Session_Status_Authentication_Info_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[15]
}

func (x Session_Status_Authentication_Info_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Authentication_Info_Type.Descriptor instead.
func (Session_Status_Authentication_Info_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 0}
}

type Session_Status_Authentication_Info_AAL int32

const (
	Session_Status_Authentication_Info_AAL_UNSET Session_Status_Authentication_Info_AAL = 0
	Session_Status_Authentication_Info_AAL1      Session_Status_Authentication_Info_AAL = 1
	Session_Status_Authentication_Info_AAL2      Session_Status_Authentication_Info_AAL = 2
	Session_Status_Authentication_Info_AAL3      Session_Status_Authentication_Info_AAL = 3
)

// Enum value maps for Session_Status_Authentication_Info_AAL.
var (
	Session_Status_Authentication_Info_AAL_name = map[int32]string{
		0: "AAL_UNSET",
		1: "AAL1",
		2: "AAL2",
		3: "AAL3",
	}
	Session_Status_Authentication_Info_AAL_value = map[string]int32{
		"AAL_UNSET": 0,
		"AAL1":      1,
		"AAL2":      2,
		"AAL3":      3,
	}
)

func (x Session_Status_Authentication_Info_AAL) Enum() *Session_Status_Authentication_Info_AAL {
	p := new(Session_Status_Authentication_Info_AAL)
	*p = x
	return p
}

func (x Session_Status_Authentication_Info_AAL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Authentication_Info_AAL) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[16].Descriptor()
}

func (Session_Status_Authentication_Info_AAL) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[16]
}

func (x Session_Status_Authentication_Info_AAL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Authentication_Info_AAL.Descriptor instead.
func (Session_Status_Authentication_Info_AAL) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 1}
}

type Session_Status_Authentication_Info_IdentityProvider_Type int32

const (
	Session_Status_Authentication_Info_IdentityProvider_TYPE_UNKNOWN        Session_Status_Authentication_Info_IdentityProvider_Type = 0
	Session_Status_Authentication_Info_IdentityProvider_GITHUB              Session_Status_Authentication_Info_IdentityProvider_Type = 1
	Session_Status_Authentication_Info_IdentityProvider_OIDC                Session_Status_Authentication_Info_IdentityProvider_Type = 2
	Session_Status_Authentication_Info_IdentityProvider_SAML                Session_Status_Authentication_Info_IdentityProvider_Type = 3
	Session_Status_Authentication_Info_IdentityProvider_OIDC_IDENTITY_TOKEN Session_Status_Authentication_Info_IdentityProvider_Type = 4
)

// Enum value maps for Session_Status_Authentication_Info_IdentityProvider_Type.
var (
	Session_Status_Authentication_Info_IdentityProvider_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "GITHUB",
		2: "OIDC",
		3: "SAML",
		4: "OIDC_IDENTITY_TOKEN",
	}
	Session_Status_Authentication_Info_IdentityProvider_Type_value = map[string]int32{
		"TYPE_UNKNOWN":        0,
		"GITHUB":              1,
		"OIDC":                2,
		"SAML":                3,
		"OIDC_IDENTITY_TOKEN": 4,
	}
)

func (x Session_Status_Authentication_Info_IdentityProvider_Type) Enum() *Session_Status_Authentication_Info_IdentityProvider_Type {
	p := new(Session_Status_Authentication_Info_IdentityProvider_Type)
	*p = x
	return p
}

func (x Session_Status_Authentication_Info_IdentityProvider_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Authentication_Info_IdentityProvider_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[17].Descriptor()
}

func (Session_Status_Authentication_Info_IdentityProvider_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[17]
}

func (x Session_Status_Authentication_Info_IdentityProvider_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Authentication_Info_IdentityProvider_Type.Descriptor instead.
func (Session_Status_Authentication_Info_IdentityProvider_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 0, 0}
}

type Session_Status_Authentication_Info_Credential_Type int32

const (
	Session_Status_Authentication_Info_Credential_TYPE_UNKNOWN Session_Status_Authentication_Info_Credential_Type = 0
	Session_Status_Authentication_Info_Credential_AUTH_TOKEN   Session_Status_Authentication_Info_Credential_Type = 1
	Session_Status_Authentication_Info_Credential_OAUTH2       Session_Status_Authentication_Info_Credential_Type = 2
)

// Enum value maps for Session_Status_Authentication_Info_Credential_Type.
var (
	Session_Status_Authentication_Info_Credential_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "AUTH_TOKEN",
		2: "OAUTH2",
	}
	Session_Status_Authentication_Info_Credential_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"AUTH_TOKEN":   1,
		"OAUTH2":       2,
	}
)

func (x Session_Status_Authentication_Info_Credential_Type) Enum() *Session_Status_Authentication_Info_Credential_Type {
	p := new(Session_Status_Authentication_Info_Credential_Type)
	*p = x
	return p
}

func (x Session_Status_Authentication_Info_Credential_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Session_Status_Authentication_Info_Credential_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[18].Descriptor()
}

func (Session_Status_Authentication_Info_Credential_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[18]
}

func (x Session_Status_Authentication_Info_Credential_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Session_Status_Authentication_Info_Credential_Type.Descriptor instead.
func (Session_Status_Authentication_Info_Credential_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 1, 0}
}

type Credential_Spec_Type int32

const (
	Credential_Spec_TYPE_UNKNOWN Credential_Spec_Type = 0
	// AUTH_TOKEN means that the Credential is an authentication token.
	// This is the default type
	Credential_Spec_AUTH_TOKEN Credential_Spec_Type = 1
	// OAUTH2 means that the Credential is an OAuth2 client credential.
	// This is used for WORKLOAD users seeking to authenticate themselves via
	// OAuth2 client credentials flow in a client-less way.
	Credential_Spec_OAUTH2 Credential_Spec_Type = 2
	// ACCESS_TOKEN means that the Credential is a bearer access token that
	// can be used directly to securely access public Services
	Credential_Spec_ACCESS_TOKEN Credential_Spec_Type = 3
)

// Enum value maps for Credential_Spec_Type.
var (
	Credential_Spec_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "AUTH_TOKEN",
		2: "OAUTH2",
		3: "ACCESS_TOKEN",
	}
	Credential_Spec_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"AUTH_TOKEN":   1,
		"OAUTH2":       2,
		"ACCESS_TOKEN": 3,
	}
)

func (x Credential_Spec_Type) Enum() *Credential_Spec_Type {
	p := new(Credential_Spec_Type)
	*p = x
	return p
}

func (x Credential_Spec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Credential_Spec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[19].Descriptor()
}

func (Credential_Spec_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[19]
}

func (x Credential_Spec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Credential_Spec_Type.Descriptor instead.
func (Credential_Spec_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{13, 0, 0}
}

type Device_Spec_State int32

const (
	// STATE_UNKNOWN is not used
	Device_Spec_STATE_UNKNOWN Device_Spec_State = 0
	// ACTIVE means that the Device is active
	Device_Spec_ACTIVE Device_Spec_State = 1
	// PENDING means that the Device is pending an activation or rejection.
	Device_Spec_PENDING Device_Spec_State = 2
	// REJECTED means that the Device is rejected
	Device_Spec_REJECTED Device_Spec_State = 3
)

// Enum value maps for Device_Spec_State.
var (
	Device_Spec_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "ACTIVE",
		2: "PENDING",
		3: "REJECTED",
	}
	Device_Spec_State_value = map[string]int32{
		"STATE_UNKNOWN": 0,
		"ACTIVE":        1,
		"PENDING":       2,
		"REJECTED":      3,
	}
)

func (x Device_Spec_State) Enum() *Device_Spec_State {
	p := new(Device_Spec_State)
	*p = x
	return p
}

func (x Device_Spec_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Spec_State) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[20].Descriptor()
}

func (Device_Spec_State) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[20]
}

func (x Device_Spec_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Spec_State.Descriptor instead.
func (Device_Spec_State) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{17, 0, 0}
}

type Device_Status_OSType int32

const (
	Device_Status_OS_TYPE_UNKNOWN Device_Status_OSType = 0
	Device_Status_LINUX           Device_Status_OSType = 1
	Device_Status_WINDOWS         Device_Status_OSType = 2
	Device_Status_MAC             Device_Status_OSType = 3
	Device_Status_ANDROID         Device_Status_OSType = 4
	Device_Status_IOS             Device_Status_OSType = 5
)

// Enum value maps for Device_Status_OSType.
var (
	Device_Status_OSType_name = map[int32]string{
		0: "OS_TYPE_UNKNOWN",
		1: "LINUX",
		2: "WINDOWS",
		3: "MAC",
		4: "ANDROID",
		5: "IOS",
	}
	Device_Status_OSType_value = map[string]int32{
		"OS_TYPE_UNKNOWN": 0,
		"LINUX":           1,
		"WINDOWS":         2,
		"MAC":             3,
		"ANDROID":         4,
		"IOS":             5,
	}
)

func (x Device_Status_OSType) Enum() *Device_Status_OSType {
	p := new(Device_Status_OSType)
	*p = x
	return p
}

func (x Device_Status_OSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Device_Status_OSType) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[21].Descriptor()
}

func (Device_Status_OSType) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[21]
}

func (x Device_Status_OSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Device_Status_OSType.Descriptor instead.
func (Device_Status_OSType) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{17, 1, 0}
}

type Policy_Spec_Rule_Effect int32

const (
	// EFFECT_UNKNOWN is not used.
	Policy_Spec_Rule_EFFECT_UNKNOWN Policy_Spec_Rule_Effect = 0
	// ALLOW allows the request.
	Policy_Spec_Rule_ALLOW Policy_Spec_Rule_Effect = 1
	// DENY denies the request.
	Policy_Spec_Rule_DENY Policy_Spec_Rule_Effect = 2
)

// Enum value maps for Policy_Spec_Rule_Effect.
var (
	Policy_Spec_Rule_Effect_name = map[int32]string{
		0: "EFFECT_UNKNOWN",
		1: "ALLOW",
		2: "DENY",
	}
	Policy_Spec_Rule_Effect_value = map[string]int32{
		"EFFECT_UNKNOWN": 0,
		"ALLOW":          1,
		"DENY":           2,
	}
)

func (x Policy_Spec_Rule_Effect) Enum() *Policy_Spec_Rule_Effect {
	p := new(Policy_Spec_Rule_Effect)
	*p = x
	return p
}

func (x Policy_Spec_Rule_Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Spec_Rule_Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[22].Descriptor()
}

func (Policy_Spec_Rule_Effect) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[22]
}

func (x Policy_Spec_Rule_Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_Spec_Rule_Effect.Descriptor instead.
func (Policy_Spec_Rule_Effect) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{30, 0, 0, 0}
}

type Policy_Spec_EnforcementRule_Effect int32

const (
	// EFFECT_UNKNOWN is not used.
	Policy_Spec_EnforcementRule_EFFECT_UNKNOWN Policy_Spec_EnforcementRule_Effect = 0
	// ALLOW means that the policy allows the request if any of the
	// Conditions are matched.
	Policy_Spec_EnforcementRule_ENFORCE Policy_Spec_EnforcementRule_Effect = 1
	// DENY means that the policy denies the request if any of the
	// Conditions are matched.
	Policy_Spec_EnforcementRule_IGNORE Policy_Spec_EnforcementRule_Effect = 2
)

// Enum value maps for Policy_Spec_EnforcementRule_Effect.
var (
	Policy_Spec_EnforcementRule_Effect_name = map[int32]string{
		0: "EFFECT_UNKNOWN",
		1: "ENFORCE",
		2: "IGNORE",
	}
	Policy_Spec_EnforcementRule_Effect_value = map[string]int32{
		"EFFECT_UNKNOWN": 0,
		"ENFORCE":        1,
		"IGNORE":         2,
	}
)

func (x Policy_Spec_EnforcementRule_Effect) Enum() *Policy_Spec_EnforcementRule_Effect {
	p := new(Policy_Spec_EnforcementRule_Effect)
	*p = x
	return p
}

func (x Policy_Spec_EnforcementRule_Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Policy_Spec_EnforcementRule_Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[23].Descriptor()
}

func (Policy_Spec_EnforcementRule_Effect) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[23]
}

func (x Policy_Spec_EnforcementRule_Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Policy_Spec_EnforcementRule_Effect.Descriptor instead.
func (Policy_Spec_EnforcementRule_Effect) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{30, 0, 1, 0}
}

type AccessLog_Entry_Info_HTTP_HTTPVersion int32

const (
	// HTTP_VERSION_UNKNOWN stands for an unspecified HTTP version.
	AccessLog_Entry_Info_HTTP_HTTP_VERSION_UNKNOWN AccessLog_Entry_Info_HTTP_HTTPVersion = 0
	// HTTP10 is HTTP/1.0
	AccessLog_Entry_Info_HTTP_HTTP10 AccessLog_Entry_Info_HTTP_HTTPVersion = 1
	// HTTP 11 is HTTP/1.1
	AccessLog_Entry_Info_HTTP_HTTP11 AccessLog_Entry_Info_HTTP_HTTPVersion = 2
	// HTTP2 is HTTP/2
	AccessLog_Entry_Info_HTTP_HTTP2 AccessLog_Entry_Info_HTTP_HTTPVersion = 3
	// HTTP3 is HTTP/3
	AccessLog_Entry_Info_HTTP_HTTP3 AccessLog_Entry_Info_HTTP_HTTPVersion = 4
)

// Enum value maps for AccessLog_Entry_Info_HTTP_HTTPVersion.
var (
	AccessLog_Entry_Info_HTTP_HTTPVersion_name = map[int32]string{
		0: "HTTP_VERSION_UNKNOWN",
		1: "HTTP10",
		2: "HTTP11",
		3: "HTTP2",
		4: "HTTP3",
	}
	AccessLog_Entry_Info_HTTP_HTTPVersion_value = map[string]int32{
		"HTTP_VERSION_UNKNOWN": 0,
		"HTTP10":               1,
		"HTTP11":               2,
		"HTTP2":                3,
		"HTTP3":                4,
	}
)

func (x AccessLog_Entry_Info_HTTP_HTTPVersion) Enum() *AccessLog_Entry_Info_HTTP_HTTPVersion {
	p := new(AccessLog_Entry_Info_HTTP_HTTPVersion)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_HTTP_HTTPVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_HTTP_HTTPVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[24].Descriptor()
}

func (AccessLog_Entry_Info_HTTP_HTTPVersion) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[24]
}

func (x AccessLog_Entry_Info_HTTP_HTTPVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_HTTP_HTTPVersion.Descriptor instead.
func (AccessLog_Entry_Info_HTTP_HTTPVersion) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 0, 0}
}

type AccessLog_Entry_Info_TCP_Type int32

const (
	// TYPE_UNKNOWN is not used
	AccessLog_Entry_Info_TCP_TYPE_UNKNOWN AccessLog_Entry_Info_TCP_Type = 0
	// START is the start of a TCP connection
	AccessLog_Entry_Info_TCP_START AccessLog_Entry_Info_TCP_Type = 1
	// END is the end of a TCP connection
	AccessLog_Entry_Info_TCP_END AccessLog_Entry_Info_TCP_Type = 2
)

// Enum value maps for AccessLog_Entry_Info_TCP_Type.
var (
	AccessLog_Entry_Info_TCP_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "START",
		2: "END",
	}
	AccessLog_Entry_Info_TCP_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"START":        1,
		"END":          2,
	}
)

func (x AccessLog_Entry_Info_TCP_Type) Enum() *AccessLog_Entry_Info_TCP_Type {
	p := new(AccessLog_Entry_Info_TCP_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_TCP_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_TCP_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[25].Descriptor()
}

func (AccessLog_Entry_Info_TCP_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[25]
}

func (x AccessLog_Entry_Info_TCP_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_TCP_Type.Descriptor instead.
func (AccessLog_Entry_Info_TCP_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 1, 0}
}

type AccessLog_Entry_Info_SSH_Type int32

const (
	// TYPE_UNKNOWN is not used
	AccessLog_Entry_Info_SSH_TYPE_UNKNOWN AccessLog_Entry_Info_SSH_Type = 0
	// START is the start of a SSH connection
	AccessLog_Entry_Info_SSH_START AccessLog_Entry_Info_SSH_Type = 1
	// END is end of a SSH connection
	AccessLog_Entry_Info_SSH_END AccessLog_Entry_Info_SSH_Type = 2
	// DIRECT_TCPIP_START is the start of a new "direct-tcpip" channel
	AccessLog_Entry_Info_SSH_DIRECT_TCPIP_START AccessLog_Entry_Info_SSH_Type = 3
	// DIRECT_TCPIP_END is the end of the "direct-tcpip" channel
	AccessLog_Entry_Info_SSH_DIRECT_TCPIP_END AccessLog_Entry_Info_SSH_Type = 4
	// SESSION_START is the start of a new session channel
	AccessLog_Entry_Info_SSH_SESSION_START AccessLog_Entry_Info_SSH_Type = 5
	// SESSION_END is the end of a session channel
	AccessLog_Entry_Info_SSH_SESSION_END AccessLog_Entry_Info_SSH_Type = 6
	// SESSION_RECORDING is a recording chunk of a session
	AccessLog_Entry_Info_SSH_SESSION_RECORDING AccessLog_Entry_Info_SSH_Type = 7
	// SESSION_REQUEST_SHELL is a shell request of a session
	AccessLog_Entry_Info_SSH_SESSION_REQUEST_SHELL AccessLog_Entry_Info_SSH_Type = 8
	// SESSION_REQUEST_EXEC is an exec request of a session
	AccessLog_Entry_Info_SSH_SESSION_REQUEST_EXEC AccessLog_Entry_Info_SSH_Type = 9
	// SESSION_REQUEST_SUBSYSTEM is a subsystem request of a session
	AccessLog_Entry_Info_SSH_SESSION_REQUEST_SUBSYSTEM AccessLog_Entry_Info_SSH_Type = 10
)

// Enum value maps for AccessLog_Entry_Info_SSH_Type.
var (
	AccessLog_Entry_Info_SSH_Type_name = map[int32]string{
		0:  "TYPE_UNKNOWN",
		1:  "START",
		2:  "END",
		3:  "DIRECT_TCPIP_START",
		4:  "DIRECT_TCPIP_END",
		5:  "SESSION_START",
		6:  "SESSION_END",
		7:  "SESSION_RECORDING",
		8:  "SESSION_REQUEST_SHELL",
		9:  "SESSION_REQUEST_EXEC",
		10: "SESSION_REQUEST_SUBSYSTEM",
	}
	AccessLog_Entry_Info_SSH_Type_value = map[string]int32{
		"TYPE_UNKNOWN":              0,
		"START":                     1,
		"END":                       2,
		"DIRECT_TCPIP_START":        3,
		"DIRECT_TCPIP_END":          4,
		"SESSION_START":             5,
		"SESSION_END":               6,
		"SESSION_RECORDING":         7,
		"SESSION_REQUEST_SHELL":     8,
		"SESSION_REQUEST_EXEC":      9,
		"SESSION_REQUEST_SUBSYSTEM": 10,
	}
)

func (x AccessLog_Entry_Info_SSH_Type) Enum() *AccessLog_Entry_Info_SSH_Type {
	p := new(AccessLog_Entry_Info_SSH_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_SSH_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_SSH_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[26].Descriptor()
}

func (AccessLog_Entry_Info_SSH_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[26]
}

func (x AccessLog_Entry_Info_SSH_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH_Type.Descriptor instead.
func (AccessLog_Entry_Info_SSH_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2, 0}
}

type AccessLog_Entry_Info_SSH_SessionRecording_Type int32

const (
	// TYPE_UNKNOWN is not used
	AccessLog_Entry_Info_SSH_SessionRecording_TYPE_UNKNOWN AccessLog_Entry_Info_SSH_SessionRecording_Type = 0
	// STDIN is a stdin recording chunk
	AccessLog_Entry_Info_SSH_SessionRecording_STDIN AccessLog_Entry_Info_SSH_SessionRecording_Type = 1
	// STDOUT is a stdout recording chunk
	AccessLog_Entry_Info_SSH_SessionRecording_STDOUT AccessLog_Entry_Info_SSH_SessionRecording_Type = 2
)

// Enum value maps for AccessLog_Entry_Info_SSH_SessionRecording_Type.
var (
	AccessLog_Entry_Info_SSH_SessionRecording_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "STDIN",
		2: "STDOUT",
	}
	AccessLog_Entry_Info_SSH_SessionRecording_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"STDIN":        1,
		"STDOUT":       2,
	}
)

func (x AccessLog_Entry_Info_SSH_SessionRecording_Type) Enum() *AccessLog_Entry_Info_SSH_SessionRecording_Type {
	p := new(AccessLog_Entry_Info_SSH_SessionRecording_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_SSH_SessionRecording_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_SSH_SessionRecording_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[27].Descriptor()
}

func (AccessLog_Entry_Info_SSH_SessionRecording_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[27]
}

func (x AccessLog_Entry_Info_SSH_SessionRecording_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH_SessionRecording_Type.Descriptor instead.
func (AccessLog_Entry_Info_SSH_SessionRecording_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2, 1, 0}
}

type AccessLog_Entry_Info_UDP_Type int32

const (
	// TYPE_UNKNOWN is not used
	AccessLog_Entry_Info_UDP_TYPE_UNKNOWN AccessLog_Entry_Info_UDP_Type = 0
	// START is the start of a UDP "connection"
	AccessLog_Entry_Info_UDP_START AccessLog_Entry_Info_UDP_Type = 1
	// END is the end of a UDP "connection"
	AccessLog_Entry_Info_UDP_END AccessLog_Entry_Info_UDP_Type = 2
)

// Enum value maps for AccessLog_Entry_Info_UDP_Type.
var (
	AccessLog_Entry_Info_UDP_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "START",
		2: "END",
	}
	AccessLog_Entry_Info_UDP_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"START":        1,
		"END":          2,
	}
)

func (x AccessLog_Entry_Info_UDP_Type) Enum() *AccessLog_Entry_Info_UDP_Type {
	p := new(AccessLog_Entry_Info_UDP_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_UDP_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_UDP_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[28].Descriptor()
}

func (AccessLog_Entry_Info_UDP_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[28]
}

func (x AccessLog_Entry_Info_UDP_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_UDP_Type.Descriptor instead.
func (AccessLog_Entry_Info_UDP_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 3, 0}
}

type AccessLog_Entry_Info_Postgres_Type int32

const (
	// TYPE_UNKNOWN is not used
	AccessLog_Entry_Info_Postgres_TYPE_UNKNOWN AccessLog_Entry_Info_Postgres_Type = 0
	// SESSION_START is the start a new PostgreSQL connection
	AccessLog_Entry_Info_Postgres_SESSION_START AccessLog_Entry_Info_Postgres_Type = 1
	// SESSION_END is the end of a PostgreSQL connection
	AccessLog_Entry_Info_Postgres_SESSION_END AccessLog_Entry_Info_Postgres_Type = 2
	// QUERY is a query message
	AccessLog_Entry_Info_Postgres_QUERY AccessLog_Entry_Info_Postgres_Type = 3
	// PARSE is a parse message
	AccessLog_Entry_Info_Postgres_PARSE AccessLog_Entry_Info_Postgres_Type = 4
	// CLOSE is a close message
	AccessLog_Entry_Info_Postgres_CLOSE AccessLog_Entry_Info_Postgres_Type = 5
	// EXECUTE is an execute message
	AccessLog_Entry_Info_Postgres_EXECUTE AccessLog_Entry_Info_Postgres_Type = 6
	// BIND is a bind message
	AccessLog_Entry_Info_Postgres_BIND AccessLog_Entry_Info_Postgres_Type = 7
	// FUNCTION_CALL is a function call message
	AccessLog_Entry_Info_Postgres_FUNCTION_CALL AccessLog_Entry_Info_Postgres_Type = 8
)

// Enum value maps for AccessLog_Entry_Info_Postgres_Type.
var (
	AccessLog_Entry_Info_Postgres_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "SESSION_START",
		2: "SESSION_END",
		3: "QUERY",
		4: "PARSE",
		5: "CLOSE",
		6: "EXECUTE",
		7: "BIND",
		8: "FUNCTION_CALL",
	}
	AccessLog_Entry_Info_Postgres_Type_value = map[string]int32{
		"TYPE_UNKNOWN":  0,
		"SESSION_START": 1,
		"SESSION_END":   2,
		"QUERY":         3,
		"PARSE":         4,
		"CLOSE":         5,
		"EXECUTE":       6,
		"BIND":          7,
		"FUNCTION_CALL": 8,
	}
)

func (x AccessLog_Entry_Info_Postgres_Type) Enum() *AccessLog_Entry_Info_Postgres_Type {
	p := new(AccessLog_Entry_Info_Postgres_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_Postgres_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_Postgres_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[29].Descriptor()
}

func (AccessLog_Entry_Info_Postgres_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[29]
}

func (x AccessLog_Entry_Info_Postgres_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_Postgres_Type.Descriptor instead.
func (AccessLog_Entry_Info_Postgres_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 4, 0}
}

type AccessLog_Entry_Info_MySQL_Type int32

const (
	AccessLog_Entry_Info_MySQL_TYPE_UNKNOWN      AccessLog_Entry_Info_MySQL_Type = 0
	AccessLog_Entry_Info_MySQL_SESSION_START     AccessLog_Entry_Info_MySQL_Type = 1
	AccessLog_Entry_Info_MySQL_SESSION_END       AccessLog_Entry_Info_MySQL_Type = 2
	AccessLog_Entry_Info_MySQL_QUERY             AccessLog_Entry_Info_MySQL_Type = 3
	AccessLog_Entry_Info_MySQL_INIT_DB           AccessLog_Entry_Info_MySQL_Type = 4
	AccessLog_Entry_Info_MySQL_CREATE_DB         AccessLog_Entry_Info_MySQL_Type = 5
	AccessLog_Entry_Info_MySQL_DROP_DB           AccessLog_Entry_Info_MySQL_Type = 6
	AccessLog_Entry_Info_MySQL_QUIT              AccessLog_Entry_Info_MySQL_Type = 7
	AccessLog_Entry_Info_MySQL_PREPARE_STATEMENT AccessLog_Entry_Info_MySQL_Type = 8
	AccessLog_Entry_Info_MySQL_EXECUTE_STATEMENT AccessLog_Entry_Info_MySQL_Type = 9
	AccessLog_Entry_Info_MySQL_CLOSE_STATEMENT   AccessLog_Entry_Info_MySQL_Type = 10
	AccessLog_Entry_Info_MySQL_FETCH_STATEMENT   AccessLog_Entry_Info_MySQL_Type = 11
	AccessLog_Entry_Info_MySQL_RESET_STATEMENT   AccessLog_Entry_Info_MySQL_Type = 12
	AccessLog_Entry_Info_MySQL_DEBUG             AccessLog_Entry_Info_MySQL_Type = 13
	AccessLog_Entry_Info_MySQL_CHANGE_USER       AccessLog_Entry_Info_MySQL_Type = 14
)

// Enum value maps for AccessLog_Entry_Info_MySQL_Type.
var (
	AccessLog_Entry_Info_MySQL_Type_name = map[int32]string{
		0:  "TYPE_UNKNOWN",
		1:  "SESSION_START",
		2:  "SESSION_END",
		3:  "QUERY",
		4:  "INIT_DB",
		5:  "CREATE_DB",
		6:  "DROP_DB",
		7:  "QUIT",
		8:  "PREPARE_STATEMENT",
		9:  "EXECUTE_STATEMENT",
		10: "CLOSE_STATEMENT",
		11: "FETCH_STATEMENT",
		12: "RESET_STATEMENT",
		13: "DEBUG",
		14: "CHANGE_USER",
	}
	AccessLog_Entry_Info_MySQL_Type_value = map[string]int32{
		"TYPE_UNKNOWN":      0,
		"SESSION_START":     1,
		"SESSION_END":       2,
		"QUERY":             3,
		"INIT_DB":           4,
		"CREATE_DB":         5,
		"DROP_DB":           6,
		"QUIT":              7,
		"PREPARE_STATEMENT": 8,
		"EXECUTE_STATEMENT": 9,
		"CLOSE_STATEMENT":   10,
		"FETCH_STATEMENT":   11,
		"RESET_STATEMENT":   12,
		"DEBUG":             13,
		"CHANGE_USER":       14,
	}
)

func (x AccessLog_Entry_Info_MySQL_Type) Enum() *AccessLog_Entry_Info_MySQL_Type {
	p := new(AccessLog_Entry_Info_MySQL_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_MySQL_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_MySQL_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[30].Descriptor()
}

func (AccessLog_Entry_Info_MySQL_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[30]
}

func (x AccessLog_Entry_Info_MySQL_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_MySQL_Type.Descriptor instead.
func (AccessLog_Entry_Info_MySQL_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 5, 0}
}

type AccessLog_Entry_Info_DNS_Type int32

const (
	AccessLog_Entry_Info_DNS_TYPE_UNSET AccessLog_Entry_Info_DNS_Type = 0
	AccessLog_Entry_Info_DNS_A          AccessLog_Entry_Info_DNS_Type = 1
	AccessLog_Entry_Info_DNS_AAAA       AccessLog_Entry_Info_DNS_Type = 2
	AccessLog_Entry_Info_DNS_TXT        AccessLog_Entry_Info_DNS_Type = 3
	AccessLog_Entry_Info_DNS_CNAME      AccessLog_Entry_Info_DNS_Type = 4
	AccessLog_Entry_Info_DNS_MX         AccessLog_Entry_Info_DNS_Type = 5
	AccessLog_Entry_Info_DNS_TYPE_OTHER AccessLog_Entry_Info_DNS_Type = 6
)

// Enum value maps for AccessLog_Entry_Info_DNS_Type.
var (
	AccessLog_Entry_Info_DNS_Type_name = map[int32]string{
		0: "TYPE_UNSET",
		1: "A",
		2: "AAAA",
		3: "TXT",
		4: "CNAME",
		5: "MX",
		6: "TYPE_OTHER",
	}
	AccessLog_Entry_Info_DNS_Type_value = map[string]int32{
		"TYPE_UNSET": 0,
		"A":          1,
		"AAAA":       2,
		"TXT":        3,
		"CNAME":      4,
		"MX":         5,
		"TYPE_OTHER": 6,
	}
)

func (x AccessLog_Entry_Info_DNS_Type) Enum() *AccessLog_Entry_Info_DNS_Type {
	p := new(AccessLog_Entry_Info_DNS_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Info_DNS_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Info_DNS_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[31].Descriptor()
}

func (AccessLog_Entry_Info_DNS_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[31]
}

func (x AccessLog_Entry_Info_DNS_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Info_DNS_Type.Descriptor instead.
func (AccessLog_Entry_Info_DNS_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 8, 0}
}

type AccessLog_Entry_Common_Status int32

const (
	AccessLog_Entry_Common_STATUS_UNSET AccessLog_Entry_Common_Status = 0
	// ALLOWED means that the request is allowed
	AccessLog_Entry_Common_ALLOWED AccessLog_Entry_Common_Status = 1
	// DENIED means that the request is denied
	AccessLog_Entry_Common_DENIED AccessLog_Entry_Common_Status = 2
)

// Enum value maps for AccessLog_Entry_Common_Status.
var (
	AccessLog_Entry_Common_Status_name = map[int32]string{
		0: "STATUS_UNSET",
		1: "ALLOWED",
		2: "DENIED",
	}
	AccessLog_Entry_Common_Status_value = map[string]int32{
		"STATUS_UNSET": 0,
		"ALLOWED":      1,
		"DENIED":       2,
	}
)

func (x AccessLog_Entry_Common_Status) Enum() *AccessLog_Entry_Common_Status {
	p := new(AccessLog_Entry_Common_Status)
	*p = x
	return p
}

func (x AccessLog_Entry_Common_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Common_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[32].Descriptor()
}

func (AccessLog_Entry_Common_Status) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[32]
}

func (x AccessLog_Entry_Common_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Common_Status.Descriptor instead.
func (AccessLog_Entry_Common_Status) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1, 0}
}

type AccessLog_Entry_Common_Reason_Type int32

const (
	// TYPE_UNKNOWN_REASON is not used
	AccessLog_Entry_Common_Reason_TYPE_UNKNOWN_REASON AccessLog_Entry_Common_Reason_Type = 0
	// SESSION_INVALID means that the Session is invalid (e.g.
	// expired, not active, etc...)
	AccessLog_Entry_Common_Reason_SESSION_INVALID AccessLog_Entry_Common_Reason_Type = 1
	// DEVICE_NOT_ACTIVE means that the Device is not active
	AccessLog_Entry_Common_Reason_DEVICE_NOT_ACTIVE AccessLog_Entry_Common_Reason_Type = 2
	// USER_DEACTIVATED means that the User is deactivated
	AccessLog_Entry_Common_Reason_USER_DEACTIVATED AccessLog_Entry_Common_Reason_Type = 3
	// SCOPE_UNAUTHORIZED means that the request is outside the scopes
	// of the Session
	AccessLog_Entry_Common_Reason_SCOPE_UNAUTHORIZED AccessLog_Entry_Common_Reason_Type = 4
	// POLICY_MATCH means that a Policy matched
	AccessLog_Entry_Common_Reason_POLICY_MATCH AccessLog_Entry_Common_Reason_Type = 5
	// NO_POLICY_MATCH means that no Policy matched
	AccessLog_Entry_Common_Reason_NO_POLICY_MATCH AccessLog_Entry_Common_Reason_Type = 6
	// SESSION_CLIENT_TYPE_INVALID means that the client is using an
	// invalid Session type for this request (e.g. a CLIENTLESS
	// Session for a non publicly exposed Service)
	AccessLog_Entry_Common_Reason_SESSION_CLIENT_TYPE_INVALID AccessLog_Entry_Common_Reason_Type = 7
	// SESSION_LOCKED means that the Session is locked, or
	// basically suspended, by the Cluster
	AccessLog_Entry_Common_Reason_SESSION_LOCKED AccessLog_Entry_Common_Reason_Type = 8
	// USER_LOCKED means that the User is locked, or
	// basically suspended, by the Cluster
	AccessLog_Entry_Common_Reason_USER_LOCKED AccessLog_Entry_Common_Reason_Type = 9
	// DEVICE_LOCKED means that the Device is locked, or
	// basically suspended, by the Cluster
	AccessLog_Entry_Common_Reason_DEVICE_LOCKED AccessLog_Entry_Common_Reason_Type = 10
)

// Enum value maps for AccessLog_Entry_Common_Reason_Type.
var (
	AccessLog_Entry_Common_Reason_Type_name = map[int32]string{
		0:  "TYPE_UNKNOWN_REASON",
		1:  "SESSION_INVALID",
		2:  "DEVICE_NOT_ACTIVE",
		3:  "USER_DEACTIVATED",
		4:  "SCOPE_UNAUTHORIZED",
		5:  "POLICY_MATCH",
		6:  "NO_POLICY_MATCH",
		7:  "SESSION_CLIENT_TYPE_INVALID",
		8:  "SESSION_LOCKED",
		9:  "USER_LOCKED",
		10: "DEVICE_LOCKED",
	}
	AccessLog_Entry_Common_Reason_Type_value = map[string]int32{
		"TYPE_UNKNOWN_REASON":         0,
		"SESSION_INVALID":             1,
		"DEVICE_NOT_ACTIVE":           2,
		"USER_DEACTIVATED":            3,
		"SCOPE_UNAUTHORIZED":          4,
		"POLICY_MATCH":                5,
		"NO_POLICY_MATCH":             6,
		"SESSION_CLIENT_TYPE_INVALID": 7,
		"SESSION_LOCKED":              8,
		"USER_LOCKED":                 9,
		"DEVICE_LOCKED":               10,
	}
)

func (x AccessLog_Entry_Common_Reason_Type) Enum() *AccessLog_Entry_Common_Reason_Type {
	p := new(AccessLog_Entry_Common_Reason_Type)
	*p = x
	return p
}

func (x AccessLog_Entry_Common_Reason_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessLog_Entry_Common_Reason_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[33].Descriptor()
}

func (AccessLog_Entry_Common_Reason_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[33]
}

func (x AccessLog_Entry_Common_Reason_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessLog_Entry_Common_Reason_Type.Descriptor instead.
func (AccessLog_Entry_Common_Reason_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1, 0, 0}
}

type IdentityProvider_Spec_AALRule_AAL int32

const (
	IdentityProvider_Spec_AALRule_AAL_UNSET IdentityProvider_Spec_AALRule_AAL = 0
	IdentityProvider_Spec_AALRule_AAL1      IdentityProvider_Spec_AALRule_AAL = 1
	IdentityProvider_Spec_AALRule_AAL2      IdentityProvider_Spec_AALRule_AAL = 2
	IdentityProvider_Spec_AALRule_AAL3      IdentityProvider_Spec_AALRule_AAL = 3
)

// Enum value maps for IdentityProvider_Spec_AALRule_AAL.
var (
	IdentityProvider_Spec_AALRule_AAL_name = map[int32]string{
		0: "AAL_UNSET",
		1: "AAL1",
		2: "AAL2",
		3: "AAL3",
	}
	IdentityProvider_Spec_AALRule_AAL_value = map[string]int32{
		"AAL_UNSET": 0,
		"AAL1":      1,
		"AAL2":      2,
		"AAL3":      3,
	}
)

func (x IdentityProvider_Spec_AALRule_AAL) Enum() *IdentityProvider_Spec_AALRule_AAL {
	p := new(IdentityProvider_Spec_AALRule_AAL)
	*p = x
	return p
}

func (x IdentityProvider_Spec_AALRule_AAL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityProvider_Spec_AALRule_AAL) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[34].Descriptor()
}

func (IdentityProvider_Spec_AALRule_AAL) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[34]
}

func (x IdentityProvider_Spec_AALRule_AAL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityProvider_Spec_AALRule_AAL.Descriptor instead.
func (IdentityProvider_Spec_AALRule_AAL) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 4, 0}
}

type IdentityProvider_Spec_PostAuthenticationRule_Effect int32

const (
	// EFFECT_UNKNOWN is not used.
	IdentityProvider_Spec_PostAuthenticationRule_EFFECT_UNKNOWN IdentityProvider_Spec_PostAuthenticationRule_Effect = 0
	// ALLOW allows the request.
	IdentityProvider_Spec_PostAuthenticationRule_ALLOW IdentityProvider_Spec_PostAuthenticationRule_Effect = 1
	// DENY denies the request.
	IdentityProvider_Spec_PostAuthenticationRule_DENY IdentityProvider_Spec_PostAuthenticationRule_Effect = 2
)

// Enum value maps for IdentityProvider_Spec_PostAuthenticationRule_Effect.
var (
	IdentityProvider_Spec_PostAuthenticationRule_Effect_name = map[int32]string{
		0: "EFFECT_UNKNOWN",
		1: "ALLOW",
		2: "DENY",
	}
	IdentityProvider_Spec_PostAuthenticationRule_Effect_value = map[string]int32{
		"EFFECT_UNKNOWN": 0,
		"ALLOW":          1,
		"DENY":           2,
	}
)

func (x IdentityProvider_Spec_PostAuthenticationRule_Effect) Enum() *IdentityProvider_Spec_PostAuthenticationRule_Effect {
	p := new(IdentityProvider_Spec_PostAuthenticationRule_Effect)
	*p = x
	return p
}

func (x IdentityProvider_Spec_PostAuthenticationRule_Effect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityProvider_Spec_PostAuthenticationRule_Effect) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[35].Descriptor()
}

func (IdentityProvider_Spec_PostAuthenticationRule_Effect) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[35]
}

func (x IdentityProvider_Spec_PostAuthenticationRule_Effect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityProvider_Spec_PostAuthenticationRule_Effect.Descriptor instead.
func (IdentityProvider_Spec_PostAuthenticationRule_Effect) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 5, 0}
}

type IdentityProvider_Status_Type int32

const (
	IdentityProvider_Status_TYPE_UNKNOWN        IdentityProvider_Status_Type = 0
	IdentityProvider_Status_GITHUB              IdentityProvider_Status_Type = 1
	IdentityProvider_Status_OIDC                IdentityProvider_Status_Type = 2
	IdentityProvider_Status_SAML                IdentityProvider_Status_Type = 3
	IdentityProvider_Status_OIDC_IDENTITY_TOKEN IdentityProvider_Status_Type = 4
)

// Enum value maps for IdentityProvider_Status_Type.
var (
	IdentityProvider_Status_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "GITHUB",
		2: "OIDC",
		3: "SAML",
		4: "OIDC_IDENTITY_TOKEN",
	}
	IdentityProvider_Status_Type_value = map[string]int32{
		"TYPE_UNKNOWN":        0,
		"GITHUB":              1,
		"OIDC":                2,
		"SAML":                3,
		"OIDC_IDENTITY_TOKEN": 4,
	}
)

func (x IdentityProvider_Status_Type) Enum() *IdentityProvider_Status_Type {
	p := new(IdentityProvider_Status_Type)
	*p = x
	return p
}

func (x IdentityProvider_Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityProvider_Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[36].Descriptor()
}

func (IdentityProvider_Status_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[36]
}

func (x IdentityProvider_Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityProvider_Status_Type.Descriptor instead.
func (IdentityProvider_Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 1, 0}
}

type ClusterConfig_Status_NetworkConfig_Mode int32

const (
	// MODE_DEFAULT defaults to DUAL_STACK
	ClusterConfig_Status_NetworkConfig_MODE_DEFAULT ClusterConfig_Status_NetworkConfig_Mode = 0
	// DUAL_STACK sets the Cluster to operate in dual-stack mode.
	// Services receive dual-stack private addresses and clients can connect
	// in dual-stack mode, IPv4-only or IPv6-only modes.
	ClusterConfig_Status_NetworkConfig_DUAL_STACK ClusterConfig_Status_NetworkConfig_Mode = 1
	// V6_ONLY sets the Cluster to operate in IPv6-only mode.
	// Services receive IPv6-only private addresses and clients can connect
	// only connect via IPv6-only modes.
	ClusterConfig_Status_NetworkConfig_V6_ONLY ClusterConfig_Status_NetworkConfig_Mode = 2
	// V4_ONLY sets the Cluster to operate in IPv4-only mode.
	// Services receive IPv4-only private addresses and clients can connect
	// only connect via IPv4-only modes.
	ClusterConfig_Status_NetworkConfig_V4_ONLY ClusterConfig_Status_NetworkConfig_Mode = 3
)

// Enum value maps for ClusterConfig_Status_NetworkConfig_Mode.
var (
	ClusterConfig_Status_NetworkConfig_Mode_name = map[int32]string{
		0: "MODE_DEFAULT",
		1: "DUAL_STACK",
		2: "V6_ONLY",
		3: "V4_ONLY",
	}
	ClusterConfig_Status_NetworkConfig_Mode_value = map[string]int32{
		"MODE_DEFAULT": 0,
		"DUAL_STACK":   1,
		"V6_ONLY":      2,
		"V4_ONLY":      3,
	}
)

func (x ClusterConfig_Status_NetworkConfig_Mode) Enum() *ClusterConfig_Status_NetworkConfig_Mode {
	p := new(ClusterConfig_Status_NetworkConfig_Mode)
	*p = x
	return p
}

func (x ClusterConfig_Status_NetworkConfig_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClusterConfig_Status_NetworkConfig_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[37].Descriptor()
}

func (ClusterConfig_Status_NetworkConfig_Mode) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[37]
}

func (x ClusterConfig_Status_NetworkConfig_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClusterConfig_Status_NetworkConfig_Mode.Descriptor instead.
func (ClusterConfig_Status_NetworkConfig_Mode) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 0, 0}
}

type ComponentLog_Entry_Level int32

const (
	ComponentLog_Entry_LEVEL_UNSET ComponentLog_Entry_Level = 0
	ComponentLog_Entry_DEBUG       ComponentLog_Entry_Level = 1
	ComponentLog_Entry_INFO        ComponentLog_Entry_Level = 2
	ComponentLog_Entry_WARN        ComponentLog_Entry_Level = 3
	ComponentLog_Entry_ERROR       ComponentLog_Entry_Level = 4
	ComponentLog_Entry_PANIC       ComponentLog_Entry_Level = 5
	ComponentLog_Entry_FATAL       ComponentLog_Entry_Level = 6
)

// Enum value maps for ComponentLog_Entry_Level.
var (
	ComponentLog_Entry_Level_name = map[int32]string{
		0: "LEVEL_UNSET",
		1: "DEBUG",
		2: "INFO",
		3: "WARN",
		4: "ERROR",
		5: "PANIC",
		6: "FATAL",
	}
	ComponentLog_Entry_Level_value = map[string]int32{
		"LEVEL_UNSET": 0,
		"DEBUG":       1,
		"INFO":        2,
		"WARN":        3,
		"ERROR":       4,
		"PANIC":       5,
		"FATAL":       6,
	}
)

func (x ComponentLog_Entry_Level) Enum() *ComponentLog_Entry_Level {
	p := new(ComponentLog_Entry_Level)
	*p = x
	return p
}

func (x ComponentLog_Entry_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComponentLog_Entry_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[38].Descriptor()
}

func (ComponentLog_Entry_Level) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[38]
}

func (x ComponentLog_Entry_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComponentLog_Entry_Level.Descriptor instead.
func (ComponentLog_Entry_Level) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{49, 0, 0}
}

type Authenticator_Status_Type int32

const (
	Authenticator_Status_TYPE_UNKNOWN Authenticator_Status_Type = 0
	Authenticator_Status_FIDO         Authenticator_Status_Type = 1
	Authenticator_Status_TOTP         Authenticator_Status_Type = 2
	Authenticator_Status_TPM          Authenticator_Status_Type = 3
)

// Enum value maps for Authenticator_Status_Type.
var (
	Authenticator_Status_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "FIDO",
		2: "TOTP",
		3: "TPM",
	}
	Authenticator_Status_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"FIDO":         1,
		"TOTP":         2,
		"TPM":          3,
	}
)

func (x Authenticator_Status_Type) Enum() *Authenticator_Status_Type {
	p := new(Authenticator_Status_Type)
	*p = x
	return p
}

func (x Authenticator_Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authenticator_Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[39].Descriptor()
}

func (Authenticator_Status_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[39]
}

func (x Authenticator_Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authenticator_Status_Type.Descriptor instead.
func (Authenticator_Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 0}
}

type Authenticator_Status_Info_FIDO_Type int32

const (
	Authenticator_Status_Info_FIDO_TYPE_UNKNOWN Authenticator_Status_Info_FIDO_Type = 0
	Authenticator_Status_Info_FIDO_ROAMING      Authenticator_Status_Info_FIDO_Type = 1
	Authenticator_Status_Info_FIDO_PLATFORM     Authenticator_Status_Info_FIDO_Type = 2
)

// Enum value maps for Authenticator_Status_Info_FIDO_Type.
var (
	Authenticator_Status_Info_FIDO_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "ROAMING",
		2: "PLATFORM",
	}
	Authenticator_Status_Info_FIDO_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"ROAMING":      1,
		"PLATFORM":     2,
	}
)

func (x Authenticator_Status_Info_FIDO_Type) Enum() *Authenticator_Status_Info_FIDO_Type {
	p := new(Authenticator_Status_Info_FIDO_Type)
	*p = x
	return p
}

func (x Authenticator_Status_Info_FIDO_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authenticator_Status_Info_FIDO_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_corev1_proto_enumTypes[40].Descriptor()
}

func (Authenticator_Status_Info_FIDO_Type) Type() protoreflect.EnumType {
	return &file_corev1_proto_enumTypes[40]
}

func (x Authenticator_Status_Info_FIDO_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authenticator_Status_Info_FIDO_Type.Descriptor instead.
func (Authenticator_Status_Info_FIDO_Type) EnumDescriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 1, 0, 0}
}

type Namespace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Namespace`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Namespace specification.
	Spec *Namespace_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Namespace.
	Status        *Namespace_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	mi := &file_corev1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{0}
}

func (x *Namespace) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Namespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Namespace) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Namespace) GetSpec() *Namespace_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Namespace) GetStatus() *Namespace_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type NamespaceList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `NamespaceList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Namespaces
	Items []*Namespace `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NamespaceList) Reset() {
	*x = NamespaceList{}
	mi := &file_corev1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceList) ProtoMessage() {}

func (x *NamespaceList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceList.ProtoReflect.Descriptor instead.
func (*NamespaceList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{1}
}

func (x *NamespaceList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *NamespaceList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NamespaceList) GetItems() []*Namespace {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *NamespaceList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type InlinePolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the inline Policy
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Spec is the Policy spec
	Spec          *Policy_Spec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InlinePolicy) Reset() {
	*x = InlinePolicy{}
	mi := &file_corev1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InlinePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlinePolicy) ProtoMessage() {}

func (x *InlinePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlinePolicy.ProtoReflect.Descriptor instead.
func (*InlinePolicy) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{2}
}

func (x *InlinePolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InlinePolicy) GetSpec() *Policy_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type User struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `User`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the User specification.
	Spec *User_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the User.
	Status        *User_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_corev1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *User) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *User) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *User) GetSpec() *User_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *User) GetStatus() *User_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type UserList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `UserList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Users.
	Items []*User `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserList) Reset() {
	*x = UserList{}
	mi := &file_corev1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserList) ProtoMessage() {}

func (x *UserList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserList.ProtoReflect.Descriptor instead.
func (*UserList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{4}
}

func (x *UserList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *UserList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *UserList) GetItems() []*User {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *UserList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Service struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Service`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Service specification.
	Spec *Service_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Service.
	Status        *Service_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_corev1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5}
}

func (x *Service) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Service) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Service) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Service) GetSpec() *Service_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Service) GetStatus() *Service_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ServiceList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `ServiceList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Services.
	Items []*Service `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ServiceList) Reset() {
	*x = ServiceList{}
	mi := &file_corev1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceList) ProtoMessage() {}

func (x *ServiceList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceList.ProtoReflect.Descriptor instead.
func (*ServiceList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ServiceList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ServiceList) GetItems() []*Service {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ServiceList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type GenerateCredentialTokenRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	CredentialRef *metav1.ObjectReference `protobuf:"bytes,1,opt,name=credentialRef,proto3" json:"credentialRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateCredentialTokenRequest) Reset() {
	*x = GenerateCredentialTokenRequest{}
	mi := &file_corev1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateCredentialTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateCredentialTokenRequest) ProtoMessage() {}

func (x *GenerateCredentialTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateCredentialTokenRequest.ProtoReflect.Descriptor instead.
func (*GenerateCredentialTokenRequest) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateCredentialTokenRequest) GetCredentialRef() *metav1.ObjectReference {
	if x != nil {
		return x.CredentialRef
	}
	return nil
}

type CredentialToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*CredentialToken_AuthenticationToken_
	//	*CredentialToken_Oauth2Credentials
	//	*CredentialToken_AccessToken_
	Type          isCredentialToken_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialToken) Reset() {
	*x = CredentialToken{}
	mi := &file_corev1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialToken) ProtoMessage() {}

func (x *CredentialToken) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialToken.ProtoReflect.Descriptor instead.
func (*CredentialToken) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{8}
}

func (x *CredentialToken) GetType() isCredentialToken_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CredentialToken) GetAuthenticationToken() *CredentialToken_AuthenticationToken {
	if x != nil {
		if x, ok := x.Type.(*CredentialToken_AuthenticationToken_); ok {
			return x.AuthenticationToken
		}
	}
	return nil
}

func (x *CredentialToken) GetOauth2Credentials() *CredentialToken_OAuth2Credentials {
	if x != nil {
		if x, ok := x.Type.(*CredentialToken_Oauth2Credentials); ok {
			return x.Oauth2Credentials
		}
	}
	return nil
}

func (x *CredentialToken) GetAccessToken() *CredentialToken_AccessToken {
	if x != nil {
		if x, ok := x.Type.(*CredentialToken_AccessToken_); ok {
			return x.AccessToken
		}
	}
	return nil
}

type isCredentialToken_Type interface {
	isCredentialToken_Type()
}

type CredentialToken_AuthenticationToken_ struct {
	// AuthenticationToken is the returned authentication token
	AuthenticationToken *CredentialToken_AuthenticationToken `protobuf:"bytes,1,opt,name=authenticationToken,proto3,oneof"`
}

type CredentialToken_Oauth2Credentials struct {
	// OAuth2Credentials is the returned OAuth2 client credential
	Oauth2Credentials *CredentialToken_OAuth2Credentials `protobuf:"bytes,2,opt,name=oauth2Credentials,proto3,oneof"`
}

type CredentialToken_AccessToken_ struct {
	// AccessToken is the returned access token
	AccessToken *CredentialToken_AccessToken `protobuf:"bytes,3,opt,name=accessToken,proto3,oneof"`
}

func (*CredentialToken_AuthenticationToken_) isCredentialToken_Type() {}

func (*CredentialToken_Oauth2Credentials) isCredentialToken_Type() {}

func (*CredentialToken_AccessToken_) isCredentialToken_Type() {}

type Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Session`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Session specification.
	Spec *Session_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Session.
	Status        *Session_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_corev1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9}
}

func (x *Session) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Session) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Session) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Session) GetSpec() *Session_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Session) GetStatus() *Session_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type SessionList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `SessionList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Sessions.
	Items []*Session `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SessionList) Reset() {
	*x = SessionList{}
	mi := &file_corev1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionList) ProtoMessage() {}

func (x *SessionList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionList.ProtoReflect.Descriptor instead.
func (*SessionList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{10}
}

func (x *SessionList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *SessionList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SessionList) GetItems() []*Session {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SessionList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Secret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Secret`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Secret specification.
	Spec *Secret_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Secret.
	Status *Secret_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Data is the Secret's actual secret data content.
	Data          *Secret_Data `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secret) Reset() {
	*x = Secret{}
	mi := &file_corev1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{11}
}

func (x *Secret) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Secret) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Secret) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Secret) GetSpec() *Secret_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Secret) GetStatus() *Secret_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Secret) GetData() *Secret_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type SecretList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `SecretList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Secrets.
	Items []*Secret `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SecretList) Reset() {
	*x = SecretList{}
	mi := &file_corev1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretList) ProtoMessage() {}

func (x *SecretList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretList.ProtoReflect.Descriptor instead.
func (*SecretList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{12}
}

func (x *SecretList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *SecretList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SecretList) GetItems() []*Secret {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SecretList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Credential struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Credential`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Credential specification.
	Spec *Credential_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Credential.
	Status        *Credential_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_corev1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{13}
}

func (x *Credential) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Credential) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Credential) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Credential) GetSpec() *Credential_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Credential) GetStatus() *Credential_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type CredentialList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `CredentialList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Credentials.
	Items []*Credential `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CredentialList) Reset() {
	*x = CredentialList{}
	mi := &file_corev1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialList) ProtoMessage() {}

func (x *CredentialList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialList.ProtoReflect.Descriptor instead.
func (*CredentialList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{14}
}

func (x *CredentialList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *CredentialList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CredentialList) GetItems() []*Credential {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CredentialList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Group struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Group`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Group specification.
	Spec *Group_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Group.
	Status        *Group_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Group) Reset() {
	*x = Group{}
	mi := &file_corev1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{15}
}

func (x *Group) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Group) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Group) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Group) GetSpec() *Group_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Group) GetStatus() *Group_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GroupList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `GroupList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Groups.
	Items []*Group `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GroupList) Reset() {
	*x = GroupList{}
	mi := &file_corev1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupList) ProtoMessage() {}

func (x *GroupList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupList.ProtoReflect.Descriptor instead.
func (*GroupList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{16}
}

func (x *GroupList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *GroupList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GroupList) GetItems() []*Group {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GroupList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Device`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Device specification.
	Spec *Device_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Device.
	Status        *Device_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_corev1_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{17}
}

func (x *Device) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Device) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Device) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Device) GetSpec() *Device_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Device) GetStatus() *Device_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type DeviceList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `DeviceList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Devices.
	Items []*Device `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeviceList) Reset() {
	*x = DeviceList{}
	mi := &file_corev1_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceList) ProtoMessage() {}

func (x *DeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceList.ProtoReflect.Descriptor instead.
func (*DeviceList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{18}
}

func (x *DeviceList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *DeviceList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DeviceList) GetItems() []*Device {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DeviceList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ListUserOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserOptions) Reset() {
	*x = ListUserOptions{}
	mi := &file_corev1_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserOptions) ProtoMessage() {}

func (x *ListUserOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserOptions.ProtoReflect.Descriptor instead.
func (*ListUserOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{19}
}

func (x *ListUserOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type ListNamespaceOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespaceOptions) Reset() {
	*x = ListNamespaceOptions{}
	mi := &file_corev1_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespaceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceOptions) ProtoMessage() {}

func (x *ListNamespaceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceOptions.ProtoReflect.Descriptor instead.
func (*ListNamespaceOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{20}
}

func (x *ListNamespaceOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type ListServiceOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	NamespaceRef  *metav1.ObjectReference   `protobuf:"bytes,2,opt,name=namespaceRef,proto3" json:"namespaceRef,omitempty"`
	RegionRef     *metav1.ObjectReference   `protobuf:"bytes,3,opt,name=regionRef,proto3" json:"regionRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServiceOptions) Reset() {
	*x = ListServiceOptions{}
	mi := &file_corev1_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceOptions) ProtoMessage() {}

func (x *ListServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceOptions.ProtoReflect.Descriptor instead.
func (*ListServiceOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{21}
}

func (x *ListServiceOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ListServiceOptions) GetNamespaceRef() *metav1.ObjectReference {
	if x != nil {
		return x.NamespaceRef
	}
	return nil
}

func (x *ListServiceOptions) GetRegionRef() *metav1.ObjectReference {
	if x != nil {
		return x.RegionRef
	}
	return nil
}

type ListSessionOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	UserRef       *metav1.ObjectReference   `protobuf:"bytes,2,opt,name=userRef,proto3" json:"userRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSessionOptions) Reset() {
	*x = ListSessionOptions{}
	mi := &file_corev1_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSessionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSessionOptions) ProtoMessage() {}

func (x *ListSessionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSessionOptions.ProtoReflect.Descriptor instead.
func (*ListSessionOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{22}
}

func (x *ListSessionOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ListSessionOptions) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

type ListSecretOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSecretOptions) Reset() {
	*x = ListSecretOptions{}
	mi := &file_corev1_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSecretOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSecretOptions) ProtoMessage() {}

func (x *ListSecretOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSecretOptions.ProtoReflect.Descriptor instead.
func (*ListSecretOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{23}
}

func (x *ListSecretOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type ListCredentialOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	UserRef       *metav1.ObjectReference   `protobuf:"bytes,2,opt,name=userRef,proto3" json:"userRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCredentialOptions) Reset() {
	*x = ListCredentialOptions{}
	mi := &file_corev1_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCredentialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCredentialOptions) ProtoMessage() {}

func (x *ListCredentialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCredentialOptions.ProtoReflect.Descriptor instead.
func (*ListCredentialOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{24}
}

func (x *ListCredentialOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ListCredentialOptions) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

type ListGroupOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGroupOptions) Reset() {
	*x = ListGroupOptions{}
	mi := &file_corev1_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGroupOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupOptions) ProtoMessage() {}

func (x *ListGroupOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupOptions.ProtoReflect.Descriptor instead.
func (*ListGroupOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{25}
}

func (x *ListGroupOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type ListDeviceOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	UserRef       *metav1.ObjectReference   `protobuf:"bytes,2,opt,name=userRef,proto3" json:"userRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDeviceOptions) Reset() {
	*x = ListDeviceOptions{}
	mi := &file_corev1_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDeviceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceOptions) ProtoMessage() {}

func (x *ListDeviceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceOptions.ProtoReflect.Descriptor instead.
func (*ListDeviceOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{26}
}

func (x *ListDeviceOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ListDeviceOptions) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion    string           `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind          string           `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata      *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *Config_Spec     `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *Config_Status   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Data          *Config_Data     `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_corev1_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{27}
}

func (x *Config) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Config) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Config) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Config) GetSpec() *Config_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Config) GetStatus() *Config_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Config) GetData() *Config_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `DeviceList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Devices.
	Items []*Config `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConfigList) Reset() {
	*x = ConfigList{}
	mi := &file_corev1_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigList) ProtoMessage() {}

func (x *ConfigList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigList.ProtoReflect.Descriptor instead.
func (*ConfigList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{28}
}

func (x *ConfigList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ConfigList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ConfigList) GetItems() []*Config {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ConfigList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Scope struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Scope_Service_
	//	*Scope_Api
	Type          isScope_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope) Reset() {
	*x = Scope{}
	mi := &file_corev1_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope) ProtoMessage() {}

func (x *Scope) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope.ProtoReflect.Descriptor instead.
func (*Scope) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{29}
}

func (x *Scope) GetType() isScope_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Scope) GetService() *Scope_Service {
	if x != nil {
		if x, ok := x.Type.(*Scope_Service_); ok {
			return x.Service
		}
	}
	return nil
}

func (x *Scope) GetApi() *Scope_API {
	if x != nil {
		if x, ok := x.Type.(*Scope_Api); ok {
			return x.Api
		}
	}
	return nil
}

type isScope_Type interface {
	isScope_Type()
}

type Scope_Service_ struct {
	// Service means that this is a Service scope
	Service *Scope_Service `protobuf:"bytes,1,opt,name=service,proto3,oneof"`
}

type Scope_Api struct {
	// API means that this is an API scope
	Api *Scope_API `protobuf:"bytes,2,opt,name=api,proto3,oneof"`
}

func (*Scope_Service_) isScope_Type() {}

func (*Scope_Api) isScope_Type() {}

type Policy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Policy`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Policy specification.
	Spec *Policy_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Policy.
	Status        *Policy_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_corev1_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{30}
}

func (x *Policy) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Policy) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Policy) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Policy) GetSpec() *Policy_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Policy) GetStatus() *Policy_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type PolicyList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `PolicyList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Policies.
	Items []*Policy `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PolicyList) Reset() {
	*x = PolicyList{}
	mi := &file_corev1_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyList) ProtoMessage() {}

func (x *PolicyList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyList.ProtoReflect.Descriptor instead.
func (*PolicyList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{31}
}

func (x *PolicyList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *PolicyList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PolicyList) GetItems() []*Policy {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PolicyList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ListPolicyOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPolicyOptions) Reset() {
	*x = ListPolicyOptions{}
	mi := &file_corev1_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPolicyOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyOptions) ProtoMessage() {}

func (x *ListPolicyOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyOptions.ProtoReflect.Descriptor instead.
func (*ListPolicyOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{32}
}

func (x *ListPolicyOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type AccessLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the kind (i.e. "AccessLog")
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Metadata is the metadata
	Metadata *metav1.LogMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Entry is the Log entry information
	Entry         *AccessLog_Entry `protobuf:"bytes,4,opt,name=entry,proto3" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog) Reset() {
	*x = AccessLog{}
	mi := &file_corev1_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog) ProtoMessage() {}

func (x *AccessLog) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog.ProtoReflect.Descriptor instead.
func (*AccessLog) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33}
}

func (x *AccessLog) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *AccessLog) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AccessLog) GetMetadata() *metav1.LogMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AccessLog) GetEntry() *AccessLog_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type ListIdentityProviderOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIdentityProviderOptions) Reset() {
	*x = ListIdentityProviderOptions{}
	mi := &file_corev1_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIdentityProviderOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIdentityProviderOptions) ProtoMessage() {}

func (x *ListIdentityProviderOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIdentityProviderOptions.ProtoReflect.Descriptor instead.
func (*ListIdentityProviderOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{34}
}

func (x *ListIdentityProviderOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type IdentityProvider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `User`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the User specification.
	Spec *IdentityProvider_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the User.
	Status        *IdentityProvider_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider) Reset() {
	*x = IdentityProvider{}
	mi := &file_corev1_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider) ProtoMessage() {}

func (x *IdentityProvider) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider.ProtoReflect.Descriptor instead.
func (*IdentityProvider) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35}
}

func (x *IdentityProvider) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *IdentityProvider) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *IdentityProvider) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IdentityProvider) GetSpec() *IdentityProvider_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *IdentityProvider) GetStatus() *IdentityProvider_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type IdentityProviderList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `IdentityProviderList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of IdentityProvider items.
	Items []*IdentityProvider `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IdentityProviderList) Reset() {
	*x = IdentityProviderList{}
	mi := &file_corev1_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProviderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProviderList) ProtoMessage() {}

func (x *IdentityProviderList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProviderList.ProtoReflect.Descriptor instead.
func (*IdentityProviderList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{36}
}

func (x *IdentityProviderList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *IdentityProviderList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *IdentityProviderList) GetItems() []*IdentityProvider {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *IdentityProviderList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Region struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion    string           `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind          string           `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata      *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *Region_Spec     `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *Region_Status   `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Region) Reset() {
	*x = Region{}
	mi := &file_corev1_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region) ProtoMessage() {}

func (x *Region) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region.ProtoReflect.Descriptor instead.
func (*Region) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{37}
}

func (x *Region) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Region) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Region) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Region) GetSpec() *Region_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Region) GetStatus() *Region_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RegionList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string    `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string    `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Items      []*Region `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RegionList) Reset() {
	*x = RegionList{}
	mi := &file_corev1_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegionList) ProtoMessage() {}

func (x *RegionList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegionList.ProtoReflect.Descriptor instead.
func (*RegionList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{38}
}

func (x *RegionList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *RegionList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RegionList) GetItems() []*Region {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RegionList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type Gateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Gateway`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Gateway specification.
	Spec *Gateway_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Gateway.
	Status        *Gateway_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	mi := &file_corev1_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{39}
}

func (x *Gateway) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Gateway) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Gateway) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Gateway) GetSpec() *Gateway_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Gateway) GetStatus() *Gateway_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GatewayList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `GatewayList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Gateways.
	Items []*Gateway `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GatewayList) Reset() {
	*x = GatewayList{}
	mi := &file_corev1_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GatewayList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayList) ProtoMessage() {}

func (x *GatewayList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayList.ProtoReflect.Descriptor instead.
func (*GatewayList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{40}
}

func (x *GatewayList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *GatewayList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *GatewayList) GetItems() []*Gateway {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GatewayList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ListGatewayOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	RegionRef     *metav1.ObjectReference   `protobuf:"bytes,2,opt,name=regionRef,proto3" json:"regionRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListGatewayOptions) Reset() {
	*x = ListGatewayOptions{}
	mi := &file_corev1_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListGatewayOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGatewayOptions) ProtoMessage() {}

func (x *ListGatewayOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGatewayOptions.ProtoReflect.Descriptor instead.
func (*ListGatewayOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{41}
}

func (x *ListGatewayOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ListGatewayOptions) GetRegionRef() *metav1.ObjectReference {
	if x != nil {
		return x.RegionRef
	}
	return nil
}

type ListRegionOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRegionOptions) Reset() {
	*x = ListRegionOptions{}
	mi := &file_corev1_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRegionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionOptions) ProtoMessage() {}

func (x *ListRegionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionOptions.ProtoReflect.Descriptor instead.
func (*ListRegionOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{42}
}

func (x *ListRegionOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type Condition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Condition_MatchAny
	//	*Condition_Match
	//	*Condition_All_
	//	*Condition_Any_
	//	*Condition_Not
	//	*Condition_None_
	//	*Condition_Opa
	Type          isCondition_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_corev1_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{43}
}

func (x *Condition) GetType() isCondition_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Condition) GetMatchAny() bool {
	if x != nil {
		if x, ok := x.Type.(*Condition_MatchAny); ok {
			return x.MatchAny
		}
	}
	return false
}

func (x *Condition) GetMatch() string {
	if x != nil {
		if x, ok := x.Type.(*Condition_Match); ok {
			return x.Match
		}
	}
	return ""
}

func (x *Condition) GetAll() *Condition_All {
	if x != nil {
		if x, ok := x.Type.(*Condition_All_); ok {
			return x.All
		}
	}
	return nil
}

func (x *Condition) GetAny() *Condition_Any {
	if x != nil {
		if x, ok := x.Type.(*Condition_Any_); ok {
			return x.Any
		}
	}
	return nil
}

func (x *Condition) GetNot() string {
	if x != nil {
		if x, ok := x.Type.(*Condition_Not); ok {
			return x.Not
		}
	}
	return ""
}

func (x *Condition) GetNone() *Condition_None {
	if x != nil {
		if x, ok := x.Type.(*Condition_None_); ok {
			return x.None
		}
	}
	return nil
}

func (x *Condition) GetOpa() *Condition_OPA {
	if x != nil {
		if x, ok := x.Type.(*Condition_Opa); ok {
			return x.Opa
		}
	}
	return nil
}

type isCondition_Type interface {
	isCondition_Type()
}

type Condition_MatchAny struct {
	// MatchAny matches anything
	MatchAny bool `protobuf:"varint,1,opt,name=matchAny,proto3,oneof"`
}

type Condition_Match struct {
	// Match contains a single CEL expression
	Match string `protobuf:"bytes,2,opt,name=match,proto3,oneof"`
}

type Condition_All_ struct {
	// All acts as a logical AND operator on its list of CEL expressions
	All *Condition_All `protobuf:"bytes,3,opt,name=all,proto3,oneof"`
}

type Condition_Any_ struct {
	// Any acts as a logical OR operator on its list of CEL expressions
	Any *Condition_Any `protobuf:"bytes,4,opt,name=any,proto3,oneof"`
}

type Condition_Not struct {
	// Not acts as a logical NOT operator of a single CEL expression
	Not string `protobuf:"bytes,5,opt,name=not,proto3,oneof"`
}

type Condition_None_ struct {
	// None acts as a logical NOR operator on its list of CEL expressions (i.e.
	// none of the expressions matches)
	None *Condition_None `protobuf:"bytes,6,opt,name=none,proto3,oneof"`
}

type Condition_Opa struct {
	// OPA contains an OPA (Open Policy Agent) Rego script
	Opa *Condition_OPA `protobuf:"bytes,7,opt,name=opa,proto3,oneof"`
}

func (*Condition_MatchAny) isCondition_Type() {}

func (*Condition_Match) isCondition_Type() {}

func (*Condition_All_) isCondition_Type() {}

func (*Condition_Any_) isCondition_Type() {}

func (*Condition_Not) isCondition_Type() {}

func (*Condition_None_) isCondition_Type() {}

func (*Condition_Opa) isCondition_Type() {}

type GetClusterConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterConfigRequest) Reset() {
	*x = GetClusterConfigRequest{}
	mi := &file_corev1_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigRequest) ProtoMessage() {}

func (x *GetClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*GetClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{44}
}

type ClusterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion    string                `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind          string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata      *metav1.Metadata      `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *ClusterConfig_Spec   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *ClusterConfig_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	mi := &file_corev1_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45}
}

func (x *ClusterConfig) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ClusterConfig) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClusterConfig) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClusterConfig) GetSpec() *ClusterConfig_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ClusterConfig) GetStatus() *ClusterConfig_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type RequestContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request is the request details.
	Request *RequestContext_Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Session is the User's Session.
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	// User is the requesting User.
	User *User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Groups is the list of the User's Groups.
	Groups []*Group `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	// Device is the User's Device.
	Device *Device `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	// Service is the intended Service.
	Service *Service `protobuf:"bytes,6,opt,name=service,proto3" json:"service,omitempty"`
	// Namespace is the Service's Namespace
	Namespace     *Namespace `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext) Reset() {
	*x = RequestContext{}
	mi := &file_corev1_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext) ProtoMessage() {}

func (x *RequestContext) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext.ProtoReflect.Descriptor instead.
func (*RequestContext) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46}
}

func (x *RequestContext) GetRequest() *RequestContext_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RequestContext) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *RequestContext) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RequestContext) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *RequestContext) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *RequestContext) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *RequestContext) GetNamespace() *Namespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type PolicyTrigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `PolicyTrigger`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the PolicyTrigger specification.
	Spec *PolicyTrigger_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the PolicyTrigger.
	Status        *PolicyTrigger_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTrigger) Reset() {
	*x = PolicyTrigger{}
	mi := &file_corev1_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTrigger) ProtoMessage() {}

func (x *PolicyTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTrigger.ProtoReflect.Descriptor instead.
func (*PolicyTrigger) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{47}
}

func (x *PolicyTrigger) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *PolicyTrigger) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PolicyTrigger) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PolicyTrigger) GetSpec() *PolicyTrigger_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *PolicyTrigger) GetStatus() *PolicyTrigger_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type PolicyTriggerList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `PolicyTriggerList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of PolicyTriggers
	Items []*PolicyTrigger `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PolicyTriggerList) Reset() {
	*x = PolicyTriggerList{}
	mi := &file_corev1_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTriggerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTriggerList) ProtoMessage() {}

func (x *PolicyTriggerList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTriggerList.ProtoReflect.Descriptor instead.
func (*PolicyTriggerList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{48}
}

func (x *PolicyTriggerList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *PolicyTriggerList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PolicyTriggerList) GetItems() []*PolicyTrigger {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *PolicyTriggerList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ComponentLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the kind (i.e. "ComponentLog")
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Metadata is the metadata
	Metadata *metav1.LogMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Entry is the Log entry information
	Entry         *ComponentLog_Entry `protobuf:"bytes,4,opt,name=entry,proto3" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentLog) Reset() {
	*x = ComponentLog{}
	mi := &file_corev1_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentLog) ProtoMessage() {}

func (x *ComponentLog) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentLog.ProtoReflect.Descriptor instead.
func (*ComponentLog) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{49}
}

func (x *ComponentLog) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ComponentLog) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ComponentLog) GetMetadata() *metav1.LogMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ComponentLog) GetEntry() *ComponentLog_Entry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type Authenticator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Group`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Group specification.
	Spec *Authenticator_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Group.
	Status        *Authenticator_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator) Reset() {
	*x = Authenticator{}
	mi := &file_corev1_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator) ProtoMessage() {}

func (x *Authenticator) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator.ProtoReflect.Descriptor instead.
func (*Authenticator) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50}
}

func (x *Authenticator) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Authenticator) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Authenticator) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Authenticator) GetSpec() *Authenticator_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Authenticator) GetStatus() *Authenticator_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AuthenticatorList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version (i.e. "core/v1")
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `GroupList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Groups.
	Items []*Authenticator `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuthenticatorList) Reset() {
	*x = AuthenticatorList{}
	mi := &file_corev1_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticatorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorList) ProtoMessage() {}

func (x *AuthenticatorList) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorList.ProtoReflect.Descriptor instead.
func (*AuthenticatorList) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{51}
}

func (x *AuthenticatorList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *AuthenticatorList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AuthenticatorList) GetItems() []*Authenticator {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AuthenticatorList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ListAuthenticatorOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuthenticatorOptions) Reset() {
	*x = ListAuthenticatorOptions{}
	mi := &file_corev1_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthenticatorOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthenticatorOptions) ProtoMessage() {}

func (x *ListAuthenticatorOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthenticatorOptions.ProtoReflect.Descriptor instead.
func (*ListAuthenticatorOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{52}
}

func (x *ListAuthenticatorOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type Namespace_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Authorization sets the authorization-related configuration
	Authorization *Namespace_Spec_Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// Attrs is a map user-defined attributes, mostly used in authorization
	// rules. It is strongly recommended to stick to camelCase in order to be
	// conformant with Octelium's API naming conventions.
	Attrs         *structpb.Struct `protobuf:"bytes,2,opt,name=attrs,proto3" json:"attrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace_Spec) Reset() {
	*x = Namespace_Spec{}
	mi := &file_corev1_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace_Spec) ProtoMessage() {}

func (x *Namespace_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace_Spec.ProtoReflect.Descriptor instead.
func (*Namespace_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Namespace_Spec) GetAuthorization() *Namespace_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Namespace_Spec) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type Namespace_Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace_Status) Reset() {
	*x = Namespace_Status{}
	mi := &file_corev1_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace_Status) ProtoMessage() {}

func (x *Namespace_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace_Status.ProtoReflect.Descriptor instead.
func (*Namespace_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{0, 1}
}

type Namespace_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Namespace_Spec_Authorization) Reset() {
	*x = Namespace_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace_Spec_Authorization) ProtoMessage() {}

func (x *Namespace_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*Namespace_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Namespace_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Namespace_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type User_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Groups is the list of Group names that this User belongs to. You must not
	// add the `root` Group as it's only used by the `root` User or the `all`
	// Group as it's already added by the Cluster automatically.
	Groups []string `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	// Email sets the default e-mail for the User. It is used for User
	// authentication if the IdentityProvider returns the email value in the
	// authentication information (e.g. OIDC identity tokens, SAML 2.0
	// assertions or GitHub OAuth2). The e-mail is used as a fallback
	// authentication method if there are no User identity that matches in the
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Type is the User's type. It can either be HUMAN or WORKLOAD
	Type User_Spec_Type `protobuf:"varint,3,opt,name=type,proto3,enum=octelium.api.main.core.v1.User_Spec_Type" json:"type,omitempty"`
	// Info is the User information. Only used for HUMAN Users currently.
	Info *User_Spec_Info `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	// Session sets the Session-related options.
	Session *User_Spec_Session `protobuf:"bytes,5,opt,name=session,proto3" json:"session,omitempty"`
	// Authorization sets the authorization-related configuration
	Authorization *User_Spec_Authorization `protobuf:"bytes,6,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// isDisabled de-activates/disables the User. Once disabled, the User
	// cannot interact with the Cluster or access its Services until this field
	// is set to false again.
	IsDisabled     bool                      `protobuf:"varint,7,opt,name=isDisabled,proto3" json:"isDisabled,omitempty"`
	Attrs          *structpb.Struct          `protobuf:"bytes,8,opt,name=attrs,proto3" json:"attrs,omitempty"`
	Authentication *User_Spec_Authentication `protobuf:"bytes,9,opt,name=authentication,proto3" json:"authentication,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *User_Spec) Reset() {
	*x = User_Spec{}
	mi := &file_corev1_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Spec) ProtoMessage() {}

func (x *User_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Spec.ProtoReflect.Descriptor instead.
func (*User_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 0}
}

func (x *User_Spec) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *User_Spec) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User_Spec) GetType() User_Spec_Type {
	if x != nil {
		return x.Type
	}
	return User_Spec_TYPE_UNKNOWN
}

func (x *User_Spec) GetInfo() *User_Spec_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *User_Spec) GetSession() *User_Spec_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *User_Spec) GetAuthorization() *User_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *User_Spec) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *User_Spec) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *User_Spec) GetAuthentication() *User_Spec_Authentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

type User_Status struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	Ext                 map[string]*structpb.Struct `protobuf:"bytes,1,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IdentityProviderRef *metav1.ObjectReference     `protobuf:"bytes,2,opt,name=identityProviderRef,proto3" json:"identityProviderRef,omitempty"`
	IsLocked            bool                        `protobuf:"varint,3,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *User_Status) Reset() {
	*x = User_Status{}
	mi := &file_corev1_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Status) ProtoMessage() {}

func (x *User_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Status.ProtoReflect.Descriptor instead.
func (*User_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 1}
}

func (x *User_Status) GetExt() map[string]*structpb.Struct {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *User_Status) GetIdentityProviderRef() *metav1.ObjectReference {
	if x != nil {
		return x.IdentityProviderRef
	}
	return nil
}

func (x *User_Status) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

type User_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *User_Spec_Authorization) Reset() {
	*x = User_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Spec_Authorization) ProtoMessage() {}

func (x *User_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*User_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *User_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *User_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type User_Spec_Authentication struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identities is the list of explicit User identities
	Identities    []*User_Spec_Authentication_Identity `protobuf:"bytes,1,rep,name=identities,proto3" json:"identities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User_Spec_Authentication) Reset() {
	*x = User_Spec_Authentication{}
	mi := &file_corev1_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_Spec_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Spec_Authentication) ProtoMessage() {}

func (x *User_Spec_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Spec_Authentication.ProtoReflect.Descriptor instead.
func (*User_Spec_Authentication) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *User_Spec_Authentication) GetIdentities() []*User_Spec_Authentication_Identity {
	if x != nil {
		return x.Identities
	}
	return nil
}

type User_Spec_Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientDuration sets the Session duration used by clients after which
	// the Session is deemed expired and automatically deleted by the
	// Cluster.
	ClientDuration *metav1.Duration `protobuf:"bytes,1,opt,name=clientDuration,proto3" json:"clientDuration,omitempty"`
	// ClientlessDuration sets the Session duration for the
	// client-less/BeyondCorp mode after which the Session is deemed expired
	// and automatically deleted by the Cluster.
	ClientlessDuration *metav1.Duration `protobuf:"bytes,2,opt,name=clientlessDuration,proto3" json:"clientlessDuration,omitempty"`
	// AccessTokenDuration sets the access token duration
	AccessTokenDuration *metav1.Duration `protobuf:"bytes,3,opt,name=accessTokenDuration,proto3" json:"accessTokenDuration,omitempty"`
	// RefreshTokenDuration sets the refresh token duration
	RefreshTokenDuration *metav1.Duration `protobuf:"bytes,4,opt,name=refreshTokenDuration,proto3" json:"refreshTokenDuration,omitempty"`
	// MaxPerUser sets the max number of of Sessions per User
	MaxPerUser uint32 `protobuf:"varint,5,opt,name=maxPerUser,proto3" json:"maxPerUser,omitempty"`
	// DefaultState is the default state of a newly created Session
	DefaultState  Session_Spec_State `protobuf:"varint,6,opt,name=defaultState,proto3,enum=octelium.api.main.core.v1.Session_Spec_State" json:"defaultState,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User_Spec_Session) Reset() {
	*x = User_Spec_Session{}
	mi := &file_corev1_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_Spec_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Spec_Session) ProtoMessage() {}

func (x *User_Spec_Session) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Spec_Session.ProtoReflect.Descriptor instead.
func (*User_Spec_Session) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 0, 2}
}

func (x *User_Spec_Session) GetClientDuration() *metav1.Duration {
	if x != nil {
		return x.ClientDuration
	}
	return nil
}

func (x *User_Spec_Session) GetClientlessDuration() *metav1.Duration {
	if x != nil {
		return x.ClientlessDuration
	}
	return nil
}

func (x *User_Spec_Session) GetAccessTokenDuration() *metav1.Duration {
	if x != nil {
		return x.AccessTokenDuration
	}
	return nil
}

func (x *User_Spec_Session) GetRefreshTokenDuration() *metav1.Duration {
	if x != nil {
		return x.RefreshTokenDuration
	}
	return nil
}

func (x *User_Spec_Session) GetMaxPerUser() uint32 {
	if x != nil {
		return x.MaxPerUser
	}
	return 0
}

func (x *User_Spec_Session) GetDefaultState() Session_Spec_State {
	if x != nil {
		return x.DefaultState
	}
	return Session_Spec_STATE_UNKNOWN
}

type User_Spec_Info struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locale        string                 `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
	Phone         string                 `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`
	FirstName     string                 `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	MiddleName    string                 `protobuf:"bytes,4,opt,name=middleName,proto3" json:"middleName,omitempty"`
	LastName      string                 `protobuf:"bytes,5,opt,name=lastName,proto3" json:"lastName,omitempty"`
	Website       string                 `protobuf:"bytes,6,opt,name=website,proto3" json:"website,omitempty"`
	Country       string                 `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User_Spec_Info) Reset() {
	*x = User_Spec_Info{}
	mi := &file_corev1_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_Spec_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Spec_Info) ProtoMessage() {}

func (x *User_Spec_Info) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Spec_Info.ProtoReflect.Descriptor instead.
func (*User_Spec_Info) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 0, 3}
}

func (x *User_Spec_Info) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *User_Spec_Info) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User_Spec_Info) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User_Spec_Info) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *User_Spec_Info) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User_Spec_Info) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *User_Spec_Info) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type User_Spec_Authentication_Identity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Provider is the provider's name according to the Cluster
	// configuration.
	IdentityProvider string `protobuf:"bytes,1,opt,name=identityProvider,proto3" json:"identityProvider,omitempty"`
	// Identifier is the value that identifies the User account according to
	// the provider. (e.g. the username in the case of Github and Gitlab,
	// the email for Google, OpenID Connect, SAML 2.0, etc...)
	Identifier    string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User_Spec_Authentication_Identity) Reset() {
	*x = User_Spec_Authentication_Identity{}
	mi := &file_corev1_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User_Spec_Authentication_Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Spec_Authentication_Identity) ProtoMessage() {}

func (x *User_Spec_Authentication_Identity) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Spec_Authentication_Identity.ProtoReflect.Descriptor instead.
func (*User_Spec_Authentication_Identity) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{3, 0, 1, 0}
}

func (x *User_Spec_Authentication_Identity) GetIdentityProvider() string {
	if x != nil {
		return x.IdentityProvider
	}
	return ""
}

func (x *User_Spec_Authentication_Identity) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type Service_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port is the port number used by the listener. If not set, Octelium will
	// try to assume the number from the backend URL. (e.g. if the backend's
	// URL scheme is `http` then the port number is 80).
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Mode is the mode of the protocol used by the proxy implementing the
	// Service. If UNSET which is the default value, the Service will
	// automatically decide the mode using the scheme of the Upstream's URL.
	Mode Service_Spec_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Mode" json:"mode,omitempty"`
	// Authorization sets the authorization-related configuration
	Authorization *Service_Spec_Authorization `protobuf:"bytes,3,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// Config sets the listener's application-layer specific options.
	Config *Service_Spec_Config `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	// DynamicConfig sets the dynamic configuration options. DynamicConfig can
	// simply dynamically override the global/static Service configuration via
	// programmable CEL rules that take identity and context into account.
	DynamicConfig *Service_Spec_DynamicConfig `protobuf:"bytes,5,opt,name=dynamicConfig,proto3" json:"dynamicConfig,omitempty"`
	// IsTLS enables TLS for the listener using its Namespace certificate
	// (i.e. You have to enable TLS at the Namespace level in order to enable
	// this field).
	IsTLS bool `protobuf:"varint,6,opt,name=isTLS,proto3" json:"isTLS,omitempty"`
	// IsPublic enables the client-less public "BeyondCorp" mode access for the
	// Service. Only works for HTTP-based Service modes for now.
	IsPublic bool `protobuf:"varint,7,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	// IsAnonymous turns a publicly exposed HTTP-based Service into an
	// anonymously exposed Service that can be anonymously accessed publicly. In
	// other words, this turns off authentication and authorization for the
	// Service. This requires the isPublic field to be enabled too. Refer to the
	// docs for more.
	IsAnonymous bool `protobuf:"varint,8,opt,name=isAnonymous,proto3" json:"isAnonymous,omitempty"`
	// Deployment sets The Service's underlying deployment configurations.
	Deployment *Service_Spec_Deployment `protobuf:"bytes,9,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Attrs      *structpb.Struct         `protobuf:"bytes,12,opt,name=attrs,proto3" json:"attrs,omitempty"`
	// Region explicitly sets the Region name in which the Service is
	// deployed.By default, a Service is deployed in the "default" Region.
	Region        string `protobuf:"bytes,13,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec) Reset() {
	*x = Service_Spec{}
	mi := &file_corev1_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec) ProtoMessage() {}

func (x *Service_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec.ProtoReflect.Descriptor instead.
func (*Service_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Service_Spec) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Service_Spec) GetMode() Service_Spec_Mode {
	if x != nil {
		return x.Mode
	}
	return Service_Spec_MODE_UNSET
}

func (x *Service_Spec) GetAuthorization() *Service_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Service_Spec) GetConfig() *Service_Spec_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Service_Spec) GetDynamicConfig() *Service_Spec_DynamicConfig {
	if x != nil {
		return x.DynamicConfig
	}
	return nil
}

func (x *Service_Spec) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

func (x *Service_Spec) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *Service_Spec) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

func (x *Service_Spec) GetDeployment() *Service_Spec_Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Service_Spec) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *Service_Spec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type Service_Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Addresses is the list of private addresses used by the Service for
	// client-based connections.
	Addresses []*Service_Status_Address `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// NamespaceRef is the reference of the owner Namespace
	NamespaceRef        *metav1.ObjectReference        `protobuf:"bytes,2,opt,name=namespaceRef,proto3" json:"namespaceRef,omitempty"`
	ManagedService      *Service_Status_ManagedService `protobuf:"bytes,3,opt,name=managedService,proto3" json:"managedService,omitempty"`
	RegionRef           *metav1.ObjectReference        `protobuf:"bytes,4,opt,name=regionRef,proto3" json:"regionRef,omitempty"`
	PrimaryHostname     string                         `protobuf:"bytes,5,opt,name=primaryHostname,proto3" json:"primaryHostname,omitempty"`
	AdditionalHostnames []string                       `protobuf:"bytes,6,rep,name=additionalHostnames,proto3" json:"additionalHostnames,omitempty"`
	Port                uint32                         `protobuf:"varint,7,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Service_Status) Reset() {
	*x = Service_Status{}
	mi := &file_corev1_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status) ProtoMessage() {}

func (x *Service_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status.ProtoReflect.Descriptor instead.
func (*Service_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Service_Status) GetAddresses() []*Service_Status_Address {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Service_Status) GetNamespaceRef() *metav1.ObjectReference {
	if x != nil {
		return x.NamespaceRef
	}
	return nil
}

func (x *Service_Status) GetManagedService() *Service_Status_ManagedService {
	if x != nil {
		return x.ManagedService
	}
	return nil
}

func (x *Service_Status) GetRegionRef() *metav1.ObjectReference {
	if x != nil {
		return x.RegionRef
	}
	return nil
}

func (x *Service_Status) GetPrimaryHostname() string {
	if x != nil {
		return x.PrimaryHostname
	}
	return ""
}

func (x *Service_Status) GetAdditionalHostnames() []string {
	if x != nil {
		return x.AdditionalHostnames
	}
	return nil
}

func (x *Service_Status) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Service_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Service_Spec_Authorization) Reset() {
	*x = Service_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Authorization) ProtoMessage() {}

func (x *Service_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*Service_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *Service_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Service_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type Service_Spec_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is a unique name the describes the Config. Only needed for Configs
	// described within the DynamicConfig. The default Config is assumed to
	// have the name "default".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// ClientCertificate sets mTLS-related configuration (i.e. the client x509
	// certificate chain and its corresponding private key) to authenticate to
	// an upstream that requires mTLS. This is unused for certain modes such
	// as SSH since it does not use mTLS.
	ClientCertificate *Service_Spec_Config_ClientCertificate `protobuf:"bytes,2,opt,name=clientCertificate,proto3" json:"clientCertificate,omitempty"`
	// Upstream is the Service detailed upstream information. Only one of the
	// URL or Upstream must be set.
	Upstream *Service_Spec_Config_Upstream `protobuf:"bytes,3,opt,name=upstream,proto3" json:"upstream,omitempty"`
	// Parent is the name of the parent configuration
	Parent string                   `protobuf:"bytes,9,opt,name=parent,proto3" json:"parent,omitempty"`
	Tls    *Service_Spec_Config_TLS `protobuf:"bytes,10,opt,name=tls,proto3" json:"tls,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Http
	//	*Service_Spec_Config_Ssh
	//	*Service_Spec_Config_Postgres_
	//	*Service_Spec_Config_Mysql
	//	*Service_Spec_Config_Kubernetes_
	Type          isService_Spec_Config_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config) Reset() {
	*x = Service_Spec_Config{}
	mi := &file_corev1_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config) ProtoMessage() {}

func (x *Service_Spec_Config) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1}
}

func (x *Service_Spec_Config) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service_Spec_Config) GetClientCertificate() *Service_Spec_Config_ClientCertificate {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

func (x *Service_Spec_Config) GetUpstream() *Service_Spec_Config_Upstream {
	if x != nil {
		return x.Upstream
	}
	return nil
}

func (x *Service_Spec_Config) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Service_Spec_Config) GetTls() *Service_Spec_Config_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Service_Spec_Config) GetType() isService_Spec_Config_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config) GetHttp() *Service_Spec_Config_HTTP {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *Service_Spec_Config) GetSsh() *Service_Spec_Config_SSH {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Ssh); ok {
			return x.Ssh
		}
	}
	return nil
}

func (x *Service_Spec_Config) GetPostgres() *Service_Spec_Config_Postgres {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

func (x *Service_Spec_Config) GetMysql() *Service_Spec_Config_MySQL {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *Service_Spec_Config) GetKubernetes() *Service_Spec_Config_Kubernetes {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Kubernetes_); ok {
			return x.Kubernetes
		}
	}
	return nil
}

type isService_Spec_Config_Type interface {
	isService_Spec_Config_Type()
}

type Service_Spec_Config_Http struct {
	// HTTP sets HTTP-specific configuration
	Http *Service_Spec_Config_HTTP `protobuf:"bytes,4,opt,name=http,proto3,oneof"`
}

type Service_Spec_Config_Ssh struct {
	// SSH sets SSH-specific configuration
	Ssh *Service_Spec_Config_SSH `protobuf:"bytes,5,opt,name=ssh,proto3,oneof"`
}

type Service_Spec_Config_Postgres_ struct {
	// Postgres sets PostgreSQL-specific configuration
	Postgres *Service_Spec_Config_Postgres `protobuf:"bytes,6,opt,name=postgres,proto3,oneof"`
}

type Service_Spec_Config_Mysql struct {
	// MySQL (EXPERIMENTAL) sets MySQL-specific configuration
	Mysql *Service_Spec_Config_MySQL `protobuf:"bytes,7,opt,name=mysql,proto3,oneof"`
}

type Service_Spec_Config_Kubernetes_ struct {
	// Kubernetes sets Kubernetes-specific configuration
	Kubernetes *Service_Spec_Config_Kubernetes `protobuf:"bytes,8,opt,name=kubernetes,proto3,oneof"`
}

func (*Service_Spec_Config_Http) isService_Spec_Config_Type() {}

func (*Service_Spec_Config_Ssh) isService_Spec_Config_Type() {}

func (*Service_Spec_Config_Postgres_) isService_Spec_Config_Type() {}

func (*Service_Spec_Config_Mysql) isService_Spec_Config_Type() {}

func (*Service_Spec_Config_Kubernetes_) isService_Spec_Config_Type() {}

type Service_Spec_Deployment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Replicas sets the number of replicas of a deployed Service.
	Replicas      uint32 `protobuf:"varint,1,opt,name=replicas,proto3" json:"replicas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Deployment) Reset() {
	*x = Service_Spec_Deployment{}
	mi := &file_corev1_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Deployment) ProtoMessage() {}

func (x *Service_Spec_Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Deployment.ProtoReflect.Descriptor instead.
func (*Service_Spec_Deployment) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 2}
}

func (x *Service_Spec_Deployment) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

type Service_Spec_DynamicConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configs is the list of named configurations that will override the
	// global/default Service configuration if a rule matches.
	Configs []*Service_Spec_Config `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	// Rules is the list of rules that are checked on a per-request basis,
	// if a rule matches its named configuration is used as the Service
	// configuration for that specific request.
	Rules         []*Service_Spec_DynamicConfig_Rule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_DynamicConfig) Reset() {
	*x = Service_Spec_DynamicConfig{}
	mi := &file_corev1_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_DynamicConfig) ProtoMessage() {}

func (x *Service_Spec_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_DynamicConfig.ProtoReflect.Descriptor instead.
func (*Service_Spec_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 3}
}

func (x *Service_Spec_DynamicConfig) GetConfigs() []*Service_Spec_Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *Service_Spec_DynamicConfig) GetRules() []*Service_Spec_DynamicConfig_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Service_Spec_Config_HTTP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Auth sets authentication-to-upstream specific configuration
	Auth *Service_Spec_Config_HTTP_Auth `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// Header sets request and response header manipulation options
	Header *Service_Spec_Config_HTTP_Header `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	// Path sets the request path options
	Path *Service_Spec_Config_HTTP_Path `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// CORS sets the Cross-Origin Resource Sharing (CORS)-specific
	// options. Read more at
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers.
	Cors *Service_Spec_Config_HTTP_CORS `protobuf:"bytes,4,opt,name=cors,proto3" json:"cors,omitempty"`
	// IsUpstreamHTTP2 sets HTTP connections to the upstream to HTTP/2. Not
	// enabled by default.
	IsUpstreamHTTP2 bool `protobuf:"varint,5,opt,name=isUpstreamHTTP2,proto3" json:"isUpstreamHTTP2,omitempty"`
	// ListenHTTP2 sets the Service to listen to HTTP 2.0 connections. This
	// is only enabled by default for Services using TLS. This field has to
	// be enabled in the in the "default" or global Configuration (as
	// opposed to named dynamic Configs) in order to actually work.
	ListenHTTP2 bool `protobuf:"varint,6,opt,name=listenHTTP2,proto3" json:"listenHTTP2,omitempty"`
	// EnableRequestBuffering buffers the entire request body before sending
	// it to the upstream. This can be used to check the request body
	// content for access control and dynamic configuration. This means that
	// it has to be enabled in the "default" or global Configuration (as
	// opposed to named dynamic Configs) in order to actually work.
	EnableRequestBuffering bool `protobuf:"varint,7,opt,name=enableRequestBuffering,proto3" json:"enableRequestBuffering,omitempty"`
	// Body sets the body-specific options.
	Body *Service_Spec_Config_HTTP_Body `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	// Response sets the response-specific configurations
	Response *Service_Spec_Config_HTTP_Response `protobuf:"bytes,9,opt,name=response,proto3" json:"response,omitempty"`
	// Plugins is the list of plugins
	Plugins []*Service_Spec_Config_HTTP_Plugin `protobuf:"bytes,10,rep,name=plugins,proto3" json:"plugins,omitempty"`
	// Visibility sets the visibility/access logging specific options
	Visibility    *Service_Spec_Config_HTTP_Visibility `protobuf:"bytes,11,opt,name=visibility,proto3" json:"visibility,omitempty"`
	Retry         *Service_Spec_Config_HTTP_Retry      `protobuf:"bytes,12,opt,name=retry,proto3" json:"retry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP) Reset() {
	*x = Service_Spec_Config_HTTP{}
	mi := &file_corev1_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0}
}

func (x *Service_Spec_Config_HTTP) GetAuth() *Service_Spec_Config_HTTP_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetHeader() *Service_Spec_Config_HTTP_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetPath() *Service_Spec_Config_HTTP_Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetCors() *Service_Spec_Config_HTTP_CORS {
	if x != nil {
		return x.Cors
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetIsUpstreamHTTP2() bool {
	if x != nil {
		return x.IsUpstreamHTTP2
	}
	return false
}

func (x *Service_Spec_Config_HTTP) GetListenHTTP2() bool {
	if x != nil {
		return x.ListenHTTP2
	}
	return false
}

func (x *Service_Spec_Config_HTTP) GetEnableRequestBuffering() bool {
	if x != nil {
		return x.EnableRequestBuffering
	}
	return false
}

func (x *Service_Spec_Config_HTTP) GetBody() *Service_Spec_Config_HTTP_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetResponse() *Service_Spec_Config_HTTP_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetPlugins() []*Service_Spec_Config_HTTP_Plugin {
	if x != nil {
		return x.Plugins
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetVisibility() *Service_Spec_Config_HTTP_Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

func (x *Service_Spec_Config_HTTP) GetRetry() *Service_Spec_Config_HTTP_Retry {
	if x != nil {
		return x.Retry
	}
	return nil
}

type Service_Spec_Config_SSH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User is the SSH user. If set, this value overrides the SSH user
	// requested by the downstreams. If not set, then downstream's value is
	// forwarded to the upstream.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Auth sets authentication related information
	Auth *Service_Spec_Config_SSH_Auth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// UpstreamHostKey sets the upstream's host public key
	UpstreamHostKey *Service_Spec_Config_SSH_UpstreamHostKey `protobuf:"bytes,3,opt,name=upstreamHostKey,proto3" json:"upstreamHostKey,omitempty"`
	// EnableLocalPortForwarding enables local port forwarding (i.e.
	// "direct-tcpip")
	EnableLocalPortForwarding bool `protobuf:"varint,4,opt,name=enableLocalPortForwarding,proto3" json:"enableLocalPortForwarding,omitempty"`
	// EnableSubsystem enable subsystem requests
	EnableSubsystem bool `protobuf:"varint,5,opt,name=enableSubsystem,proto3" json:"enableSubsystem,omitempty"`
	// eSSHMode enables the "embedded SSH" mode. This means that the
	// upstream is served by an Octelium client rather than a typical SSH
	// server. Refer to the docs for more.
	ESSHMode      bool                                `protobuf:"varint,6,opt,name=eSSHMode,proto3" json:"eSSHMode,omitempty"`
	Visibility    *Service_Spec_Config_SSH_Visibility `protobuf:"bytes,7,opt,name=visibility,proto3" json:"visibility,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_SSH) Reset() {
	*x = Service_Spec_Config_SSH{}
	mi := &file_corev1_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_SSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_SSH) ProtoMessage() {}

func (x *Service_Spec_Config_SSH) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_SSH.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_SSH) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 1}
}

func (x *Service_Spec_Config_SSH) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Service_Spec_Config_SSH) GetAuth() *Service_Spec_Config_SSH_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Service_Spec_Config_SSH) GetUpstreamHostKey() *Service_Spec_Config_SSH_UpstreamHostKey {
	if x != nil {
		return x.UpstreamHostKey
	}
	return nil
}

func (x *Service_Spec_Config_SSH) GetEnableLocalPortForwarding() bool {
	if x != nil {
		return x.EnableLocalPortForwarding
	}
	return false
}

func (x *Service_Spec_Config_SSH) GetEnableSubsystem() bool {
	if x != nil {
		return x.EnableSubsystem
	}
	return false
}

func (x *Service_Spec_Config_SSH) GetESSHMode() bool {
	if x != nil {
		return x.ESSHMode
	}
	return false
}

func (x *Service_Spec_Config_SSH) GetVisibility() *Service_Spec_Config_SSH_Visibility {
	if x != nil {
		return x.Visibility
	}
	return nil
}

type Service_Spec_Config_Postgres struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User is the postgres user. If set, it overrides the user values
	// requested by the downstreams. If not set, the user values requested
	// by the downstreams is forwarded to the upstream as is.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Auth sets the upstream authentication information
	Auth *Service_Spec_Config_Postgres_Auth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	// Database is the name of the database. If set, it overrides the
	// database values requested by the downstreams. If not set, the
	// database values requested by the downstreams is forwarded to the
	// upstream as is.
	Database string `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	// SSLMode is the SSL mode
	SslMode Service_Spec_Config_Postgres_SSLMode `protobuf:"varint,4,opt,name=sslMode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_Postgres_SSLMode" json:"sslMode,omitempty"`
	// Authorization sets PostgreSQL-specific authorization configuration
	Authorization *Service_Spec_Config_Postgres_Authorization `protobuf:"bytes,5,opt,name=authorization,proto3" json:"authorization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Postgres) Reset() {
	*x = Service_Spec_Config_Postgres{}
	mi := &file_corev1_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Postgres) ProtoMessage() {}

func (x *Service_Spec_Config_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Postgres.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Postgres) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 2}
}

func (x *Service_Spec_Config_Postgres) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Service_Spec_Config_Postgres) GetAuth() *Service_Spec_Config_Postgres_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Service_Spec_Config_Postgres) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Service_Spec_Config_Postgres) GetSslMode() Service_Spec_Config_Postgres_SSLMode {
	if x != nil {
		return x.SslMode
	}
	return Service_Spec_Config_Postgres_SSL_MODE_UNSET
}

func (x *Service_Spec_Config_Postgres) GetAuthorization() *Service_Spec_Config_Postgres_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

type Service_Spec_Config_MySQL struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	User          string                          `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Auth          *Service_Spec_Config_MySQL_Auth `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Database      string                          `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	IsTLS         bool                            `protobuf:"varint,4,opt,name=isTLS,proto3" json:"isTLS,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_MySQL) Reset() {
	*x = Service_Spec_Config_MySQL{}
	mi := &file_corev1_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_MySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_MySQL) ProtoMessage() {}

func (x *Service_Spec_Config_MySQL) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_MySQL.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_MySQL) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 3}
}

func (x *Service_Spec_Config_MySQL) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Service_Spec_Config_MySQL) GetAuth() *Service_Spec_Config_MySQL_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *Service_Spec_Config_MySQL) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Service_Spec_Config_MySQL) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

type Service_Spec_Config_ClientCertificate struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	TrustedCAs []string               `protobuf:"bytes,1,rep,name=trustedCAs,proto3" json:"trustedCAs,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_ClientCertificate_FromSecret
	Type          isService_Spec_Config_ClientCertificate_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_ClientCertificate) Reset() {
	*x = Service_Spec_Config_ClientCertificate{}
	mi := &file_corev1_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_ClientCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_ClientCertificate) ProtoMessage() {}

func (x *Service_Spec_Config_ClientCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_ClientCertificate.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_ClientCertificate) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 4}
}

func (x *Service_Spec_Config_ClientCertificate) GetTrustedCAs() []string {
	if x != nil {
		return x.TrustedCAs
	}
	return nil
}

func (x *Service_Spec_Config_ClientCertificate) GetType() isService_Spec_Config_ClientCertificate_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_ClientCertificate) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_ClientCertificate_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_ClientCertificate_Type interface {
	isService_Spec_Config_ClientCertificate_Type()
}

type Service_Spec_Config_ClientCertificate_FromSecret struct {
	FromSecret string `protobuf:"bytes,2,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_ClientCertificate_FromSecret) isService_Spec_Config_ClientCertificate_Type() {
}

type Service_Spec_Config_TLS struct {
	state              protoimpl.MessageState                     `protogen:"open.v1"`
	TrustedCAs         []string                                   `protobuf:"bytes,1,rep,name=trustedCAs,proto3" json:"trustedCAs,omitempty"`
	AppendToSystemPool bool                                       `protobuf:"varint,2,opt,name=appendToSystemPool,proto3" json:"appendToSystemPool,omitempty"`
	InsecureSkipVerify bool                                       `protobuf:"varint,3,opt,name=insecureSkipVerify,proto3" json:"insecureSkipVerify,omitempty"`
	ClientCertificate  *Service_Spec_Config_TLS_ClientCertificate `protobuf:"bytes,4,opt,name=clientCertificate,proto3" json:"clientCertificate,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Service_Spec_Config_TLS) Reset() {
	*x = Service_Spec_Config_TLS{}
	mi := &file_corev1_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_TLS) ProtoMessage() {}

func (x *Service_Spec_Config_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_TLS.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_TLS) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 5}
}

func (x *Service_Spec_Config_TLS) GetTrustedCAs() []string {
	if x != nil {
		return x.TrustedCAs
	}
	return nil
}

func (x *Service_Spec_Config_TLS) GetAppendToSystemPool() bool {
	if x != nil {
		return x.AppendToSystemPool
	}
	return false
}

func (x *Service_Spec_Config_TLS) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *Service_Spec_Config_TLS) GetClientCertificate() *Service_Spec_Config_TLS_ClientCertificate {
	if x != nil {
		return x.ClientCertificate
	}
	return nil
}

type Service_Spec_Config_Kubernetes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Kubernetes_Kubeconfig_
	//	*Service_Spec_Config_Kubernetes_BearerToken_
	//	*Service_Spec_Config_Kubernetes_ClientCertificate
	Type          isService_Spec_Config_Kubernetes_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Kubernetes) Reset() {
	*x = Service_Spec_Config_Kubernetes{}
	mi := &file_corev1_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Kubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Kubernetes) ProtoMessage() {}

func (x *Service_Spec_Config_Kubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Kubernetes.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Kubernetes) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 6}
}

func (x *Service_Spec_Config_Kubernetes) GetType() isService_Spec_Config_Kubernetes_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Kubernetes) GetKubeconfig() *Service_Spec_Config_Kubernetes_Kubeconfig {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Kubernetes_Kubeconfig_); ok {
			return x.Kubeconfig
		}
	}
	return nil
}

func (x *Service_Spec_Config_Kubernetes) GetBearerToken() *Service_Spec_Config_Kubernetes_BearerToken {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Kubernetes_BearerToken_); ok {
			return x.BearerToken
		}
	}
	return nil
}

func (x *Service_Spec_Config_Kubernetes) GetClientCertificate() *Service_Spec_Config_ClientCertificate {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Kubernetes_ClientCertificate); ok {
			return x.ClientCertificate
		}
	}
	return nil
}

type isService_Spec_Config_Kubernetes_Type interface {
	isService_Spec_Config_Kubernetes_Type()
}

type Service_Spec_Config_Kubernetes_Kubeconfig_ struct {
	// Kubeconfig sets the cluster configuration from a kubeconfig. Only
	// one of ClusterInfo or Kubeconfig must be set.
	Kubeconfig *Service_Spec_Config_Kubernetes_Kubeconfig `protobuf:"bytes,1,opt,name=kubeconfig,proto3,oneof"`
}

type Service_Spec_Config_Kubernetes_BearerToken_ struct {
	BearerToken *Service_Spec_Config_Kubernetes_BearerToken `protobuf:"bytes,2,opt,name=bearerToken,proto3,oneof"`
}

type Service_Spec_Config_Kubernetes_ClientCertificate struct {
	ClientCertificate *Service_Spec_Config_ClientCertificate `protobuf:"bytes,3,opt,name=clientCertificate,proto3,oneof"`
}

func (*Service_Spec_Config_Kubernetes_Kubeconfig_) isService_Spec_Config_Kubernetes_Type() {}

func (*Service_Spec_Config_Kubernetes_BearerToken_) isService_Spec_Config_Kubernetes_Type() {}

func (*Service_Spec_Config_Kubernetes_ClientCertificate) isService_Spec_Config_Kubernetes_Type() {}

type Service_Spec_Config_Upstream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User is the User name if the upstream should be served by an active
	// Connection of a User. If set, that means that the
	// Service is served by any connected client owned by that User and
	// willing to serve the Service.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Upstream_Url
	//	*Service_Spec_Config_Upstream_Loadbalance_
	//	*Service_Spec_Config_Upstream_Container_
	Type          isService_Spec_Config_Upstream_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream) Reset() {
	*x = Service_Spec_Config_Upstream{}
	mi := &file_corev1_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7}
}

func (x *Service_Spec_Config_Upstream) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Service_Spec_Config_Upstream) GetType() isService_Spec_Config_Upstream_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Upstream) GetUrl() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Url); ok {
			return x.Url
		}
	}
	return ""
}

func (x *Service_Spec_Config_Upstream) GetLoadbalance() *Service_Spec_Config_Upstream_Loadbalance {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Loadbalance_); ok {
			return x.Loadbalance
		}
	}
	return nil
}

func (x *Service_Spec_Config_Upstream) GetContainer() *Service_Spec_Config_Upstream_Container {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_); ok {
			return x.Container
		}
	}
	return nil
}

type isService_Spec_Config_Upstream_Type interface {
	isService_Spec_Config_Upstream_Type()
}

type Service_Spec_Config_Upstream_Url struct {
	// URL is the canonical URL of the upstream.
	// Examples are`http://example.com`, `postgres://pg.default.svc`,
	// `tcp://my-custom-app:9090`,  and `https://api.sandbox.paypal.com`.
	Url string `protobuf:"bytes,2,opt,name=url,proto3,oneof"`
}

type Service_Spec_Config_Upstream_Loadbalance_ struct {
	// Loadbalance is the list of upstreams in case you have more than one
	// upstream. You either use the main upstream or the loadbalance list.
	Loadbalance *Service_Spec_Config_Upstream_Loadbalance `protobuf:"bytes,3,opt,name=loadbalance,proto3,oneof"`
}

type Service_Spec_Config_Upstream_Container_ struct {
	// Container sets the Upstream to a managed container deployed
	// on the same Kubernetes cluster that hosts the OCtelium Cluster
	Container *Service_Spec_Config_Upstream_Container `protobuf:"bytes,4,opt,name=container,proto3,oneof"`
}

func (*Service_Spec_Config_Upstream_Url) isService_Spec_Config_Upstream_Type() {}

func (*Service_Spec_Config_Upstream_Loadbalance_) isService_Spec_Config_Upstream_Type() {}

func (*Service_Spec_Config_Upstream_Container_) isService_Spec_Config_Upstream_Type() {}

type Service_Spec_Config_HTTP_CORS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AllowOriginStringMatch is the list of  patterns that match
	// allowed origins.
	AllowOriginStringMatch []string `protobuf:"bytes,1,rep,name=allowOriginStringMatch,proto3" json:"allowOriginStringMatch,omitempty"`
	// AllowMethods specifies the content for the
	// access-control-allow-methods header.
	AllowMethods string `protobuf:"bytes,2,opt,name=allowMethods,proto3" json:"allowMethods,omitempty"`
	// AllowHeaders specifies the content for the
	// access-control-allow-headers header.
	AllowHeaders string `protobuf:"bytes,3,opt,name=allowHeaders,proto3" json:"allowHeaders,omitempty"`
	// ExposeHeaders specifies the content for the
	// access-control-expose-headers header.
	ExposeHeaders string `protobuf:"bytes,4,opt,name=exposeHeaders,proto3" json:"exposeHeaders,omitempty"`
	// MaxAge specifies the content for the access-control-max-age
	// header.
	MaxAge string `protobuf:"bytes,5,opt,name=maxAge,proto3" json:"maxAge,omitempty"`
	// AllowCredentials specifies whether the resource allows
	// credentials.
	AllowCredentials bool `protobuf:"varint,6,opt,name=allowCredentials,proto3" json:"allowCredentials,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_CORS) Reset() {
	*x = Service_Spec_Config_HTTP_CORS{}
	mi := &file_corev1_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_CORS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_CORS) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_CORS) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_CORS.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_CORS) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 0}
}

func (x *Service_Spec_Config_HTTP_CORS) GetAllowOriginStringMatch() []string {
	if x != nil {
		return x.AllowOriginStringMatch
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_CORS) GetAllowMethods() string {
	if x != nil {
		return x.AllowMethods
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_CORS) GetAllowHeaders() string {
	if x != nil {
		return x.AllowHeaders
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_CORS) GetExposeHeaders() string {
	if x != nil {
		return x.ExposeHeaders
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_CORS) GetMaxAge() string {
	if x != nil {
		return x.MaxAge
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_CORS) GetAllowCredentials() bool {
	if x != nil {
		return x.AllowCredentials
	}
	return false
}

type Service_Spec_Config_HTTP_Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Auth_Bearer_
	//	*Service_Spec_Config_HTTP_Auth_Basic_
	//	*Service_Spec_Config_HTTP_Auth_Custom_
	//	*Service_Spec_Config_HTTP_Auth_Oauth2ClientCredentials
	//	*Service_Spec_Config_HTTP_Auth_Sigv4_
	Type          isService_Spec_Config_HTTP_Auth_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth) Reset() {
	*x = Service_Spec_Config_HTTP_Auth{}
	mi := &file_corev1_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1}
}

func (x *Service_Spec_Config_HTTP_Auth) GetType() isService_Spec_Config_HTTP_Auth_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth) GetBearer() *Service_Spec_Config_HTTP_Auth_Bearer {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Bearer_); ok {
			return x.Bearer
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth) GetBasic() *Service_Spec_Config_HTTP_Auth_Basic {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Basic_); ok {
			return x.Basic
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth) GetCustom() *Service_Spec_Config_HTTP_Auth_Custom {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Custom_); ok {
			return x.Custom
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth) GetOauth2ClientCredentials() *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Oauth2ClientCredentials); ok {
			return x.Oauth2ClientCredentials
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth) GetSigv4() *Service_Spec_Config_HTTP_Auth_Sigv4 {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Sigv4_); ok {
			return x.Sigv4
		}
	}
	return nil
}

type isService_Spec_Config_HTTP_Auth_Type interface {
	isService_Spec_Config_HTTP_Auth_Type()
}

type Service_Spec_Config_HTTP_Auth_Bearer_ struct {
	// Bearer sets bearer authentication details
	Bearer *Service_Spec_Config_HTTP_Auth_Bearer `protobuf:"bytes,1,opt,name=bearer,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Auth_Basic_ struct {
	// Basis sets basic authentication details
	Basic *Service_Spec_Config_HTTP_Auth_Basic `protobuf:"bytes,2,opt,name=basic,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Auth_Custom_ struct {
	// Custom sets authentication inside custom header
	Custom *Service_Spec_Config_HTTP_Auth_Custom `protobuf:"bytes,3,opt,name=custom,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Auth_Oauth2ClientCredentials struct {
	// OAuth2ClientCredentials sets OAuth2 client credentials
	// authentication flow details
	Oauth2ClientCredentials *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials `protobuf:"bytes,4,opt,name=oauth2ClientCredentials,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Auth_Sigv4_ struct {
	// Sigv4 sets the AWS signature v4 authentication details
	Sigv4 *Service_Spec_Config_HTTP_Auth_Sigv4 `protobuf:"bytes,5,opt,name=sigv4,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Auth_Bearer_) isService_Spec_Config_HTTP_Auth_Type() {}

func (*Service_Spec_Config_HTTP_Auth_Basic_) isService_Spec_Config_HTTP_Auth_Type() {}

func (*Service_Spec_Config_HTTP_Auth_Custom_) isService_Spec_Config_HTTP_Auth_Type() {}

func (*Service_Spec_Config_HTTP_Auth_Oauth2ClientCredentials) isService_Spec_Config_HTTP_Auth_Type() {
}

func (*Service_Spec_Config_HTTP_Auth_Sigv4_) isService_Spec_Config_HTTP_Auth_Type() {}

type Service_Spec_Config_HTTP_Path struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AddPrefix adds a prefix to the request path.
	AddPrefix string `protobuf:"bytes,1,opt,name=addPrefix,proto3" json:"addPrefix,omitempty"`
	// RemovePrefix removes a prefix from the request path. You can use
	// both RemovePrefix and AddPrefix at the same time to replace a
	// prefix by another one.
	RemovePrefix  string `protobuf:"bytes,2,opt,name=removePrefix,proto3" json:"removePrefix,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Path) Reset() {
	*x = Service_Spec_Config_HTTP_Path{}
	mi := &file_corev1_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Path) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Path) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Path.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Path) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 2}
}

func (x *Service_Spec_Config_HTTP_Path) GetAddPrefix() string {
	if x != nil {
		return x.AddPrefix
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Path) GetRemovePrefix() string {
	if x != nil {
		return x.RemovePrefix
	}
	return ""
}

type Service_Spec_Config_HTTP_Body struct {
	state protoimpl.MessageState             `protogen:"open.v1"`
	Mode  Service_Spec_Config_HTTP_Body_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_HTTP_Body_Mode" json:"mode,omitempty"`
	// MaxRequestSize sets the max body request byte size.
	MaxRequestSize uint32                                    `protobuf:"varint,2,opt,name=maxRequestSize,proto3" json:"maxRequestSize,omitempty"`
	Validation     *Service_Spec_Config_HTTP_Body_Validation `protobuf:"bytes,3,opt,name=validation,proto3" json:"validation,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Body) Reset() {
	*x = Service_Spec_Config_HTTP_Body{}
	mi := &file_corev1_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Body) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Body) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Body.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Body) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 3}
}

func (x *Service_Spec_Config_HTTP_Body) GetMode() Service_Spec_Config_HTTP_Body_Mode {
	if x != nil {
		return x.Mode
	}
	return Service_Spec_Config_HTTP_Body_MODE_UNSET
}

func (x *Service_Spec_Config_HTTP_Body) GetMaxRequestSize() uint32 {
	if x != nil {
		return x.MaxRequestSize
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Body) GetValidation() *Service_Spec_Config_HTTP_Body_Validation {
	if x != nil {
		return x.Validation
	}
	return nil
}

type Service_Spec_Config_HTTP_Header struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// AddRequestHeaders is the list of request headers to be added.
	AddRequestHeaders []*Service_Spec_Config_HTTP_Header_KeyValue `protobuf:"bytes,1,rep,name=addRequestHeaders,proto3" json:"addRequestHeaders,omitempty"`
	// RemoveRequestHeaders is the list of request headers to be
	// removed.
	RemoveRequestHeaders []string `protobuf:"bytes,2,rep,name=removeRequestHeaders,proto3" json:"removeRequestHeaders,omitempty"`
	// AddResponseHeaders is the list of response headers to be added.
	AddResponseHeaders []*Service_Spec_Config_HTTP_Header_KeyValue `protobuf:"bytes,3,rep,name=addResponseHeaders,proto3" json:"addResponseHeaders,omitempty"`
	// RemoveResponseHeaders is the list of response headers to be
	// removed.
	RemoveResponseHeaders []string `protobuf:"bytes,4,rep,name=removeResponseHeaders,proto3" json:"removeResponseHeaders,omitempty"`
	// Forwarded handles the forwarded request header.
	ForwardedMode Service_Spec_Config_HTTP_Header_ForwardedMode `protobuf:"varint,5,opt,name=forwardedMode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_HTTP_Header_ForwardedMode" json:"forwardedMode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Header) Reset() {
	*x = Service_Spec_Config_HTTP_Header{}
	mi := &file_corev1_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Header) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Header) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Header.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Header) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 4}
}

func (x *Service_Spec_Config_HTTP_Header) GetAddRequestHeaders() []*Service_Spec_Config_HTTP_Header_KeyValue {
	if x != nil {
		return x.AddRequestHeaders
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Header) GetRemoveRequestHeaders() []string {
	if x != nil {
		return x.RemoveRequestHeaders
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Header) GetAddResponseHeaders() []*Service_Spec_Config_HTTP_Header_KeyValue {
	if x != nil {
		return x.AddResponseHeaders
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Header) GetRemoveResponseHeaders() []string {
	if x != nil {
		return x.RemoveResponseHeaders
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Header) GetForwardedMode() Service_Spec_Config_HTTP_Header_ForwardedMode {
	if x != nil {
		return x.ForwardedMode
	}
	return Service_Spec_Config_HTTP_Header_UNSET
}

type Service_Spec_Config_HTTP_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Response_Direct_
	Type          isService_Spec_Config_HTTP_Response_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Response) Reset() {
	*x = Service_Spec_Config_HTTP_Response{}
	mi := &file_corev1_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Response) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Response) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Response.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Response) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 5}
}

func (x *Service_Spec_Config_HTTP_Response) GetType() isService_Spec_Config_HTTP_Response_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Response) GetDirect() *Service_Spec_Config_HTTP_Response_Direct {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Response_Direct_); ok {
			return x.Direct
		}
	}
	return nil
}

type isService_Spec_Config_HTTP_Response_Type interface {
	isService_Spec_Config_HTTP_Response_Type()
}

type Service_Spec_Config_HTTP_Response_Direct_ struct {
	Direct *Service_Spec_Config_HTTP_Response_Direct `protobuf:"bytes,1,opt,name=direct,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Response_Direct_) isService_Spec_Config_HTTP_Response_Type() {}

type Service_Spec_Config_HTTP_Retry struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MaxRetries          uint32                 `protobuf:"varint,1,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	InitialInterval     *metav1.Duration       `protobuf:"bytes,2,opt,name=initialInterval,proto3" json:"initialInterval,omitempty"`
	MaxInterval         *metav1.Duration       `protobuf:"bytes,3,opt,name=maxInterval,proto3" json:"maxInterval,omitempty"`
	MaxElapsedTime      *metav1.Duration       `protobuf:"bytes,4,opt,name=maxElapsedTime,proto3" json:"maxElapsedTime,omitempty"`
	Multiplier          float32                `protobuf:"fixed32,5,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	StatusCodes         []int32                `protobuf:"varint,6,rep,packed,name=statusCodes,proto3" json:"statusCodes,omitempty"`
	RetryOnServerErrors bool                   `protobuf:"varint,7,opt,name=retryOnServerErrors,proto3" json:"retryOnServerErrors,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Retry) Reset() {
	*x = Service_Spec_Config_HTTP_Retry{}
	mi := &file_corev1_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Retry) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Retry) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Retry.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Retry) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 6}
}

func (x *Service_Spec_Config_HTTP_Retry) GetMaxRetries() uint32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Retry) GetInitialInterval() *metav1.Duration {
	if x != nil {
		return x.InitialInterval
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Retry) GetMaxInterval() *metav1.Duration {
	if x != nil {
		return x.MaxInterval
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Retry) GetMaxElapsedTime() *metav1.Duration {
	if x != nil {
		return x.MaxElapsedTime
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Retry) GetMultiplier() float32 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Retry) GetStatusCodes() []int32 {
	if x != nil {
		return x.StatusCodes
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Retry) GetRetryOnServerErrors() bool {
	if x != nil {
		return x.RetryOnServerErrors
	}
	return false
}

type Service_Spec_Config_HTTP_Plugin struct {
	state      protoimpl.MessageState                `protogen:"open.v1"`
	Name       string                                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsDisabled bool                                  `protobuf:"varint,2,opt,name=isDisabled,proto3" json:"isDisabled,omitempty"`
	Phase      Service_Spec_Config_HTTP_Plugin_Phase `protobuf:"varint,3,opt,name=phase,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_HTTP_Plugin_Phase" json:"phase,omitempty"`
	Condition  *Condition                            `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Plugin_ExtProc_
	//	*Service_Spec_Config_HTTP_Plugin_Lua_
	//	*Service_Spec_Config_HTTP_Plugin_Direct_
	//	*Service_Spec_Config_HTTP_Plugin_RateLimit_
	//	*Service_Spec_Config_HTTP_Plugin_Cache_
	Type          isService_Spec_Config_HTTP_Plugin_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin{}
	mi := &file_corev1_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7}
}

func (x *Service_Spec_Config_HTTP_Plugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Plugin) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Plugin) GetPhase() Service_Spec_Config_HTTP_Plugin_Phase {
	if x != nil {
		return x.Phase
	}
	return Service_Spec_Config_HTTP_Plugin_PHASE_UNSET
}

func (x *Service_Spec_Config_HTTP_Plugin) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin) GetType() isService_Spec_Config_HTTP_Plugin_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin) GetExtProc() *Service_Spec_Config_HTTP_Plugin_ExtProc {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_ExtProc_); ok {
			return x.ExtProc
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin) GetLua() *Service_Spec_Config_HTTP_Plugin_Lua {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_Lua_); ok {
			return x.Lua
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin) GetDirect() *Service_Spec_Config_HTTP_Plugin_Direct {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_Direct_); ok {
			return x.Direct
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin) GetRateLimit() *Service_Spec_Config_HTTP_Plugin_RateLimit {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_RateLimit_); ok {
			return x.RateLimit
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin) GetCache() *Service_Spec_Config_HTTP_Plugin_Cache {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_Cache_); ok {
			return x.Cache
		}
	}
	return nil
}

type isService_Spec_Config_HTTP_Plugin_Type interface {
	isService_Spec_Config_HTTP_Plugin_Type()
}

type Service_Spec_Config_HTTP_Plugin_ExtProc_ struct {
	ExtProc *Service_Spec_Config_HTTP_Plugin_ExtProc `protobuf:"bytes,5,opt,name=extProc,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_Lua_ struct {
	Lua *Service_Spec_Config_HTTP_Plugin_Lua `protobuf:"bytes,6,opt,name=lua,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_Direct_ struct {
	Direct *Service_Spec_Config_HTTP_Plugin_Direct `protobuf:"bytes,7,opt,name=direct,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_ struct {
	RateLimit *Service_Spec_Config_HTTP_Plugin_RateLimit `protobuf:"bytes,8,opt,name=rateLimit,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_Cache_ struct {
	Cache *Service_Spec_Config_HTTP_Plugin_Cache `protobuf:"bytes,9,opt,name=cache,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Plugin_ExtProc_) isService_Spec_Config_HTTP_Plugin_Type() {}

func (*Service_Spec_Config_HTTP_Plugin_Lua_) isService_Spec_Config_HTTP_Plugin_Type() {}

func (*Service_Spec_Config_HTTP_Plugin_Direct_) isService_Spec_Config_HTTP_Plugin_Type() {}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_) isService_Spec_Config_HTTP_Plugin_Type() {}

func (*Service_Spec_Config_HTTP_Plugin_Cache_) isService_Spec_Config_HTTP_Plugin_Type() {}

type Service_Spec_Config_HTTP_Visibility struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Capture the request body
	EnableRequestBody bool `protobuf:"varint,1,opt,name=enableRequestBody,proto3" json:"enableRequestBody,omitempty"`
	// Capture the request body map, currently JSON
	EnableRequestBodyMap bool `protobuf:"varint,2,opt,name=enableRequestBodyMap,proto3" json:"enableRequestBodyMap,omitempty"`
	// Capture the response body
	EnableResponseBody bool `protobuf:"varint,3,opt,name=enableResponseBody,proto3" json:"enableResponseBody,omitempty"`
	// Capture the response body map, currently JSON
	EnableResponseBodyMap     bool     `protobuf:"varint,4,opt,name=enableResponseBodyMap,proto3" json:"enableResponseBodyMap,omitempty"`
	IncludeRequestHeaders     []string `protobuf:"bytes,5,rep,name=includeRequestHeaders,proto3" json:"includeRequestHeaders,omitempty"`
	IncludeResponseHeaders    []string `protobuf:"bytes,6,rep,name=includeResponseHeaders,proto3" json:"includeResponseHeaders,omitempty"`
	IncludeAllRequestHeaders  bool     `protobuf:"varint,7,opt,name=includeAllRequestHeaders,proto3" json:"includeAllRequestHeaders,omitempty"`
	IncludeAllResponseHeaders bool     `protobuf:"varint,8,opt,name=includeAllResponseHeaders,proto3" json:"includeAllResponseHeaders,omitempty"`
	ExcludeRequestHeaders     []string `protobuf:"bytes,9,rep,name=excludeRequestHeaders,proto3" json:"excludeRequestHeaders,omitempty"`
	ExcludeResponseHeaders    []string `protobuf:"bytes,10,rep,name=excludeResponseHeaders,proto3" json:"excludeResponseHeaders,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Visibility) Reset() {
	*x = Service_Spec_Config_HTTP_Visibility{}
	mi := &file_corev1_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Visibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Visibility) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Visibility) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Visibility.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Visibility) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 8}
}

func (x *Service_Spec_Config_HTTP_Visibility) GetEnableRequestBody() bool {
	if x != nil {
		return x.EnableRequestBody
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Visibility) GetEnableRequestBodyMap() bool {
	if x != nil {
		return x.EnableRequestBodyMap
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Visibility) GetEnableResponseBody() bool {
	if x != nil {
		return x.EnableResponseBody
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Visibility) GetEnableResponseBodyMap() bool {
	if x != nil {
		return x.EnableResponseBodyMap
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Visibility) GetIncludeRequestHeaders() []string {
	if x != nil {
		return x.IncludeRequestHeaders
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Visibility) GetIncludeResponseHeaders() []string {
	if x != nil {
		return x.IncludeResponseHeaders
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Visibility) GetIncludeAllRequestHeaders() bool {
	if x != nil {
		return x.IncludeAllRequestHeaders
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Visibility) GetIncludeAllResponseHeaders() bool {
	if x != nil {
		return x.IncludeAllResponseHeaders
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Visibility) GetExcludeRequestHeaders() []string {
	if x != nil {
		return x.ExcludeRequestHeaders
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Visibility) GetExcludeResponseHeaders() []string {
	if x != nil {
		return x.ExcludeResponseHeaders
	}
	return nil
}

type Service_Spec_Config_HTTP_Auth_Bearer struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Auth_Bearer_FromSecret
	Type          isService_Spec_Config_HTTP_Auth_Bearer_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_Bearer) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_Bearer{}
	mi := &file_corev1_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_Bearer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_Bearer) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_Bearer) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_Bearer.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_Bearer) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 0}
}

func (x *Service_Spec_Config_HTTP_Auth_Bearer) GetType() isService_Spec_Config_HTTP_Auth_Bearer_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth_Bearer) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Bearer_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Auth_Bearer_Type interface {
	isService_Spec_Config_HTTP_Auth_Bearer_Type()
}

type Service_Spec_Config_HTTP_Auth_Bearer_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Auth_Bearer_FromSecret) isService_Spec_Config_HTTP_Auth_Bearer_Type() {
}

type Service_Spec_Config_HTTP_Auth_Basic struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Username is the username value of HTTP basic authentication
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password is the password value of HTTP basic authentication
	Password      *Service_Spec_Config_HTTP_Auth_Basic_Password `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_Basic) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_Basic{}
	mi := &file_corev1_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_Basic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_Basic) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_Basic) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_Basic.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_Basic) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 1}
}

func (x *Service_Spec_Config_HTTP_Auth_Basic) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Auth_Basic) GetPassword() *Service_Spec_Config_HTTP_Auth_Basic_Password {
	if x != nil {
		return x.Password
	}
	return nil
}

type Service_Spec_Config_HTTP_Auth_Custom struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Header is the name of the HTTP header (e.g. "X-Custom-Auth")
	Header string `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Value is the value of the header
	Value         *Service_Spec_Config_HTTP_Auth_Custom_Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_Custom) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_Custom{}
	mi := &file_corev1_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_Custom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_Custom) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_Custom) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_Custom.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_Custom) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 2}
}

func (x *Service_Spec_Config_HTTP_Auth_Custom) GetHeader() string {
	if x != nil {
		return x.Header
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Auth_Custom) GetValue() *Service_Spec_Config_HTTP_Auth_Custom_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientID sets the OAuth2 client ID
	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	// ClientSecret sets the OAuth2 client secret
	ClientSecret *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	// TokenURL sets the token URL endpoint
	TokenURL string `protobuf:"bytes,3,opt,name=tokenURL,proto3" json:"tokenURL,omitempty"`
	// Scopes is the list of OAuth2 scopes
	Scopes        []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials{}
	mi := &file_corev1_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 3}
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) GetClientSecret() *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) GetTokenURL() string {
	if x != nil {
		return x.TokenURL
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type Service_Spec_Config_HTTP_Auth_Sigv4 struct {
	state           protoimpl.MessageState                               `protogen:"open.v1"`
	AccessKeyID     string                                               `protobuf:"bytes,1,opt,name=accessKeyID,proto3" json:"accessKeyID,omitempty"`
	SecretAccessKey *Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey `protobuf:"bytes,2,opt,name=secretAccessKey,proto3" json:"secretAccessKey,omitempty"`
	Region          string                                               `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	Service         string                                               `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_Sigv4{}
	mi := &file_corev1_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_Sigv4) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_Sigv4.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_Sigv4) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 4}
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4) GetAccessKeyID() string {
	if x != nil {
		return x.AccessKeyID
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4) GetSecretAccessKey() *Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey {
	if x != nil {
		return x.SecretAccessKey
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type Service_Spec_Config_HTTP_Auth_Basic_Password struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Auth_Basic_Password_FromSecret
	Type          isService_Spec_Config_HTTP_Auth_Basic_Password_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_Basic_Password) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_Basic_Password{}
	mi := &file_corev1_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_Basic_Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_Basic_Password) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_Basic_Password) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_Basic_Password.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_Basic_Password) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 1, 0}
}

func (x *Service_Spec_Config_HTTP_Auth_Basic_Password) GetType() isService_Spec_Config_HTTP_Auth_Basic_Password_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth_Basic_Password) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Basic_Password_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Auth_Basic_Password_Type interface {
	isService_Spec_Config_HTTP_Auth_Basic_Password_Type()
}

type Service_Spec_Config_HTTP_Auth_Basic_Password_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Auth_Basic_Password_FromSecret) isService_Spec_Config_HTTP_Auth_Basic_Password_Type() {
}

type Service_Spec_Config_HTTP_Auth_Custom_Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Auth_Custom_Value_FromSecret
	Type          isService_Spec_Config_HTTP_Auth_Custom_Value_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_Custom_Value) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_Custom_Value{}
	mi := &file_corev1_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_Custom_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_Custom_Value) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_Custom_Value) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_Custom_Value.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_Custom_Value) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 2, 0}
}

func (x *Service_Spec_Config_HTTP_Auth_Custom_Value) GetType() isService_Spec_Config_HTTP_Auth_Custom_Value_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth_Custom_Value) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Custom_Value_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Auth_Custom_Value_Type interface {
	isService_Spec_Config_HTTP_Auth_Custom_Value_Type()
}

type Service_Spec_Config_HTTP_Auth_Custom_Value_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Auth_Custom_Value_FromSecret) isService_Spec_Config_HTTP_Auth_Custom_Value_Type() {
}

type Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_FromSecret
	Type          isService_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret{}
	mi := &file_corev1_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 3, 0}
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret) GetType() isService_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_Type interface {
	isService_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_Type()
}

type Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_FromSecret) isService_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_Type() {
}

type Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_FromSecret
	Type          isService_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey) Reset() {
	*x = Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey{}
	mi := &file_corev1_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 1, 4, 0}
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey) GetType() isService_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_Type interface {
	isService_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_Type()
}

type Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_FromSecret) isService_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_Type() {
}

type Service_Spec_Config_HTTP_Body_Validation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Body_Validation_JsonSchema
	Type          isService_Spec_Config_HTTP_Body_Validation_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Body_Validation) Reset() {
	*x = Service_Spec_Config_HTTP_Body_Validation{}
	mi := &file_corev1_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Body_Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Body_Validation) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Body_Validation) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Body_Validation.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Body_Validation) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 3, 0}
}

func (x *Service_Spec_Config_HTTP_Body_Validation) GetType() isService_Spec_Config_HTTP_Body_Validation_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Body_Validation) GetJsonSchema() *Service_Spec_Config_HTTP_Body_Validation_JSONSchema {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Body_Validation_JsonSchema); ok {
			return x.JsonSchema
		}
	}
	return nil
}

type isService_Spec_Config_HTTP_Body_Validation_Type interface {
	isService_Spec_Config_HTTP_Body_Validation_Type()
}

type Service_Spec_Config_HTTP_Body_Validation_JsonSchema struct {
	JsonSchema *Service_Spec_Config_HTTP_Body_Validation_JSONSchema `protobuf:"bytes,1,opt,name=jsonSchema,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Body_Validation_JsonSchema) isService_Spec_Config_HTTP_Body_Validation_Type() {
}

type Service_Spec_Config_HTTP_Body_Validation_JSONSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Body_Validation_JSONSchema_Inline
	Type          isService_Spec_Config_HTTP_Body_Validation_JSONSchema_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Body_Validation_JSONSchema) Reset() {
	*x = Service_Spec_Config_HTTP_Body_Validation_JSONSchema{}
	mi := &file_corev1_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Body_Validation_JSONSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Body_Validation_JSONSchema) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Body_Validation_JSONSchema) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Body_Validation_JSONSchema.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Body_Validation_JSONSchema) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 3, 0, 0}
}

func (x *Service_Spec_Config_HTTP_Body_Validation_JSONSchema) GetType() isService_Spec_Config_HTTP_Body_Validation_JSONSchema_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Body_Validation_JSONSchema) GetInline() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Body_Validation_JSONSchema_Inline); ok {
			return x.Inline
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Body_Validation_JSONSchema_Type interface {
	isService_Spec_Config_HTTP_Body_Validation_JSONSchema_Type()
}

type Service_Spec_Config_HTTP_Body_Validation_JSONSchema_Inline struct {
	Inline string `protobuf:"bytes,1,opt,name=inline,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Body_Validation_JSONSchema_Inline) isService_Spec_Config_HTTP_Body_Validation_JSONSchema_Type() {
}

type Service_Spec_Config_HTTP_Header_KeyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Key is the header's name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Value is the header's value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Append appends the header value instead of
	// setting/overwriting/replacing it which is the default behavior.
	Append        bool `protobuf:"varint,3,opt,name=append,proto3" json:"append,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Header_KeyValue) Reset() {
	*x = Service_Spec_Config_HTTP_Header_KeyValue{}
	mi := &file_corev1_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Header_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Header_KeyValue) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Header_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Header_KeyValue.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Header_KeyValue) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 4, 0}
}

func (x *Service_Spec_Config_HTTP_Header_KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Header_KeyValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Header_KeyValue) GetAppend() bool {
	if x != nil {
		return x.Append
	}
	return false
}

type Service_Spec_Config_HTTP_Response_Direct struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	StatusCode  int32                  `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	ContentType string                 `protobuf:"bytes,2,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Response_Direct_Inline
	//	*Service_Spec_Config_HTTP_Response_Direct_InlineBytes
	Type          isService_Spec_Config_HTTP_Response_Direct_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Response_Direct) Reset() {
	*x = Service_Spec_Config_HTTP_Response_Direct{}
	mi := &file_corev1_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Response_Direct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Response_Direct) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Response_Direct) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Response_Direct.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Response_Direct) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 5, 0}
}

func (x *Service_Spec_Config_HTTP_Response_Direct) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Response_Direct) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Response_Direct) GetType() isService_Spec_Config_HTTP_Response_Direct_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Response_Direct) GetInline() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Response_Direct_Inline); ok {
			return x.Inline
		}
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Response_Direct) GetInlineBytes() []byte {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Response_Direct_InlineBytes); ok {
			return x.InlineBytes
		}
	}
	return nil
}

type isService_Spec_Config_HTTP_Response_Direct_Type interface {
	isService_Spec_Config_HTTP_Response_Direct_Type()
}

type Service_Spec_Config_HTTP_Response_Direct_Inline struct {
	Inline string `protobuf:"bytes,3,opt,name=inline,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Response_Direct_InlineBytes struct {
	InlineBytes []byte `protobuf:"bytes,4,opt,name=inlineBytes,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Response_Direct_Inline) isService_Spec_Config_HTTP_Response_Direct_Type() {
}

func (*Service_Spec_Config_HTTP_Response_Direct_InlineBytes) isService_Spec_Config_HTTP_Response_Direct_Type() {
}

type Service_Spec_Config_HTTP_Plugin_ExtProc struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Plugin_ExtProc_Address
	//	*Service_Spec_Config_HTTP_Plugin_ExtProc_Container_
	Type           isService_Spec_Config_HTTP_Plugin_ExtProc_Type          `protobuf_oneof:"type"`
	ProcessingMode *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode `protobuf:"bytes,3,opt,name=processingMode,proto3" json:"processingMode,omitempty"`
	MessageTimeout *metav1.Duration                                        `protobuf:"bytes,4,opt,name=messageTimeout,proto3" json:"messageTimeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_ExtProc{}
	mi := &file_corev1_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_ExtProc) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_ExtProc.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_ExtProc) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 0}
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) GetType() isService_Spec_Config_HTTP_Plugin_ExtProc_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) GetAddress() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_ExtProc_Address); ok {
			return x.Address
		}
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) GetContainer() *Service_Spec_Config_HTTP_Plugin_ExtProc_Container {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_ExtProc_Container_); ok {
			return x.Container
		}
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) GetProcessingMode() *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode {
	if x != nil {
		return x.ProcessingMode
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc) GetMessageTimeout() *metav1.Duration {
	if x != nil {
		return x.MessageTimeout
	}
	return nil
}

type isService_Spec_Config_HTTP_Plugin_ExtProc_Type interface {
	isService_Spec_Config_HTTP_Plugin_ExtProc_Type()
}

type Service_Spec_Config_HTTP_Plugin_ExtProc_Address struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_ExtProc_Container_ struct {
	Container *Service_Spec_Config_HTTP_Plugin_ExtProc_Container `protobuf:"bytes,2,opt,name=container,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Plugin_ExtProc_Address) isService_Spec_Config_HTTP_Plugin_ExtProc_Type() {
}

func (*Service_Spec_Config_HTTP_Plugin_ExtProc_Container_) isService_Spec_Config_HTTP_Plugin_ExtProc_Type() {
}

type Service_Spec_Config_HTTP_Plugin_Lua struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Plugin_Lua_Inline
	Type          isService_Spec_Config_HTTP_Plugin_Lua_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_Lua) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_Lua{}
	mi := &file_corev1_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_Lua) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_Lua) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_Lua) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_Lua.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_Lua) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 1}
}

func (x *Service_Spec_Config_HTTP_Plugin_Lua) GetType() isService_Spec_Config_HTTP_Plugin_Lua_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_Lua) GetInline() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_Lua_Inline); ok {
			return x.Inline
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Plugin_Lua_Type interface {
	isService_Spec_Config_HTTP_Plugin_Lua_Type()
}

type Service_Spec_Config_HTTP_Plugin_Lua_Inline struct {
	Inline string `protobuf:"bytes,1,opt,name=inline,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Plugin_Lua_Inline) isService_Spec_Config_HTTP_Plugin_Lua_Type() {}

type Service_Spec_Config_HTTP_Plugin_Direct struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	StatusCode    int32                                        `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Body          *Service_Spec_Config_HTTP_Plugin_Direct_Body `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Headers       map[string]string                            `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_Direct{}
	mi := &file_corev1_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_Direct) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_Direct) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_Direct.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_Direct) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 2}
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct) GetBody() *Service_Spec_Config_HTTP_Plugin_Direct_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type Service_Spec_Config_HTTP_Plugin_RateLimit struct {
	state         protoimpl.MessageState                          `protogen:"open.v1"`
	StatusCode    int32                                           `protobuf:"varint,2,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	Body          *Service_Spec_Config_HTTP_Plugin_RateLimit_Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Key           *Service_Spec_Config_HTTP_Plugin_RateLimit_Key  `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Limit         int64                                           `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Window        *metav1.Duration                                `protobuf:"bytes,6,opt,name=window,proto3" json:"window,omitempty"`
	Headers       map[string]string                               `protobuf:"bytes,7,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_RateLimit{}
	mi := &file_corev1_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_RateLimit.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_RateLimit) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 3}
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) GetBody() *Service_Spec_Config_HTTP_Plugin_RateLimit_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) GetKey() *Service_Spec_Config_HTTP_Plugin_RateLimit_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) GetWindow() *metav1.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type Service_Spec_Config_HTTP_Plugin_Cache struct {
	state              protoimpl.MessageState                     `protogen:"open.v1"`
	Key                *Service_Spec_Config_HTTP_Plugin_Cache_Key `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Ttl                *metav1.Duration                           `protobuf:"bytes,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	MaxSize            uint64                                     `protobuf:"varint,3,opt,name=maxSize,proto3" json:"maxSize,omitempty"`
	UseXCacheHeader    bool                                       `protobuf:"varint,4,opt,name=useXCacheHeader,proto3" json:"useXCacheHeader,omitempty"`
	AllowUnsafeMethods bool                                       `protobuf:"varint,5,opt,name=allowUnsafeMethods,proto3" json:"allowUnsafeMethods,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_Cache{}
	mi := &file_corev1_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_Cache) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_Cache.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_Cache) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 4}
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) GetKey() *Service_Spec_Config_HTTP_Plugin_Cache_Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) GetTtl() *metav1.Duration {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) GetMaxSize() uint64 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) GetUseXCacheHeader() bool {
	if x != nil {
		return x.UseXCacheHeader
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache) GetAllowUnsafeMethods() bool {
	if x != nil {
		return x.AllowUnsafeMethods
	}
	return false
}

type Service_Spec_Config_HTTP_Plugin_ExtProc_Container struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         string                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_Container) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_ExtProc_Container{}
	mi := &file_corev1_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_ExtProc_Container) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_Container) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_ExtProc_Container.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_ExtProc_Container) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 0, 0}
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_Container) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode struct {
	state              protoimpl.MessageState                                                `protogen:"open.v1"`
	RequestHeaderMode  Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode `protobuf:"varint,1,opt,name=requestHeaderMode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode" json:"requestHeaderMode,omitempty"`
	ResponseHeaderMode Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode `protobuf:"varint,2,opt,name=responseHeaderMode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode" json:"responseHeaderMode,omitempty"`
	RequestBodyMode    Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode   `protobuf:"varint,3,opt,name=requestBodyMode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode" json:"requestBodyMode,omitempty"`
	ResponseBodyMode   Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode   `protobuf:"varint,4,opt,name=responseBodyMode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode" json:"responseBodyMode,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode{}
	mi := &file_corev1_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 0, 1}
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) GetRequestHeaderMode() Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode {
	if x != nil {
		return x.RequestHeaderMode
	}
	return Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HEADER_SEND_MODE_UNSET
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) GetResponseHeaderMode() Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode {
	if x != nil {
		return x.ResponseHeaderMode
	}
	return Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HEADER_SEND_MODE_UNSET
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) GetRequestBodyMode() Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode {
	if x != nil {
		return x.RequestBodyMode
	}
	return Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BODY_SEND_MODE_UNSET
}

func (x *Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode) GetResponseBodyMode() Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode {
	if x != nil {
		return x.ResponseBodyMode
	}
	return Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BODY_SEND_MODE_UNSET
}

type Service_Spec_Config_HTTP_Plugin_Direct_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Plugin_Direct_Body_Inline
	//	*Service_Spec_Config_HTTP_Plugin_Direct_Body_InlineBytes
	Type          isService_Spec_Config_HTTP_Plugin_Direct_Body_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct_Body) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_Direct_Body{}
	mi := &file_corev1_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_Direct_Body) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_Direct_Body) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_Direct_Body.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_Direct_Body) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 2, 0}
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct_Body) GetType() isService_Spec_Config_HTTP_Plugin_Direct_Body_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct_Body) GetInline() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_Direct_Body_Inline); ok {
			return x.Inline
		}
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Plugin_Direct_Body) GetInlineBytes() []byte {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_Direct_Body_InlineBytes); ok {
			return x.InlineBytes
		}
	}
	return nil
}

type isService_Spec_Config_HTTP_Plugin_Direct_Body_Type interface {
	isService_Spec_Config_HTTP_Plugin_Direct_Body_Type()
}

type Service_Spec_Config_HTTP_Plugin_Direct_Body_Inline struct {
	Inline string `protobuf:"bytes,1,opt,name=inline,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_Direct_Body_InlineBytes struct {
	InlineBytes []byte `protobuf:"bytes,2,opt,name=inlineBytes,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Plugin_Direct_Body_Inline) isService_Spec_Config_HTTP_Plugin_Direct_Body_Type() {
}

func (*Service_Spec_Config_HTTP_Plugin_Direct_Body_InlineBytes) isService_Spec_Config_HTTP_Plugin_Direct_Body_Type() {
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_Body struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_Inline
	//	*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_InlineBytes
	Type          isService_Spec_Config_HTTP_Plugin_RateLimit_Body_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Body) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_RateLimit_Body{}
	mi := &file_corev1_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Body) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Body) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_RateLimit_Body.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Body) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 3, 0}
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Body) GetType() isService_Spec_Config_HTTP_Plugin_RateLimit_Body_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Body) GetInline() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_Inline); ok {
			return x.Inline
		}
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Body) GetInlineBytes() []byte {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_InlineBytes); ok {
			return x.InlineBytes
		}
	}
	return nil
}

type isService_Spec_Config_HTTP_Plugin_RateLimit_Body_Type interface {
	isService_Spec_Config_HTTP_Plugin_RateLimit_Body_Type()
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_Body_Inline struct {
	Inline string `protobuf:"bytes,1,opt,name=inline,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_Body_InlineBytes struct {
	InlineBytes []byte `protobuf:"bytes,2,opt,name=inlineBytes,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_Inline) isService_Spec_Config_HTTP_Plugin_RateLimit_Body_Type() {
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_InlineBytes) isService_Spec_Config_HTTP_Plugin_RateLimit_Body_Type() {
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_Key struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_Eval
	//	*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerSession
	//	*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerUser
	Type          isService_Spec_Config_HTTP_Plugin_RateLimit_Key_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Key) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_RateLimit_Key{}
	mi := &file_corev1_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Key) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Key) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_RateLimit_Key.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Key) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 3, 1}
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Key) GetType() isService_Spec_Config_HTTP_Plugin_RateLimit_Key_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Key) GetEval() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_Eval); ok {
			return x.Eval
		}
	}
	return ""
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Key) GetPerSession() bool {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerSession); ok {
			return x.PerSession
		}
	}
	return false
}

func (x *Service_Spec_Config_HTTP_Plugin_RateLimit_Key) GetPerUser() bool {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerUser); ok {
			return x.PerUser
		}
	}
	return false
}

type isService_Spec_Config_HTTP_Plugin_RateLimit_Key_Type interface {
	isService_Spec_Config_HTTP_Plugin_RateLimit_Key_Type()
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_Key_Eval struct {
	Eval string `protobuf:"bytes,1,opt,name=eval,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerSession struct {
	PerSession bool `protobuf:"varint,2,opt,name=perSession,proto3,oneof"`
}

type Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerUser struct {
	PerUser bool `protobuf:"varint,3,opt,name=perUser,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_Eval) isService_Spec_Config_HTTP_Plugin_RateLimit_Key_Type() {
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerSession) isService_Spec_Config_HTTP_Plugin_RateLimit_Key_Type() {
}

func (*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerUser) isService_Spec_Config_HTTP_Plugin_RateLimit_Key_Type() {
}

type Service_Spec_Config_HTTP_Plugin_Cache_Key struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_HTTP_Plugin_Cache_Key_Eval
	Type          isService_Spec_Config_HTTP_Plugin_Cache_Key_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache_Key) Reset() {
	*x = Service_Spec_Config_HTTP_Plugin_Cache_Key{}
	mi := &file_corev1_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache_Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_HTTP_Plugin_Cache_Key) ProtoMessage() {}

func (x *Service_Spec_Config_HTTP_Plugin_Cache_Key) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_HTTP_Plugin_Cache_Key.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_HTTP_Plugin_Cache_Key) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 0, 7, 4, 0}
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache_Key) GetType() isService_Spec_Config_HTTP_Plugin_Cache_Key_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_HTTP_Plugin_Cache_Key) GetEval() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_HTTP_Plugin_Cache_Key_Eval); ok {
			return x.Eval
		}
	}
	return ""
}

type isService_Spec_Config_HTTP_Plugin_Cache_Key_Type interface {
	isService_Spec_Config_HTTP_Plugin_Cache_Key_Type()
}

type Service_Spec_Config_HTTP_Plugin_Cache_Key_Eval struct {
	Eval string `protobuf:"bytes,1,opt,name=eval,proto3,oneof"`
}

func (*Service_Spec_Config_HTTP_Plugin_Cache_Key_Eval) isService_Spec_Config_HTTP_Plugin_Cache_Key_Type() {
}

type Service_Spec_Config_SSH_Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_SSH_Auth_Password_
	//	*Service_Spec_Config_SSH_Auth_PrivateKey_
	Type          isService_Spec_Config_SSH_Auth_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_SSH_Auth) Reset() {
	*x = Service_Spec_Config_SSH_Auth{}
	mi := &file_corev1_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_SSH_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_SSH_Auth) ProtoMessage() {}

func (x *Service_Spec_Config_SSH_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_SSH_Auth.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_SSH_Auth) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 1, 0}
}

func (x *Service_Spec_Config_SSH_Auth) GetType() isService_Spec_Config_SSH_Auth_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_SSH_Auth) GetPassword() *Service_Spec_Config_SSH_Auth_Password {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_SSH_Auth_Password_); ok {
			return x.Password
		}
	}
	return nil
}

func (x *Service_Spec_Config_SSH_Auth) GetPrivateKey() *Service_Spec_Config_SSH_Auth_PrivateKey {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_SSH_Auth_PrivateKey_); ok {
			return x.PrivateKey
		}
	}
	return nil
}

type isService_Spec_Config_SSH_Auth_Type interface {
	isService_Spec_Config_SSH_Auth_Type()
}

type Service_Spec_Config_SSH_Auth_Password_ struct {
	// Password sets the password used for authentication. Only one of
	// Password or PrivateKey is used.
	Password *Service_Spec_Config_SSH_Auth_Password `protobuf:"bytes,1,opt,name=password,proto3,oneof"`
}

type Service_Spec_Config_SSH_Auth_PrivateKey_ struct {
	// PrivateKey sets the private key used for authentication. Only one
	// of Password or PrivateKey is used.
	PrivateKey *Service_Spec_Config_SSH_Auth_PrivateKey `protobuf:"bytes,2,opt,name=privateKey,proto3,oneof"`
}

func (*Service_Spec_Config_SSH_Auth_Password_) isService_Spec_Config_SSH_Auth_Type() {}

func (*Service_Spec_Config_SSH_Auth_PrivateKey_) isService_Spec_Config_SSH_Auth_Type() {}

type Service_Spec_Config_SSH_UpstreamHostKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_SSH_UpstreamHostKey_InsecureIgnoreHostKey
	//	*Service_Spec_Config_SSH_UpstreamHostKey_Key
	Type          isService_Spec_Config_SSH_UpstreamHostKey_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_SSH_UpstreamHostKey) Reset() {
	*x = Service_Spec_Config_SSH_UpstreamHostKey{}
	mi := &file_corev1_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_SSH_UpstreamHostKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_SSH_UpstreamHostKey) ProtoMessage() {}

func (x *Service_Spec_Config_SSH_UpstreamHostKey) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_SSH_UpstreamHostKey.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_SSH_UpstreamHostKey) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 1, 1}
}

func (x *Service_Spec_Config_SSH_UpstreamHostKey) GetType() isService_Spec_Config_SSH_UpstreamHostKey_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_SSH_UpstreamHostKey) GetInsecureIgnoreHostKey() bool {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_SSH_UpstreamHostKey_InsecureIgnoreHostKey); ok {
			return x.InsecureIgnoreHostKey
		}
	}
	return false
}

func (x *Service_Spec_Config_SSH_UpstreamHostKey) GetKey() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_SSH_UpstreamHostKey_Key); ok {
			return x.Key
		}
	}
	return ""
}

type isService_Spec_Config_SSH_UpstreamHostKey_Type interface {
	isService_Spec_Config_SSH_UpstreamHostKey_Type()
}

type Service_Spec_Config_SSH_UpstreamHostKey_InsecureIgnoreHostKey struct {
	// InsecureIgnoreHostKey ignores verifying the upstream server
	// public key during the handshake. This is extremely NOT
	// recommended for use in production
	InsecureIgnoreHostKey bool `protobuf:"varint,1,opt,name=insecureIgnoreHostKey,proto3,oneof"`
}

type Service_Spec_Config_SSH_UpstreamHostKey_Key struct {
	// Key specifies the upstream public key
	Key string `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

func (*Service_Spec_Config_SSH_UpstreamHostKey_InsecureIgnoreHostKey) isService_Spec_Config_SSH_UpstreamHostKey_Type() {
}

func (*Service_Spec_Config_SSH_UpstreamHostKey_Key) isService_Spec_Config_SSH_UpstreamHostKey_Type() {
}

type Service_Spec_Config_SSH_Visibility struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	DisableSessionRecording     bool                   `protobuf:"varint,1,opt,name=disableSessionRecording,proto3" json:"disableSessionRecording,omitempty"`
	EnableSessionStdinRecording bool                   `protobuf:"varint,2,opt,name=enableSessionStdinRecording,proto3" json:"enableSessionStdinRecording,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Service_Spec_Config_SSH_Visibility) Reset() {
	*x = Service_Spec_Config_SSH_Visibility{}
	mi := &file_corev1_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_SSH_Visibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_SSH_Visibility) ProtoMessage() {}

func (x *Service_Spec_Config_SSH_Visibility) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_SSH_Visibility.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_SSH_Visibility) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 1, 2}
}

func (x *Service_Spec_Config_SSH_Visibility) GetDisableSessionRecording() bool {
	if x != nil {
		return x.DisableSessionRecording
	}
	return false
}

func (x *Service_Spec_Config_SSH_Visibility) GetEnableSessionStdinRecording() bool {
	if x != nil {
		return x.EnableSessionStdinRecording
	}
	return false
}

type Service_Spec_Config_SSH_Auth_Password struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_SSH_Auth_Password_FromSecret
	Type          isService_Spec_Config_SSH_Auth_Password_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_SSH_Auth_Password) Reset() {
	*x = Service_Spec_Config_SSH_Auth_Password{}
	mi := &file_corev1_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_SSH_Auth_Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_SSH_Auth_Password) ProtoMessage() {}

func (x *Service_Spec_Config_SSH_Auth_Password) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_SSH_Auth_Password.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_SSH_Auth_Password) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 1, 0, 0}
}

func (x *Service_Spec_Config_SSH_Auth_Password) GetType() isService_Spec_Config_SSH_Auth_Password_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_SSH_Auth_Password) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_SSH_Auth_Password_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_SSH_Auth_Password_Type interface {
	isService_Spec_Config_SSH_Auth_Password_Type()
}

type Service_Spec_Config_SSH_Auth_Password_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_SSH_Auth_Password_FromSecret) isService_Spec_Config_SSH_Auth_Password_Type() {
}

type Service_Spec_Config_SSH_Auth_PrivateKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_SSH_Auth_PrivateKey_FromSecret
	Type          isService_Spec_Config_SSH_Auth_PrivateKey_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_SSH_Auth_PrivateKey) Reset() {
	*x = Service_Spec_Config_SSH_Auth_PrivateKey{}
	mi := &file_corev1_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_SSH_Auth_PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_SSH_Auth_PrivateKey) ProtoMessage() {}

func (x *Service_Spec_Config_SSH_Auth_PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_SSH_Auth_PrivateKey.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_SSH_Auth_PrivateKey) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 1, 0, 1}
}

func (x *Service_Spec_Config_SSH_Auth_PrivateKey) GetType() isService_Spec_Config_SSH_Auth_PrivateKey_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_SSH_Auth_PrivateKey) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_SSH_Auth_PrivateKey_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_SSH_Auth_PrivateKey_Type interface {
	isService_Spec_Config_SSH_Auth_PrivateKey_Type()
}

type Service_Spec_Config_SSH_Auth_PrivateKey_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_SSH_Auth_PrivateKey_FromSecret) isService_Spec_Config_SSH_Auth_PrivateKey_Type() {
}

type Service_Spec_Config_Postgres_Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Postgres_Auth_Password_
	Type          isService_Spec_Config_Postgres_Auth_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Postgres_Auth) Reset() {
	*x = Service_Spec_Config_Postgres_Auth{}
	mi := &file_corev1_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Postgres_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Postgres_Auth) ProtoMessage() {}

func (x *Service_Spec_Config_Postgres_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Postgres_Auth.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Postgres_Auth) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 2, 0}
}

func (x *Service_Spec_Config_Postgres_Auth) GetType() isService_Spec_Config_Postgres_Auth_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Postgres_Auth) GetPassword() *Service_Spec_Config_Postgres_Auth_Password {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Postgres_Auth_Password_); ok {
			return x.Password
		}
	}
	return nil
}

type isService_Spec_Config_Postgres_Auth_Type interface {
	isService_Spec_Config_Postgres_Auth_Type()
}

type Service_Spec_Config_Postgres_Auth_Password_ struct {
	Password *Service_Spec_Config_Postgres_Auth_Password `protobuf:"bytes,1,opt,name=password,proto3,oneof"`
}

func (*Service_Spec_Config_Postgres_Auth_Password_) isService_Spec_Config_Postgres_Auth_Type() {}

type Service_Spec_Config_Postgres_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mode is the authorization mode
	Mode          Service_Spec_Config_Postgres_Authorization_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Config_Postgres_Authorization_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Postgres_Authorization) Reset() {
	*x = Service_Spec_Config_Postgres_Authorization{}
	mi := &file_corev1_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Postgres_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Postgres_Authorization) ProtoMessage() {}

func (x *Service_Spec_Config_Postgres_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Postgres_Authorization.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Postgres_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 2, 1}
}

func (x *Service_Spec_Config_Postgres_Authorization) GetMode() Service_Spec_Config_Postgres_Authorization_Mode {
	if x != nil {
		return x.Mode
	}
	return Service_Spec_Config_Postgres_Authorization_MODE_UNSET
}

type Service_Spec_Config_Postgres_Auth_Password struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Postgres_Auth_Password_FromSecret
	Type          isService_Spec_Config_Postgres_Auth_Password_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Postgres_Auth_Password) Reset() {
	*x = Service_Spec_Config_Postgres_Auth_Password{}
	mi := &file_corev1_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Postgres_Auth_Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Postgres_Auth_Password) ProtoMessage() {}

func (x *Service_Spec_Config_Postgres_Auth_Password) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Postgres_Auth_Password.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Postgres_Auth_Password) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 2, 0, 0}
}

func (x *Service_Spec_Config_Postgres_Auth_Password) GetType() isService_Spec_Config_Postgres_Auth_Password_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Postgres_Auth_Password) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Postgres_Auth_Password_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_Postgres_Auth_Password_Type interface {
	isService_Spec_Config_Postgres_Auth_Password_Type()
}

type Service_Spec_Config_Postgres_Auth_Password_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_Postgres_Auth_Password_FromSecret) isService_Spec_Config_Postgres_Auth_Password_Type() {
}

type Service_Spec_Config_MySQL_Auth struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_MySQL_Auth_Password_
	Type          isService_Spec_Config_MySQL_Auth_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_MySQL_Auth) Reset() {
	*x = Service_Spec_Config_MySQL_Auth{}
	mi := &file_corev1_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_MySQL_Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_MySQL_Auth) ProtoMessage() {}

func (x *Service_Spec_Config_MySQL_Auth) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_MySQL_Auth.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_MySQL_Auth) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 3, 0}
}

func (x *Service_Spec_Config_MySQL_Auth) GetType() isService_Spec_Config_MySQL_Auth_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_MySQL_Auth) GetPassword() *Service_Spec_Config_MySQL_Auth_Password {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_MySQL_Auth_Password_); ok {
			return x.Password
		}
	}
	return nil
}

type isService_Spec_Config_MySQL_Auth_Type interface {
	isService_Spec_Config_MySQL_Auth_Type()
}

type Service_Spec_Config_MySQL_Auth_Password_ struct {
	Password *Service_Spec_Config_MySQL_Auth_Password `protobuf:"bytes,1,opt,name=password,proto3,oneof"`
}

func (*Service_Spec_Config_MySQL_Auth_Password_) isService_Spec_Config_MySQL_Auth_Type() {}

type Service_Spec_Config_MySQL_Auth_Password struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_MySQL_Auth_Password_FromSecret
	Type          isService_Spec_Config_MySQL_Auth_Password_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_MySQL_Auth_Password) Reset() {
	*x = Service_Spec_Config_MySQL_Auth_Password{}
	mi := &file_corev1_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_MySQL_Auth_Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_MySQL_Auth_Password) ProtoMessage() {}

func (x *Service_Spec_Config_MySQL_Auth_Password) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_MySQL_Auth_Password.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_MySQL_Auth_Password) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 3, 0, 0}
}

func (x *Service_Spec_Config_MySQL_Auth_Password) GetType() isService_Spec_Config_MySQL_Auth_Password_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_MySQL_Auth_Password) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_MySQL_Auth_Password_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_MySQL_Auth_Password_Type interface {
	isService_Spec_Config_MySQL_Auth_Password_Type()
}

type Service_Spec_Config_MySQL_Auth_Password_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_MySQL_Auth_Password_FromSecret) isService_Spec_Config_MySQL_Auth_Password_Type() {
}

type Service_Spec_Config_TLS_ClientCertificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_TLS_ClientCertificate_FromSecret
	Type          isService_Spec_Config_TLS_ClientCertificate_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_TLS_ClientCertificate) Reset() {
	*x = Service_Spec_Config_TLS_ClientCertificate{}
	mi := &file_corev1_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_TLS_ClientCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_TLS_ClientCertificate) ProtoMessage() {}

func (x *Service_Spec_Config_TLS_ClientCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_TLS_ClientCertificate.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_TLS_ClientCertificate) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 5, 0}
}

func (x *Service_Spec_Config_TLS_ClientCertificate) GetType() isService_Spec_Config_TLS_ClientCertificate_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_TLS_ClientCertificate) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_TLS_ClientCertificate_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_TLS_ClientCertificate_Type interface {
	isService_Spec_Config_TLS_ClientCertificate_Type()
}

type Service_Spec_Config_TLS_ClientCertificate_FromSecret struct {
	FromSecret string `protobuf:"bytes,2,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_TLS_ClientCertificate_FromSecret) isService_Spec_Config_TLS_ClientCertificate_Type() {
}

type Service_Spec_Config_Kubernetes_BearerToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Kubernetes_BearerToken_FromSecret
	Type          isService_Spec_Config_Kubernetes_BearerToken_Type `protobuf_oneof:"type"`
	TrustedCAs    []string                                          `protobuf:"bytes,2,rep,name=trustedCAs,proto3" json:"trustedCAs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Kubernetes_BearerToken) Reset() {
	*x = Service_Spec_Config_Kubernetes_BearerToken{}
	mi := &file_corev1_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Kubernetes_BearerToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Kubernetes_BearerToken) ProtoMessage() {}

func (x *Service_Spec_Config_Kubernetes_BearerToken) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Kubernetes_BearerToken.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Kubernetes_BearerToken) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 6, 0}
}

func (x *Service_Spec_Config_Kubernetes_BearerToken) GetType() isService_Spec_Config_Kubernetes_BearerToken_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Kubernetes_BearerToken) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Kubernetes_BearerToken_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

func (x *Service_Spec_Config_Kubernetes_BearerToken) GetTrustedCAs() []string {
	if x != nil {
		return x.TrustedCAs
	}
	return nil
}

type isService_Spec_Config_Kubernetes_BearerToken_Type interface {
	isService_Spec_Config_Kubernetes_BearerToken_Type()
}

type Service_Spec_Config_Kubernetes_BearerToken_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_Kubernetes_BearerToken_FromSecret) isService_Spec_Config_Kubernetes_BearerToken_Type() {
}

type Service_Spec_Config_Kubernetes_Kubeconfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Kubernetes_Kubeconfig_FromSecret
	Type isService_Spec_Config_Kubernetes_Kubeconfig_Type `protobuf_oneof:"type"`
	// Context is the kubeconfig context (e.g.
	// "kubernetes-admin@kubernetes")
	Context       string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Kubernetes_Kubeconfig) Reset() {
	*x = Service_Spec_Config_Kubernetes_Kubeconfig{}
	mi := &file_corev1_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Kubernetes_Kubeconfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Kubernetes_Kubeconfig) ProtoMessage() {}

func (x *Service_Spec_Config_Kubernetes_Kubeconfig) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Kubernetes_Kubeconfig.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Kubernetes_Kubeconfig) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 6, 1}
}

func (x *Service_Spec_Config_Kubernetes_Kubeconfig) GetType() isService_Spec_Config_Kubernetes_Kubeconfig_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Kubernetes_Kubeconfig) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Kubernetes_Kubeconfig_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

func (x *Service_Spec_Config_Kubernetes_Kubeconfig) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type isService_Spec_Config_Kubernetes_Kubeconfig_Type interface {
	isService_Spec_Config_Kubernetes_Kubeconfig_Type()
}

type Service_Spec_Config_Kubernetes_Kubeconfig_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_Kubernetes_Kubeconfig_FromSecret) isService_Spec_Config_Kubernetes_Kubeconfig_Type() {
}

type Service_Spec_Config_Upstream_Loadbalance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Endpoints is the list of endpoints
	Endpoints     []*Service_Spec_Config_Upstream_Loadbalance_Endpoint `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Loadbalance) Reset() {
	*x = Service_Spec_Config_Upstream_Loadbalance{}
	mi := &file_corev1_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Loadbalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Loadbalance) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Loadbalance) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Loadbalance.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Loadbalance) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 0}
}

func (x *Service_Spec_Config_Upstream_Loadbalance) GetEndpoints() []*Service_Spec_Config_Upstream_Loadbalance_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type Service_Spec_Config_Upstream_Container struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port is the port exposed by the managed container
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Image is the image URL of the container
	Image string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	// Command overrides the container image's command
	Command []string `protobuf:"bytes,3,rep,name=command,proto3" json:"command,omitempty"`
	// Args is the list of command arguments that override the image
	// arguments
	Args []string `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	// Env is the list of environment variables
	Env []*Service_Spec_Config_Upstream_Container_Env `protobuf:"bytes,5,rep,name=env,proto3" json:"env,omitempty"`
	// Replicas is the number of replicas of this container
	Replicas uint32 `protobuf:"varint,6,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// Credentials sets the credentials if the image is hosted on a
	// private container registry
	Credentials *Service_Spec_Config_Upstream_Container_Credentials `protobuf:"bytes,7,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// ResourceLimit sets the container resource limits
	ResourceLimit *Service_Spec_Config_Upstream_Container_ResourceLimit `protobuf:"bytes,8,opt,name=resourceLimit,proto3" json:"resourceLimit,omitempty"`
	// SecurityContext sets k8s security context related configs
	SecurityContext *Service_Spec_Config_Upstream_Container_SecurityContext `protobuf:"bytes,9,opt,name=securityContext,proto3" json:"securityContext,omitempty"`
	Volumes         []*Service_Spec_Config_Upstream_Container_Volume        `protobuf:"bytes,10,rep,name=volumes,proto3" json:"volumes,omitempty"`
	VolumeMounts    []*Service_Spec_Config_Upstream_Container_VolumeMount   `protobuf:"bytes,11,rep,name=volumeMounts,proto3" json:"volumeMounts,omitempty"`
	LivenessProbe   *Service_Spec_Config_Upstream_Container_Probe           `protobuf:"bytes,12,opt,name=livenessProbe,proto3" json:"livenessProbe,omitempty"`
	ReadinessProbe  *Service_Spec_Config_Upstream_Container_Probe           `protobuf:"bytes,13,opt,name=readinessProbe,proto3" json:"readinessProbe,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container) Reset() {
	*x = Service_Spec_Config_Upstream_Container{}
	mi := &file_corev1_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1}
}

func (x *Service_Spec_Config_Upstream_Container) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Service_Spec_Config_Upstream_Container) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetEnv() []*Service_Spec_Config_Upstream_Container_Env {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetReplicas() uint32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *Service_Spec_Config_Upstream_Container) GetCredentials() *Service_Spec_Config_Upstream_Container_Credentials {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetResourceLimit() *Service_Spec_Config_Upstream_Container_ResourceLimit {
	if x != nil {
		return x.ResourceLimit
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetSecurityContext() *Service_Spec_Config_Upstream_Container_SecurityContext {
	if x != nil {
		return x.SecurityContext
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetVolumes() []*Service_Spec_Config_Upstream_Container_Volume {
	if x != nil {
		return x.Volumes
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetVolumeMounts() []*Service_Spec_Config_Upstream_Container_VolumeMount {
	if x != nil {
		return x.VolumeMounts
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetLivenessProbe() *Service_Spec_Config_Upstream_Container_Probe {
	if x != nil {
		return x.LivenessProbe
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container) GetReadinessProbe() *Service_Spec_Config_Upstream_Container_Probe {
	if x != nil {
		return x.ReadinessProbe
	}
	return nil
}

type Service_Spec_Config_Upstream_Loadbalance_Endpoint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URL is the canonical URL of the upstream.
	// Examples are`http://example.com`, `postgres://pg.default.svc`,
	// `tcp://my-custom-app:9090`,  and
	// `https://api.sandbox.paypal.com`.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// User is the User name if the upstream should be served by an
	// active Connection of a User. If set, that means that the Service
	// is served by any connected client owned by that User and willing
	// to serve the Service.
	User          string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Loadbalance_Endpoint) Reset() {
	*x = Service_Spec_Config_Upstream_Loadbalance_Endpoint{}
	mi := &file_corev1_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Loadbalance_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Loadbalance_Endpoint) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Loadbalance_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Loadbalance_Endpoint.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Loadbalance_Endpoint) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 0, 0}
}

func (x *Service_Spec_Config_Upstream_Loadbalance_Endpoint) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Loadbalance_Endpoint) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type Service_Spec_Config_Upstream_Container_Env struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is  the environment variable key
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Upstream_Container_Env_Value
	//	*Service_Spec_Config_Upstream_Container_Env_FromSecret
	//	*Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef_
	Type          isService_Spec_Config_Upstream_Container_Env_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Env) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Env{}
	mi := &file_corev1_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Env) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Env) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Env) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Env.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Env) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 0}
}

func (x *Service_Spec_Config_Upstream_Container_Env) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_Env) GetType() isService_Spec_Config_Upstream_Container_Env_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Env) GetValue() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Env_Value); ok {
			return x.Value
		}
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_Env) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Env_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_Env) GetKubernetesSecretRef() *Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef_); ok {
			return x.KubernetesSecretRef
		}
	}
	return nil
}

type isService_Spec_Config_Upstream_Container_Env_Type interface {
	isService_Spec_Config_Upstream_Container_Env_Type()
}

type Service_Spec_Config_Upstream_Container_Env_Value struct {
	// Value is the environment variable value
	Value string `protobuf:"bytes,2,opt,name=value,proto3,oneof"`
}

type Service_Spec_Config_Upstream_Container_Env_FromSecret struct {
	// FromSecret gets the value of the environment variable from an
	// Octelium Secret
	FromSecret string `protobuf:"bytes,3,opt,name=fromSecret,proto3,oneof"`
}

type Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef_ struct {
	// KubernetesSecretRef uses a Kubernetes secret as the environment
	// variable value
	KubernetesSecretRef *Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef `protobuf:"bytes,4,opt,name=kubernetesSecretRef,proto3,oneof"`
}

func (*Service_Spec_Config_Upstream_Container_Env_Value) isService_Spec_Config_Upstream_Container_Env_Type() {
}

func (*Service_Spec_Config_Upstream_Container_Env_FromSecret) isService_Spec_Config_Upstream_Container_Env_Type() {
}

func (*Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef_) isService_Spec_Config_Upstream_Container_Env_Type() {
}

type Service_Spec_Config_Upstream_Container_Credentials struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_
	Type          isService_Spec_Config_Upstream_Container_Credentials_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Credentials) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Credentials{}
	mi := &file_corev1_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Credentials) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Credentials.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Credentials) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 1}
}

func (x *Service_Spec_Config_Upstream_Container_Credentials) GetType() isService_Spec_Config_Upstream_Container_Credentials_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Credentials) GetUsernamePassword() *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_); ok {
			return x.UsernamePassword
		}
	}
	return nil
}

type isService_Spec_Config_Upstream_Container_Credentials_Type interface {
	isService_Spec_Config_Upstream_Container_Credentials_Type()
}

type Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_ struct {
	// UsernamePassword uses a username and password to authenticate
	// to the container registry
	UsernamePassword *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword `protobuf:"bytes,1,opt,name=usernamePassword,proto3,oneof"`
}

func (*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_) isService_Spec_Config_Upstream_Container_Credentials_Type() {
}

type Service_Spec_Config_Upstream_Container_ResourceLimit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CPU sets the CPU-related limit
	Cpu *Service_Spec_Config_Upstream_Container_ResourceLimit_CPU `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// Memory sets the memory-related limit
	Memory *Service_Spec_Config_Upstream_Container_ResourceLimit_Memory `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	// Ext represents the map of extended/custom resource limits such as
	// GPU requests
	Ext           map[string]string `protobuf:"bytes,3,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit) Reset() {
	*x = Service_Spec_Config_Upstream_Container_ResourceLimit{}
	mi := &file_corev1_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_ResourceLimit) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_ResourceLimit.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_ResourceLimit) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 2}
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit) GetCpu() *Service_Spec_Config_Upstream_Container_ResourceLimit_CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit) GetMemory() *Service_Spec_Config_Upstream_Container_ResourceLimit_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit) GetExt() map[string]string {
	if x != nil {
		return x.Ext
	}
	return nil
}

type Service_Spec_Config_Upstream_Container_SecurityContext struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ReadOnlyRootFilesystem sets the root filesystem to read-only
	ReadOnlyRootFilesystem bool `protobuf:"varint,1,opt,name=readOnlyRootFilesystem,proto3" json:"readOnlyRootFilesystem,omitempty"`
	// RunAsUser sets the UID of the container user.
	RunAsUser     uint32 `protobuf:"varint,2,opt,name=runAsUser,proto3" json:"runAsUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_SecurityContext) Reset() {
	*x = Service_Spec_Config_Upstream_Container_SecurityContext{}
	mi := &file_corev1_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_SecurityContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_SecurityContext) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_SecurityContext) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_SecurityContext.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_SecurityContext) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 3}
}

func (x *Service_Spec_Config_Upstream_Container_SecurityContext) GetReadOnlyRootFilesystem() bool {
	if x != nil {
		return x.ReadOnlyRootFilesystem
	}
	return false
}

func (x *Service_Spec_Config_Upstream_Container_SecurityContext) GetRunAsUser() uint32 {
	if x != nil {
		return x.RunAsUser
	}
	return 0
}

type Service_Spec_Config_Upstream_Container_Volume struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim_
	Type          isService_Spec_Config_Upstream_Container_Volume_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Volume) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Volume{}
	mi := &file_corev1_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Volume) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Volume) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Volume.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Volume) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 4}
}

func (x *Service_Spec_Config_Upstream_Container_Volume) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_Volume) GetType() isService_Spec_Config_Upstream_Container_Volume_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Volume) GetPersistentVolumeClaim() *Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim_); ok {
			return x.PersistentVolumeClaim
		}
	}
	return nil
}

type isService_Spec_Config_Upstream_Container_Volume_Type interface {
	isService_Spec_Config_Upstream_Container_Volume_Type()
}

type Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim_ struct {
	PersistentVolumeClaim *Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim `protobuf:"bytes,2,opt,name=persistentVolumeClaim,proto3,oneof"`
}

func (*Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim_) isService_Spec_Config_Upstream_Container_Volume_Type() {
}

type Service_Spec_Config_Upstream_Container_VolumeMount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MountPath     string                 `protobuf:"bytes,2,opt,name=mountPath,proto3" json:"mountPath,omitempty"`
	SubPath       string                 `protobuf:"bytes,3,opt,name=subPath,proto3" json:"subPath,omitempty"`
	ReadOnly      bool                   `protobuf:"varint,4,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_VolumeMount) Reset() {
	*x = Service_Spec_Config_Upstream_Container_VolumeMount{}
	mi := &file_corev1_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_VolumeMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_VolumeMount) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_VolumeMount) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_VolumeMount.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_VolumeMount) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 5}
}

func (x *Service_Spec_Config_Upstream_Container_VolumeMount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_VolumeMount) GetMountPath() string {
	if x != nil {
		return x.MountPath
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_VolumeMount) GetSubPath() string {
	if x != nil {
		return x.SubPath
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_VolumeMount) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type Service_Spec_Config_Upstream_Container_Probe struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Upstream_Container_Probe_HttpGet
	//	*Service_Spec_Config_Upstream_Container_Probe_TcpSocket
	//	*Service_Spec_Config_Upstream_Container_Probe_Grpc
	Type                isService_Spec_Config_Upstream_Container_Probe_Type `protobuf_oneof:"type"`
	InitialDelaySeconds int32                                               `protobuf:"varint,5,opt,name=initialDelaySeconds,proto3" json:"initialDelaySeconds,omitempty"`
	TimeoutSeconds      int32                                               `protobuf:"varint,6,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
	PeriodSeconds       int32                                               `protobuf:"varint,7,opt,name=periodSeconds,proto3" json:"periodSeconds,omitempty"`
	SuccessThreshold    int32                                               `protobuf:"varint,8,opt,name=successThreshold,proto3" json:"successThreshold,omitempty"`
	FailureThreshold    int32                                               `protobuf:"varint,9,opt,name=failureThreshold,proto3" json:"failureThreshold,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Probe) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Probe{}
	mi := &file_corev1_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Probe) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Probe) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Probe.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Probe) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 6}
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetType() isService_Spec_Config_Upstream_Container_Probe_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetHttpGet() *Service_Spec_Config_Upstream_Container_Probe_HTTPGet {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Probe_HttpGet); ok {
			return x.HttpGet
		}
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetTcpSocket() *Service_Spec_Config_Upstream_Container_Probe_TCPSocket {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Probe_TcpSocket); ok {
			return x.TcpSocket
		}
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetGrpc() *Service_Spec_Config_Upstream_Container_Probe_GRPC {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Probe_Grpc); ok {
			return x.Grpc
		}
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetInitialDelaySeconds() int32 {
	if x != nil {
		return x.InitialDelaySeconds
	}
	return 0
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetPeriodSeconds() int32 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetSuccessThreshold() int32 {
	if x != nil {
		return x.SuccessThreshold
	}
	return 0
}

func (x *Service_Spec_Config_Upstream_Container_Probe) GetFailureThreshold() int32 {
	if x != nil {
		return x.FailureThreshold
	}
	return 0
}

type isService_Spec_Config_Upstream_Container_Probe_Type interface {
	isService_Spec_Config_Upstream_Container_Probe_Type()
}

type Service_Spec_Config_Upstream_Container_Probe_HttpGet struct {
	HttpGet *Service_Spec_Config_Upstream_Container_Probe_HTTPGet `protobuf:"bytes,1,opt,name=httpGet,proto3,oneof"`
}

type Service_Spec_Config_Upstream_Container_Probe_TcpSocket struct {
	TcpSocket *Service_Spec_Config_Upstream_Container_Probe_TCPSocket `protobuf:"bytes,2,opt,name=tcpSocket,proto3,oneof"`
}

type Service_Spec_Config_Upstream_Container_Probe_Grpc struct {
	Grpc *Service_Spec_Config_Upstream_Container_Probe_GRPC `protobuf:"bytes,3,opt,name=grpc,proto3,oneof"`
}

func (*Service_Spec_Config_Upstream_Container_Probe_HttpGet) isService_Spec_Config_Upstream_Container_Probe_Type() {
}

func (*Service_Spec_Config_Upstream_Container_Probe_TcpSocket) isService_Spec_Config_Upstream_Container_Probe_Type() {
}

func (*Service_Spec_Config_Upstream_Container_Probe_Grpc) isService_Spec_Config_Upstream_Container_Probe_Type() {
}

type Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the Kubernetes secret name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Key is the Kubernetes secret data key
	Key           string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef{}
	mi := &file_corev1_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 0, 0}
}

func (x *Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Username is the username used to authenticate to the container
	// registry
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password is the password used to authenticate to the container
	// registry
	Password *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	// Server is the container registry server (e.g. "ghcr.io" or
	// "quay.io")
	Server        string `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword{}
	mi := &file_corev1_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 1, 0}
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) GetPassword() *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password {
	if x != nil {
		return x.Password
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

type Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_FromSecret
	Type          isService_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password{}
	mi := &file_corev1_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 1, 0, 0}
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password) GetType() isService_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isService_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_Type interface {
	isService_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_Type()
}

type Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_FromSecret struct {
	// FromSecret sets the name of the Secret whose value contains
	// the Password
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_FromSecret) isService_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_Type() {
}

type Service_Spec_Config_Upstream_Container_ResourceLimit_CPU struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Millicores is the integer that sets the limit milli-cores
	Millicores    uint32 `protobuf:"varint,1,opt,name=millicores,proto3" json:"millicores,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_CPU) Reset() {
	*x = Service_Spec_Config_Upstream_Container_ResourceLimit_CPU{}
	mi := &file_corev1_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_ResourceLimit_CPU) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_CPU) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_ResourceLimit_CPU.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_ResourceLimit_CPU) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 2, 0}
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_CPU) GetMillicores() uint32 {
	if x != nil {
		return x.Millicores
	}
	return 0
}

type Service_Spec_Config_Upstream_Container_ResourceLimit_Memory struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Megabytes is the integer that set the limit in megabytes
	Megabytes     uint32 `protobuf:"varint,1,opt,name=megabytes,proto3" json:"megabytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_Memory) Reset() {
	*x = Service_Spec_Config_Upstream_Container_ResourceLimit_Memory{}
	mi := &file_corev1_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_ResourceLimit_Memory) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_ResourceLimit_Memory.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_ResourceLimit_Memory) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 2, 1}
}

func (x *Service_Spec_Config_Upstream_Container_ResourceLimit_Memory) GetMegabytes() uint32 {
	if x != nil {
		return x.Megabytes
	}
	return 0
}

type Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim{}
	mi := &file_corev1_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 4, 0}
}

func (x *Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Service_Spec_Config_Upstream_Container_Probe_HTTPGet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Port          uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Probe_HTTPGet) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Probe_HTTPGet{}
	mi := &file_corev1_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Probe_HTTPGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Probe_HTTPGet) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Probe_HTTPGet) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Probe_HTTPGet.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Probe_HTTPGet) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 6, 0}
}

func (x *Service_Spec_Config_Upstream_Container_Probe_HTTPGet) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Service_Spec_Config_Upstream_Container_Probe_HTTPGet) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Service_Spec_Config_Upstream_Container_Probe_TCPSocket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          uint32                 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Probe_TCPSocket) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Probe_TCPSocket{}
	mi := &file_corev1_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Probe_TCPSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Probe_TCPSocket) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Probe_TCPSocket) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Probe_TCPSocket.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Probe_TCPSocket) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 6, 1}
}

func (x *Service_Spec_Config_Upstream_Container_Probe_TCPSocket) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Service_Spec_Config_Upstream_Container_Probe_GRPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          uint32                 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_Config_Upstream_Container_Probe_GRPC) Reset() {
	*x = Service_Spec_Config_Upstream_Container_Probe_GRPC{}
	mi := &file_corev1_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_Config_Upstream_Container_Probe_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_Config_Upstream_Container_Probe_GRPC) ProtoMessage() {}

func (x *Service_Spec_Config_Upstream_Container_Probe_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_Config_Upstream_Container_Probe_GRPC.ProtoReflect.Descriptor instead.
func (*Service_Spec_Config_Upstream_Container_Probe_GRPC) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 1, 7, 1, 6, 2}
}

func (x *Service_Spec_Config_Upstream_Container_Probe_GRPC) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Service_Spec_DynamicConfig_Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Condition is the condition
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// configName is the name of the namedConfig that is used if the rule
	// matches.
	ConfigName    string `protobuf:"bytes,2,opt,name=configName,proto3" json:"configName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec_DynamicConfig_Rule) Reset() {
	*x = Service_Spec_DynamicConfig_Rule{}
	mi := &file_corev1_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec_DynamicConfig_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec_DynamicConfig_Rule) ProtoMessage() {}

func (x *Service_Spec_DynamicConfig_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec_DynamicConfig_Rule.ProtoReflect.Descriptor instead.
func (*Service_Spec_DynamicConfig_Rule) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 0, 3, 0}
}

func (x *Service_Spec_DynamicConfig_Rule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Service_Spec_DynamicConfig_Rule) GetConfigName() string {
	if x != nil {
		return x.ConfigName
	}
	return ""
}

type Service_Status_Address struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	DualStackIP   *metav1.DualStackIP     `protobuf:"bytes,1,opt,name=dualStackIP,proto3" json:"dualStackIP,omitempty"`
	PodRef        *metav1.ObjectReference `protobuf:"bytes,2,opt,name=podRef,proto3" json:"podRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Status_Address) Reset() {
	*x = Service_Status_Address{}
	mi := &file_corev1_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status_Address) ProtoMessage() {}

func (x *Service_Status_Address) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status_Address.ProtoReflect.Descriptor instead.
func (*Service_Status_Address) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1, 0}
}

func (x *Service_Status_Address) GetDualStackIP() *metav1.DualStackIP {
	if x != nil {
		return x.DualStackIP
	}
	return nil
}

func (x *Service_Status_Address) GetPodRef() *metav1.ObjectReference {
	if x != nil {
		return x.PodRef
	}
	return nil
}

type Service_Status_ManagedService struct {
	state           protoimpl.MessageState                       `protogen:"open.v1"`
	Image           string                                       `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Port            uint32                                       `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	HasSubdomain    bool                                         `protobuf:"varint,3,opt,name=hasSubdomain,proto3" json:"hasSubdomain,omitempty"`
	ForwardHost     bool                                         `protobuf:"varint,4,opt,name=forwardHost,proto3" json:"forwardHost,omitempty"`
	Type            string                                       `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	K8SLabels       map[string]string                            `protobuf:"bytes,6,rep,name=k8sLabels,proto3" json:"k8sLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Command         []string                                     `protobuf:"bytes,7,rep,name=command,proto3" json:"command,omitempty"`
	Args            []string                                     `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
	ImagePullSecret string                                       `protobuf:"bytes,9,opt,name=imagePullSecret,proto3" json:"imagePullSecret,omitempty"`
	HealthCheck     *Service_Status_ManagedService_HealthCheck   `protobuf:"bytes,10,opt,name=healthCheck,proto3" json:"healthCheck,omitempty"`
	ResourceLimit   *Service_Status_ManagedService_ResourceLimit `protobuf:"bytes,11,opt,name=resourceLimit,proto3" json:"resourceLimit,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Service_Status_ManagedService) Reset() {
	*x = Service_Status_ManagedService{}
	mi := &file_corev1_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status_ManagedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status_ManagedService) ProtoMessage() {}

func (x *Service_Status_ManagedService) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status_ManagedService.ProtoReflect.Descriptor instead.
func (*Service_Status_ManagedService) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1, 1}
}

func (x *Service_Status_ManagedService) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Service_Status_ManagedService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Service_Status_ManagedService) GetHasSubdomain() bool {
	if x != nil {
		return x.HasSubdomain
	}
	return false
}

func (x *Service_Status_ManagedService) GetForwardHost() bool {
	if x != nil {
		return x.ForwardHost
	}
	return false
}

func (x *Service_Status_ManagedService) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Service_Status_ManagedService) GetK8SLabels() map[string]string {
	if x != nil {
		return x.K8SLabels
	}
	return nil
}

func (x *Service_Status_ManagedService) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Service_Status_ManagedService) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Service_Status_ManagedService) GetImagePullSecret() string {
	if x != nil {
		return x.ImagePullSecret
	}
	return ""
}

func (x *Service_Status_ManagedService) GetHealthCheck() *Service_Status_ManagedService_HealthCheck {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *Service_Status_ManagedService) GetResourceLimit() *Service_Status_ManagedService_ResourceLimit {
	if x != nil {
		return x.ResourceLimit
	}
	return nil
}

type Service_Status_ManagedService_HealthCheck struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Service_Status_ManagedService_HealthCheck_Grpc
	Type          isService_Status_ManagedService_HealthCheck_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Status_ManagedService_HealthCheck) Reset() {
	*x = Service_Status_ManagedService_HealthCheck{}
	mi := &file_corev1_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status_ManagedService_HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status_ManagedService_HealthCheck) ProtoMessage() {}

func (x *Service_Status_ManagedService_HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status_ManagedService_HealthCheck.ProtoReflect.Descriptor instead.
func (*Service_Status_ManagedService_HealthCheck) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1, 1, 0}
}

func (x *Service_Status_ManagedService_HealthCheck) GetType() isService_Status_ManagedService_HealthCheck_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Service_Status_ManagedService_HealthCheck) GetGrpc() *Service_Status_ManagedService_HealthCheck_GRPC {
	if x != nil {
		if x, ok := x.Type.(*Service_Status_ManagedService_HealthCheck_Grpc); ok {
			return x.Grpc
		}
	}
	return nil
}

type isService_Status_ManagedService_HealthCheck_Type interface {
	isService_Status_ManagedService_HealthCheck_Type()
}

type Service_Status_ManagedService_HealthCheck_Grpc struct {
	Grpc *Service_Status_ManagedService_HealthCheck_GRPC `protobuf:"bytes,1,opt,name=grpc,proto3,oneof"`
}

func (*Service_Status_ManagedService_HealthCheck_Grpc) isService_Status_ManagedService_HealthCheck_Type() {
}

type Service_Status_ManagedService_ResourceLimit struct {
	state         protoimpl.MessageState                              `protogen:"open.v1"`
	Cpu           *Service_Status_ManagedService_ResourceLimit_CPU    `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory        *Service_Status_ManagedService_ResourceLimit_Memory `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Status_ManagedService_ResourceLimit) Reset() {
	*x = Service_Status_ManagedService_ResourceLimit{}
	mi := &file_corev1_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status_ManagedService_ResourceLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status_ManagedService_ResourceLimit) ProtoMessage() {}

func (x *Service_Status_ManagedService_ResourceLimit) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status_ManagedService_ResourceLimit.ProtoReflect.Descriptor instead.
func (*Service_Status_ManagedService_ResourceLimit) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1, 1, 1}
}

func (x *Service_Status_ManagedService_ResourceLimit) GetCpu() *Service_Status_ManagedService_ResourceLimit_CPU {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *Service_Status_ManagedService_ResourceLimit) GetMemory() *Service_Status_ManagedService_ResourceLimit_Memory {
	if x != nil {
		return x.Memory
	}
	return nil
}

type Service_Status_ManagedService_HealthCheck_GRPC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Port          int32                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Status_ManagedService_HealthCheck_GRPC) Reset() {
	*x = Service_Status_ManagedService_HealthCheck_GRPC{}
	mi := &file_corev1_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status_ManagedService_HealthCheck_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status_ManagedService_HealthCheck_GRPC) ProtoMessage() {}

func (x *Service_Status_ManagedService_HealthCheck_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status_ManagedService_HealthCheck_GRPC.ProtoReflect.Descriptor instead.
func (*Service_Status_ManagedService_HealthCheck_GRPC) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1, 1, 0, 0}
}

func (x *Service_Status_ManagedService_HealthCheck_GRPC) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Service_Status_ManagedService_ResourceLimit_CPU struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Millicores    uint32                 `protobuf:"varint,1,opt,name=millicores,proto3" json:"millicores,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Status_ManagedService_ResourceLimit_CPU) Reset() {
	*x = Service_Status_ManagedService_ResourceLimit_CPU{}
	mi := &file_corev1_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status_ManagedService_ResourceLimit_CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status_ManagedService_ResourceLimit_CPU) ProtoMessage() {}

func (x *Service_Status_ManagedService_ResourceLimit_CPU) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status_ManagedService_ResourceLimit_CPU.ProtoReflect.Descriptor instead.
func (*Service_Status_ManagedService_ResourceLimit_CPU) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1, 1, 1, 0}
}

func (x *Service_Status_ManagedService_ResourceLimit_CPU) GetMillicores() uint32 {
	if x != nil {
		return x.Millicores
	}
	return 0
}

type Service_Status_ManagedService_ResourceLimit_Memory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Megabytes     uint32                 `protobuf:"varint,1,opt,name=megabytes,proto3" json:"megabytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Status_ManagedService_ResourceLimit_Memory) Reset() {
	*x = Service_Status_ManagedService_ResourceLimit_Memory{}
	mi := &file_corev1_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status_ManagedService_ResourceLimit_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status_ManagedService_ResourceLimit_Memory) ProtoMessage() {}

func (x *Service_Status_ManagedService_ResourceLimit_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status_ManagedService_ResourceLimit_Memory.ProtoReflect.Descriptor instead.
func (*Service_Status_ManagedService_ResourceLimit_Memory) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{5, 1, 1, 1, 1}
}

func (x *Service_Status_ManagedService_ResourceLimit_Memory) GetMegabytes() uint32 {
	if x != nil {
		return x.Megabytes
	}
	return 0
}

type CredentialToken_AuthenticationToken struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AuthenticationToken string                 `protobuf:"bytes,1,opt,name=authenticationToken,proto3" json:"authenticationToken,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CredentialToken_AuthenticationToken) Reset() {
	*x = CredentialToken_AuthenticationToken{}
	mi := &file_corev1_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialToken_AuthenticationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialToken_AuthenticationToken) ProtoMessage() {}

func (x *CredentialToken_AuthenticationToken) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialToken_AuthenticationToken.ProtoReflect.Descriptor instead.
func (*CredentialToken_AuthenticationToken) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{8, 0}
}

func (x *CredentialToken_AuthenticationToken) GetAuthenticationToken() string {
	if x != nil {
		return x.AuthenticationToken
	}
	return ""
}

type CredentialToken_OAuth2Credentials struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientID is the OAuth2 client ID
	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	// ClientSecret is the OAuth2 client secret
	ClientSecret  string `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialToken_OAuth2Credentials) Reset() {
	*x = CredentialToken_OAuth2Credentials{}
	mi := &file_corev1_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialToken_OAuth2Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialToken_OAuth2Credentials) ProtoMessage() {}

func (x *CredentialToken_OAuth2Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialToken_OAuth2Credentials.ProtoReflect.Descriptor instead.
func (*CredentialToken_OAuth2Credentials) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{8, 1}
}

func (x *CredentialToken_OAuth2Credentials) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *CredentialToken_OAuth2Credentials) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type CredentialToken_AccessToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CredentialToken_AccessToken) Reset() {
	*x = CredentialToken_AccessToken{}
	mi := &file_corev1_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CredentialToken_AccessToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialToken_AccessToken) ProtoMessage() {}

func (x *CredentialToken_AccessToken) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialToken_AccessToken.ProtoReflect.Descriptor instead.
func (*CredentialToken_AccessToken) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{8, 2}
}

func (x *CredentialToken_AccessToken) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

type Session_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ExpiresAt is the timestamp at which the Session expires.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	// State is the Session state
	State         Session_Spec_State          `protobuf:"varint,2,opt,name=state,proto3,enum=octelium.api.main.core.v1.Session_Spec_State" json:"state,omitempty"`
	Authorization *Session_Spec_Authorization `protobuf:"bytes,3,opt,name=authorization,proto3" json:"authorization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Spec) Reset() {
	*x = Session_Spec{}
	mi := &file_corev1_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Spec) ProtoMessage() {}

func (x *Session_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Spec.ProtoReflect.Descriptor instead.
func (*Session_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Session_Spec) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Session_Spec) GetState() Session_Spec_State {
	if x != nil {
		return x.State
	}
	return Session_Spec_STATE_UNKNOWN
}

func (x *Session_Spec) GetAuthorization() *Session_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

type Session_Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserRef is the reference to the User of the Session
	UserRef *metav1.ObjectReference `protobuf:"bytes,1,opt,name=userRef,proto3" json:"userRef,omitempty"`
	// DeviceRef is the reference to the Device of the Session if available
	DeviceRef *metav1.ObjectReference `protobuf:"bytes,2,opt,name=deviceRef,proto3" json:"deviceRef,omitempty"`
	// Type is the Session type
	Type Session_Status_Type `protobuf:"varint,3,opt,name=type,proto3,enum=octelium.api.main.core.v1.Session_Status_Type" json:"type,omitempty"`
	// IsBrowser means that the Session is used by a browser.
	IsBrowser bool `protobuf:"varint,4,opt,name=isBrowser,proto3" json:"isBrowser,omitempty"`
	// Authentication includes the information of the authentication operation
	// used currently by the Session
	Authentication *Session_Status_Authentication `protobuf:"bytes,5,opt,name=authentication,proto3" json:"authentication,omitempty"`
	// LastAuthentications is the list of last Authentications
	LastAuthentications []*Session_Status_Authentication `protobuf:"bytes,6,rep,name=lastAuthentications,proto3" json:"lastAuthentications,omitempty"`
	// InitialAuthentication is the initial Authentication of the Session
	InitialAuthentication *Session_Status_Authentication `protobuf:"bytes,7,opt,name=initialAuthentication,proto3" json:"initialAuthentication,omitempty"`
	// IsConnected shows whether the Session has a connected client. Only useful
	// for CLIENT Sessions.
	IsConnected bool `protobuf:"varint,8,opt,name=isConnected,proto3" json:"isConnected,omitempty"`
	// Connection shows the connection information of the currently connected
	// Session
	Connection           *Session_Status_Connection  `protobuf:"bytes,9,opt,name=connection,proto3" json:"connection,omitempty"`
	CredentialRef        *metav1.ObjectReference     `protobuf:"bytes,10,opt,name=credentialRef,proto3" json:"credentialRef,omitempty"`
	Ext                  map[string]*structpb.Struct `protobuf:"bytes,11,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TotalAuthentications uint32                      `protobuf:"varint,12,opt,name=totalAuthentications,proto3" json:"totalAuthentications,omitempty"`
	// Scopes is the list of scopes used by the Session
	Scopes           []*Scope                         `protobuf:"bytes,13,rep,name=scopes,proto3" json:"scopes,omitempty"`
	TotalConnections uint32                           `protobuf:"varint,14,opt,name=totalConnections,proto3" json:"totalConnections,omitempty"`
	LastConnections  []*Session_Status_LastConnection `protobuf:"bytes,15,rep,name=lastConnections,proto3" json:"lastConnections,omitempty"`
	IsLocked         bool                             `protobuf:"varint,16,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Session_Status) Reset() {
	*x = Session_Status{}
	mi := &file_corev1_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status) ProtoMessage() {}

func (x *Session_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status.ProtoReflect.Descriptor instead.
func (*Session_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Session_Status) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

func (x *Session_Status) GetDeviceRef() *metav1.ObjectReference {
	if x != nil {
		return x.DeviceRef
	}
	return nil
}

func (x *Session_Status) GetType() Session_Status_Type {
	if x != nil {
		return x.Type
	}
	return Session_Status_TYPE_UNKNOWN
}

func (x *Session_Status) GetIsBrowser() bool {
	if x != nil {
		return x.IsBrowser
	}
	return false
}

func (x *Session_Status) GetAuthentication() *Session_Status_Authentication {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *Session_Status) GetLastAuthentications() []*Session_Status_Authentication {
	if x != nil {
		return x.LastAuthentications
	}
	return nil
}

func (x *Session_Status) GetInitialAuthentication() *Session_Status_Authentication {
	if x != nil {
		return x.InitialAuthentication
	}
	return nil
}

func (x *Session_Status) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *Session_Status) GetConnection() *Session_Status_Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *Session_Status) GetCredentialRef() *metav1.ObjectReference {
	if x != nil {
		return x.CredentialRef
	}
	return nil
}

func (x *Session_Status) GetExt() map[string]*structpb.Struct {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Session_Status) GetTotalAuthentications() uint32 {
	if x != nil {
		return x.TotalAuthentications
	}
	return 0
}

func (x *Session_Status) GetScopes() []*Scope {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *Session_Status) GetTotalConnections() uint32 {
	if x != nil {
		return x.TotalConnections
	}
	return 0
}

func (x *Session_Status) GetLastConnections() []*Session_Status_LastConnection {
	if x != nil {
		return x.LastConnections
	}
	return nil
}

func (x *Session_Status) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

type Session_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Session_Spec_Authorization) Reset() {
	*x = Session_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Spec_Authorization) ProtoMessage() {}

func (x *Session_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*Session_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 0, 0}
}

func (x *Session_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Session_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type Session_Status_Connection struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	StartedAt  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	LastSeenAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=lastSeenAt,proto3" json:"lastSeenAt,omitempty"`
	// Upstreams is the list of upstreams actually served by this connected
	// Session
	Upstreams []*Session_Status_Connection_Upstream `protobuf:"bytes,3,rep,name=upstreams,proto3" json:"upstreams,omitempty"`
	// Addresses is the list private addresses used by the connected Session's
	// client
	Addresses []*metav1.DualStackNetwork `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// L3Mode is the layer-3 mode of the connection
	L3Mode Session_Status_Connection_L3Mode `protobuf:"varint,5,opt,name=l3Mode,proto3,enum=octelium.api.main.core.v1.Session_Status_Connection_L3Mode" json:"l3Mode,omitempty"`
	// ServiceOptions shows the configuration of the served Services
	ServiceOptions *Session_Status_Connection_ServiceOptions `protobuf:"bytes,6,opt,name=serviceOptions,proto3" json:"serviceOptions,omitempty"`
	// X25519PublicKey is the raw x25519 public key of the Connection.
	// Currently used by WireGuard-based connections.
	X25519PublicKey []byte `protobuf:"bytes,7,opt,name=x25519PublicKey,proto3" json:"x25519PublicKey,omitempty"`
	// Ed25519PublicKey is the raw ed25519 public key of the Connection.
	// Currently used for eSSH.
	Ed25519PublicKey []byte `protobuf:"bytes,8,opt,name=ed25519PublicKey,proto3" json:"ed25519PublicKey,omitempty"`
	// Type is the connection type
	Type Session_Status_Connection_Type `protobuf:"varint,9,opt,name=type,proto3,enum=octelium.api.main.core.v1.Session_Status_Connection_Type" json:"type,omitempty"`
	// PublishedServices is the list of published Services to the connected
	// client host
	PublishedServices []*Session_Status_Connection_PublishedService `protobuf:"bytes,10,rep,name=publishedServices,proto3" json:"publishedServices,omitempty"`
	// IgnoreDNS means that the connected client does not use the Cluster DNS
	IgnoreDNS bool `protobuf:"varint,11,opt,name=ignoreDNS,proto3" json:"ignoreDNS,omitempty"`
	// ESSHEnable means that serving eSSH Services is enabled
	ESSHEnable bool `protobuf:"varint,12,opt,name=eSSHEnable,proto3" json:"eSSHEnable,omitempty"`
	// ESSHPort is the port number of the eSSH Server. Only meaningful if
	// ESSHEnable is set to true
	ESSHPort      int32 `protobuf:"varint,13,opt,name=eSSHPort,proto3" json:"eSSHPort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Connection) Reset() {
	*x = Session_Status_Connection{}
	mi := &file_corev1_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Connection) ProtoMessage() {}

func (x *Session_Status_Connection) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Connection.ProtoReflect.Descriptor instead.
func (*Session_Status_Connection) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0}
}

func (x *Session_Status_Connection) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Session_Status_Connection) GetLastSeenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSeenAt
	}
	return nil
}

func (x *Session_Status_Connection) GetUpstreams() []*Session_Status_Connection_Upstream {
	if x != nil {
		return x.Upstreams
	}
	return nil
}

func (x *Session_Status_Connection) GetAddresses() []*metav1.DualStackNetwork {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Session_Status_Connection) GetL3Mode() Session_Status_Connection_L3Mode {
	if x != nil {
		return x.L3Mode
	}
	return Session_Status_Connection_BOTH
}

func (x *Session_Status_Connection) GetServiceOptions() *Session_Status_Connection_ServiceOptions {
	if x != nil {
		return x.ServiceOptions
	}
	return nil
}

func (x *Session_Status_Connection) GetX25519PublicKey() []byte {
	if x != nil {
		return x.X25519PublicKey
	}
	return nil
}

func (x *Session_Status_Connection) GetEd25519PublicKey() []byte {
	if x != nil {
		return x.Ed25519PublicKey
	}
	return nil
}

func (x *Session_Status_Connection) GetType() Session_Status_Connection_Type {
	if x != nil {
		return x.Type
	}
	return Session_Status_Connection_TYPE_UNKNOWN
}

func (x *Session_Status_Connection) GetPublishedServices() []*Session_Status_Connection_PublishedService {
	if x != nil {
		return x.PublishedServices
	}
	return nil
}

func (x *Session_Status_Connection) GetIgnoreDNS() bool {
	if x != nil {
		return x.IgnoreDNS
	}
	return false
}

func (x *Session_Status_Connection) GetESSHEnable() bool {
	if x != nil {
		return x.ESSHEnable
	}
	return false
}

func (x *Session_Status_Connection) GetESSHPort() int32 {
	if x != nil {
		return x.ESSHPort
	}
	return 0
}

type Session_Status_Authentication struct {
	state                protoimpl.MessageState              `protogen:"open.v1"`
	Info                 *Session_Status_Authentication_Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	SetAt                *timestamppb.Timestamp              `protobuf:"bytes,2,opt,name=setAt,proto3" json:"setAt,omitempty"`
	TokenID              string                              `protobuf:"bytes,3,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	AccessTokenDuration  *metav1.Duration                    `protobuf:"bytes,4,opt,name=accessTokenDuration,proto3" json:"accessTokenDuration,omitempty"`
	RefreshTokenDuration *metav1.Duration                    `protobuf:"bytes,5,opt,name=refreshTokenDuration,proto3" json:"refreshTokenDuration,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Session_Status_Authentication) Reset() {
	*x = Session_Status_Authentication{}
	mi := &file_corev1_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Authentication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Authentication) ProtoMessage() {}

func (x *Session_Status_Authentication) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Authentication.ProtoReflect.Descriptor instead.
func (*Session_Status_Authentication) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1}
}

func (x *Session_Status_Authentication) GetInfo() *Session_Status_Authentication_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Session_Status_Authentication) GetSetAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SetAt
	}
	return nil
}

func (x *Session_Status_Authentication) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *Session_Status_Authentication) GetAccessTokenDuration() *metav1.Duration {
	if x != nil {
		return x.AccessTokenDuration
	}
	return nil
}

func (x *Session_Status_Authentication) GetRefreshTokenDuration() *metav1.Duration {
	if x != nil {
		return x.RefreshTokenDuration
	}
	return nil
}

type Session_Status_LastConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	EndedAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_LastConnection) Reset() {
	*x = Session_Status_LastConnection{}
	mi := &file_corev1_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_LastConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_LastConnection) ProtoMessage() {}

func (x *Session_Status_LastConnection) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_LastConnection.ProtoReflect.Descriptor instead.
func (*Session_Status_LastConnection) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 2}
}

func (x *Session_Status_LastConnection) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Session_Status_LastConnection) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

type Session_Status_Connection_ServiceOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ServeAll means that the Session is willing to serve any Service that
	// can be served by the Session's User
	ServeAll          bool                                                         `protobuf:"varint,1,opt,name=serveAll,proto3" json:"serveAll,omitempty"`
	RequestedServices []*Session_Status_Connection_ServiceOptions_RequestedService `protobuf:"bytes,2,rep,name=requestedServices,proto3" json:"requestedServices,omitempty"`
	// PortStart is the starting listen port used by the client to serve its
	// Services
	PortStart     int32 `protobuf:"varint,3,opt,name=portStart,proto3" json:"portStart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Connection_ServiceOptions) Reset() {
	*x = Session_Status_Connection_ServiceOptions{}
	mi := &file_corev1_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Connection_ServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Connection_ServiceOptions) ProtoMessage() {}

func (x *Session_Status_Connection_ServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Connection_ServiceOptions.ProtoReflect.Descriptor instead.
func (*Session_Status_Connection_ServiceOptions) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 0}
}

func (x *Session_Status_Connection_ServiceOptions) GetServeAll() bool {
	if x != nil {
		return x.ServeAll
	}
	return false
}

func (x *Session_Status_Connection_ServiceOptions) GetRequestedServices() []*Session_Status_Connection_ServiceOptions_RequestedService {
	if x != nil {
		return x.RequestedServices
	}
	return nil
}

func (x *Session_Status_Connection_ServiceOptions) GetPortStart() int32 {
	if x != nil {
		return x.PortStart
	}
	return 0
}

type Session_Status_Connection_Upstream struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Port          int32                                       `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	L4Type        Session_Status_Connection_Upstream_L4Type   `protobuf:"varint,2,opt,name=l4Type,proto3,enum=octelium.api.main.core.v1.Session_Status_Connection_Upstream_L4Type" json:"l4Type,omitempty"`
	ServiceRef    *metav1.ObjectReference                     `protobuf:"bytes,3,opt,name=serviceRef,proto3" json:"serviceRef,omitempty"`
	NamespaceRef  *metav1.ObjectReference                     `protobuf:"bytes,4,opt,name=namespaceRef,proto3" json:"namespaceRef,omitempty"`
	Backend       *Session_Status_Connection_Upstream_Backend `protobuf:"bytes,5,opt,name=backend,proto3" json:"backend,omitempty"`
	Mode          Session_Status_Connection_Upstream_Mode     `protobuf:"varint,6,opt,name=mode,proto3,enum=octelium.api.main.core.v1.Session_Status_Connection_Upstream_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Connection_Upstream) Reset() {
	*x = Session_Status_Connection_Upstream{}
	mi := &file_corev1_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Connection_Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Connection_Upstream) ProtoMessage() {}

func (x *Session_Status_Connection_Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Connection_Upstream.ProtoReflect.Descriptor instead.
func (*Session_Status_Connection_Upstream) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 1}
}

func (x *Session_Status_Connection_Upstream) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Session_Status_Connection_Upstream) GetL4Type() Session_Status_Connection_Upstream_L4Type {
	if x != nil {
		return x.L4Type
	}
	return Session_Status_Connection_Upstream_L4_UNKNOWN
}

func (x *Session_Status_Connection_Upstream) GetServiceRef() *metav1.ObjectReference {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *Session_Status_Connection_Upstream) GetNamespaceRef() *metav1.ObjectReference {
	if x != nil {
		return x.NamespaceRef
	}
	return nil
}

func (x *Session_Status_Connection_Upstream) GetBackend() *Session_Status_Connection_Upstream_Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *Session_Status_Connection_Upstream) GetMode() Session_Status_Connection_Upstream_Mode {
	if x != nil {
		return x.Mode
	}
	return Session_Status_Connection_Upstream_MODE_UNSET
}

type Session_Status_Connection_PublishedService struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ServiceRef    *metav1.ObjectReference `protobuf:"bytes,1,opt,name=serviceRef,proto3" json:"serviceRef,omitempty"`
	Port          int32                   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Address       string                  `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Connection_PublishedService) Reset() {
	*x = Session_Status_Connection_PublishedService{}
	mi := &file_corev1_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Connection_PublishedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Connection_PublishedService) ProtoMessage() {}

func (x *Session_Status_Connection_PublishedService) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Connection_PublishedService.ProtoReflect.Descriptor instead.
func (*Session_Status_Connection_PublishedService) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 2}
}

func (x *Session_Status_Connection_PublishedService) GetServiceRef() *metav1.ObjectReference {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *Session_Status_Connection_PublishedService) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Session_Status_Connection_PublishedService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Session_Status_Connection_ServiceOptions_RequestedService struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	ServiceRef    *metav1.ObjectReference `protobuf:"bytes,1,opt,name=serviceRef,proto3" json:"serviceRef,omitempty"`
	NamespaceRef  *metav1.ObjectReference `protobuf:"bytes,2,opt,name=namespaceRef,proto3" json:"namespaceRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Connection_ServiceOptions_RequestedService) Reset() {
	*x = Session_Status_Connection_ServiceOptions_RequestedService{}
	mi := &file_corev1_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Connection_ServiceOptions_RequestedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Connection_ServiceOptions_RequestedService) ProtoMessage() {}

func (x *Session_Status_Connection_ServiceOptions_RequestedService) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Connection_ServiceOptions_RequestedService.ProtoReflect.Descriptor instead.
func (*Session_Status_Connection_ServiceOptions_RequestedService) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 0, 0}
}

func (x *Session_Status_Connection_ServiceOptions_RequestedService) GetServiceRef() *metav1.ObjectReference {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *Session_Status_Connection_ServiceOptions_RequestedService) GetNamespaceRef() *metav1.ObjectReference {
	if x != nil {
		return x.NamespaceRef
	}
	return nil
}

type Session_Status_Connection_Upstream_Backend struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host is the host of the actual upstream
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port is the listen port of the actual upstream
	Port          int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Connection_Upstream_Backend) Reset() {
	*x = Session_Status_Connection_Upstream_Backend{}
	mi := &file_corev1_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Connection_Upstream_Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Connection_Upstream_Backend) ProtoMessage() {}

func (x *Session_Status_Connection_Upstream_Backend) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Connection_Upstream_Backend.ProtoReflect.Descriptor instead.
func (*Session_Status_Connection_Upstream_Backend) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 0, 1, 0}
}

func (x *Session_Status_Connection_Upstream_Backend) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Session_Status_Connection_Upstream_Backend) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Session_Status_Authentication_Info struct {
	state protoimpl.MessageState                  `protogen:"open.v1"`
	Type  Session_Status_Authentication_Info_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.Session_Status_Authentication_Info_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//
	//	*Session_Status_Authentication_Info_External_
	//	*Session_Status_Authentication_Info_IdentityProvider_
	//	*Session_Status_Authentication_Info_Credential_
	//	*Session_Status_Authentication_Info_Authenticator_
	Details       isSession_Status_Authentication_Info_Details   `protobuf_oneof:"details"`
	Aal           Session_Status_Authentication_Info_AAL         `protobuf:"varint,5,opt,name=aal,proto3,enum=octelium.api.main.core.v1.Session_Status_Authentication_Info_AAL" json:"aal,omitempty"`
	Downstream    *Session_Status_Authentication_Info_Downstream `protobuf:"bytes,6,opt,name=downstream,proto3" json:"downstream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Authentication_Info) Reset() {
	*x = Session_Status_Authentication_Info{}
	mi := &file_corev1_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Authentication_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Authentication_Info) ProtoMessage() {}

func (x *Session_Status_Authentication_Info) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Authentication_Info.ProtoReflect.Descriptor instead.
func (*Session_Status_Authentication_Info) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0}
}

func (x *Session_Status_Authentication_Info) GetType() Session_Status_Authentication_Info_Type {
	if x != nil {
		return x.Type
	}
	return Session_Status_Authentication_Info_TYPE_UNSET
}

func (x *Session_Status_Authentication_Info) GetDetails() isSession_Status_Authentication_Info_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Session_Status_Authentication_Info) GetExternal() *Session_Status_Authentication_Info_External {
	if x != nil {
		if x, ok := x.Details.(*Session_Status_Authentication_Info_External_); ok {
			return x.External
		}
	}
	return nil
}

func (x *Session_Status_Authentication_Info) GetIdentityProvider() *Session_Status_Authentication_Info_IdentityProvider {
	if x != nil {
		if x, ok := x.Details.(*Session_Status_Authentication_Info_IdentityProvider_); ok {
			return x.IdentityProvider
		}
	}
	return nil
}

func (x *Session_Status_Authentication_Info) GetCredential() *Session_Status_Authentication_Info_Credential {
	if x != nil {
		if x, ok := x.Details.(*Session_Status_Authentication_Info_Credential_); ok {
			return x.Credential
		}
	}
	return nil
}

func (x *Session_Status_Authentication_Info) GetAuthenticator() *Session_Status_Authentication_Info_Authenticator {
	if x != nil {
		if x, ok := x.Details.(*Session_Status_Authentication_Info_Authenticator_); ok {
			return x.Authenticator
		}
	}
	return nil
}

func (x *Session_Status_Authentication_Info) GetAal() Session_Status_Authentication_Info_AAL {
	if x != nil {
		return x.Aal
	}
	return Session_Status_Authentication_Info_AAL_UNSET
}

func (x *Session_Status_Authentication_Info) GetDownstream() *Session_Status_Authentication_Info_Downstream {
	if x != nil {
		return x.Downstream
	}
	return nil
}

type isSession_Status_Authentication_Info_Details interface {
	isSession_Status_Authentication_Info_Details()
}

type Session_Status_Authentication_Info_External_ struct {
	External *Session_Status_Authentication_Info_External `protobuf:"bytes,2,opt,name=external,proto3,oneof"`
}

type Session_Status_Authentication_Info_IdentityProvider_ struct {
	IdentityProvider *Session_Status_Authentication_Info_IdentityProvider `protobuf:"bytes,3,opt,name=identityProvider,proto3,oneof"`
}

type Session_Status_Authentication_Info_Credential_ struct {
	Credential *Session_Status_Authentication_Info_Credential `protobuf:"bytes,4,opt,name=credential,proto3,oneof"`
}

type Session_Status_Authentication_Info_Authenticator_ struct {
	Authenticator *Session_Status_Authentication_Info_Authenticator `protobuf:"bytes,7,opt,name=authenticator,proto3,oneof"`
}

func (*Session_Status_Authentication_Info_External_) isSession_Status_Authentication_Info_Details() {}

func (*Session_Status_Authentication_Info_IdentityProvider_) isSession_Status_Authentication_Info_Details() {
}

func (*Session_Status_Authentication_Info_Credential_) isSession_Status_Authentication_Info_Details() {
}

func (*Session_Status_Authentication_Info_Authenticator_) isSession_Status_Authentication_Info_Details() {
}

type Session_Status_Authentication_Info_IdentityProvider struct {
	state               protoimpl.MessageState                                   `protogen:"open.v1"`
	IdentityProviderRef *metav1.ObjectReference                                  `protobuf:"bytes,1,opt,name=identityProviderRef,proto3" json:"identityProviderRef,omitempty"`
	Type                Session_Status_Authentication_Info_IdentityProvider_Type `protobuf:"varint,2,opt,name=type,proto3,enum=octelium.api.main.core.v1.Session_Status_Authentication_Info_IdentityProvider_Type" json:"type,omitempty"`
	Identifier          string                                                   `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	PicURL              string                                                   `protobuf:"bytes,4,opt,name=picURL,proto3" json:"picURL,omitempty"`
	Email               string                                                   `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Session_Status_Authentication_Info_IdentityProvider) Reset() {
	*x = Session_Status_Authentication_Info_IdentityProvider{}
	mi := &file_corev1_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Authentication_Info_IdentityProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Authentication_Info_IdentityProvider) ProtoMessage() {}

func (x *Session_Status_Authentication_Info_IdentityProvider) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Authentication_Info_IdentityProvider.ProtoReflect.Descriptor instead.
func (*Session_Status_Authentication_Info_IdentityProvider) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 0}
}

func (x *Session_Status_Authentication_Info_IdentityProvider) GetIdentityProviderRef() *metav1.ObjectReference {
	if x != nil {
		return x.IdentityProviderRef
	}
	return nil
}

func (x *Session_Status_Authentication_Info_IdentityProvider) GetType() Session_Status_Authentication_Info_IdentityProvider_Type {
	if x != nil {
		return x.Type
	}
	return Session_Status_Authentication_Info_IdentityProvider_TYPE_UNKNOWN
}

func (x *Session_Status_Authentication_Info_IdentityProvider) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *Session_Status_Authentication_Info_IdentityProvider) GetPicURL() string {
	if x != nil {
		return x.PicURL
	}
	return ""
}

func (x *Session_Status_Authentication_Info_IdentityProvider) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Session_Status_Authentication_Info_Credential struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	CredentialRef *metav1.ObjectReference                            `protobuf:"bytes,1,opt,name=credentialRef,proto3" json:"credentialRef,omitempty"`
	Type          Session_Status_Authentication_Info_Credential_Type `protobuf:"varint,2,opt,name=type,proto3,enum=octelium.api.main.core.v1.Session_Status_Authentication_Info_Credential_Type" json:"type,omitempty"`
	TokenID       string                                             `protobuf:"bytes,3,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Authentication_Info_Credential) Reset() {
	*x = Session_Status_Authentication_Info_Credential{}
	mi := &file_corev1_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Authentication_Info_Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Authentication_Info_Credential) ProtoMessage() {}

func (x *Session_Status_Authentication_Info_Credential) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Authentication_Info_Credential.ProtoReflect.Descriptor instead.
func (*Session_Status_Authentication_Info_Credential) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 1}
}

func (x *Session_Status_Authentication_Info_Credential) GetCredentialRef() *metav1.ObjectReference {
	if x != nil {
		return x.CredentialRef
	}
	return nil
}

func (x *Session_Status_Authentication_Info_Credential) GetType() Session_Status_Authentication_Info_Credential_Type {
	if x != nil {
		return x.Type
	}
	return Session_Status_Authentication_Info_Credential_TYPE_UNKNOWN
}

func (x *Session_Status_Authentication_Info_Credential) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

type Session_Status_Authentication_Info_External struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	OwnerRef      *metav1.ObjectReference `protobuf:"bytes,1,opt,name=ownerRef,proto3" json:"ownerRef,omitempty"`
	Attrs         *structpb.Struct        `protobuf:"bytes,2,opt,name=attrs,proto3" json:"attrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Authentication_Info_External) Reset() {
	*x = Session_Status_Authentication_Info_External{}
	mi := &file_corev1_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Authentication_Info_External) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Authentication_Info_External) ProtoMessage() {}

func (x *Session_Status_Authentication_Info_External) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Authentication_Info_External.ProtoReflect.Descriptor instead.
func (*Session_Status_Authentication_Info_External) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 2}
}

func (x *Session_Status_Authentication_Info_External) GetOwnerRef() *metav1.ObjectReference {
	if x != nil {
		return x.OwnerRef
	}
	return nil
}

func (x *Session_Status_Authentication_Info_External) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type Session_Status_Authentication_Info_Authenticator struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	AuthenticatorRef *metav1.ObjectReference   `protobuf:"bytes,1,opt,name=authenticatorRef,proto3" json:"authenticatorRef,omitempty"`
	Type             Authenticator_Status_Type `protobuf:"varint,2,opt,name=type,proto3,enum=octelium.api.main.core.v1.Authenticator_Status_Type" json:"type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Session_Status_Authentication_Info_Authenticator) Reset() {
	*x = Session_Status_Authentication_Info_Authenticator{}
	mi := &file_corev1_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Authentication_Info_Authenticator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Authentication_Info_Authenticator) ProtoMessage() {}

func (x *Session_Status_Authentication_Info_Authenticator) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Authentication_Info_Authenticator.ProtoReflect.Descriptor instead.
func (*Session_Status_Authentication_Info_Authenticator) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 3}
}

func (x *Session_Status_Authentication_Info_Authenticator) GetAuthenticatorRef() *metav1.ObjectReference {
	if x != nil {
		return x.AuthenticatorRef
	}
	return nil
}

func (x *Session_Status_Authentication_Info_Authenticator) GetType() Authenticator_Status_Type {
	if x != nil {
		return x.Type
	}
	return Authenticator_Status_TYPE_UNKNOWN
}

type Session_Status_Authentication_Info_Downstream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IpAddress     string                 `protobuf:"bytes,1,opt,name=ipAddress,proto3" json:"ipAddress,omitempty"`
	UserAgent     string                 `protobuf:"bytes,2,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	ClientVersion string                 `protobuf:"bytes,3,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Session_Status_Authentication_Info_Downstream) Reset() {
	*x = Session_Status_Authentication_Info_Downstream{}
	mi := &file_corev1_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session_Status_Authentication_Info_Downstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session_Status_Authentication_Info_Downstream) ProtoMessage() {}

func (x *Session_Status_Authentication_Info_Downstream) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session_Status_Authentication_Info_Downstream.ProtoReflect.Descriptor instead.
func (*Session_Status_Authentication_Info_Downstream) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{9, 1, 1, 0, 4}
}

func (x *Session_Status_Authentication_Info_Downstream) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Session_Status_Authentication_Info_Downstream) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Session_Status_Authentication_Info_Downstream) GetClientVersion() string {
	if x != nil {
		return x.ClientVersion
	}
	return ""
}

type Secret_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          *Secret_Spec_Data      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secret_Spec) Reset() {
	*x = Secret_Spec{}
	mi := &file_corev1_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret_Spec) ProtoMessage() {}

func (x *Secret_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret_Spec.ProtoReflect.Descriptor instead.
func (*Secret_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Secret_Spec) GetData() *Secret_Spec_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Secret_Status struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Ext           map[string]*structpb.Struct `protobuf:"bytes,1,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secret_Status) Reset() {
	*x = Secret_Status{}
	mi := &file_corev1_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret_Status) ProtoMessage() {}

func (x *Secret_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret_Status.ProtoReflect.Descriptor instead.
func (*Secret_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{11, 1}
}

func (x *Secret_Status) GetExt() map[string]*structpb.Struct {
	if x != nil {
		return x.Ext
	}
	return nil
}

type Secret_Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Secret_Data_Value
	//	*Secret_Data_ValueBytes
	Type          isSecret_Data_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secret_Data) Reset() {
	*x = Secret_Data{}
	mi := &file_corev1_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret_Data) ProtoMessage() {}

func (x *Secret_Data) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret_Data.ProtoReflect.Descriptor instead.
func (*Secret_Data) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{11, 2}
}

func (x *Secret_Data) GetType() isSecret_Data_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Secret_Data) GetValue() string {
	if x != nil {
		if x, ok := x.Type.(*Secret_Data_Value); ok {
			return x.Value
		}
	}
	return ""
}

func (x *Secret_Data) GetValueBytes() []byte {
	if x != nil {
		if x, ok := x.Type.(*Secret_Data_ValueBytes); ok {
			return x.ValueBytes
		}
	}
	return nil
}

type isSecret_Data_Type interface {
	isSecret_Data_Type()
}

type Secret_Data_Value struct {
	// Value is a string value
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type Secret_Data_ValueBytes struct {
	// ValueBytes is a raw sequence of bytes value
	ValueBytes []byte `protobuf:"bytes,2,opt,name=valueBytes,proto3,oneof"`
}

func (*Secret_Data_Value) isSecret_Data_Type() {}

func (*Secret_Data_ValueBytes) isSecret_Data_Type() {}

type Secret_Spec_Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Secret_Spec_Data_Value
	//	*Secret_Spec_Data_ValueBytes
	Type          isSecret_Spec_Data_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Secret_Spec_Data) Reset() {
	*x = Secret_Spec_Data{}
	mi := &file_corev1_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Secret_Spec_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret_Spec_Data) ProtoMessage() {}

func (x *Secret_Spec_Data) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret_Spec_Data.ProtoReflect.Descriptor instead.
func (*Secret_Spec_Data) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *Secret_Spec_Data) GetType() isSecret_Spec_Data_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Secret_Spec_Data) GetValue() string {
	if x != nil {
		if x, ok := x.Type.(*Secret_Spec_Data_Value); ok {
			return x.Value
		}
	}
	return ""
}

func (x *Secret_Spec_Data) GetValueBytes() []byte {
	if x != nil {
		if x, ok := x.Type.(*Secret_Spec_Data_ValueBytes); ok {
			return x.ValueBytes
		}
	}
	return nil
}

type isSecret_Spec_Data_Type interface {
	isSecret_Spec_Data_Type()
}

type Secret_Spec_Data_Value struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type Secret_Spec_Data_ValueBytes struct {
	ValueBytes []byte `protobuf:"bytes,2,opt,name=valueBytes,proto3,oneof"`
}

func (*Secret_Spec_Data_Value) isSecret_Spec_Data_Type() {}

func (*Secret_Spec_Data_ValueBytes) isSecret_Spec_Data_Type() {}

type Credential_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the type of the Credential
	Type Credential_Spec_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.Credential_Spec_Type" json:"type,omitempty"`
	User string               `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// MaxAuthentications sets the max number of authentications permitted by
	// this Credential.
	MaxAuthentications uint32 `protobuf:"varint,3,opt,name=maxAuthentications,proto3" json:"maxAuthentications,omitempty"`
	// ExpiresAt is the timestamp at which the token expires.
	ExpiresAt     *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	SessionType   Session_Status_Type            `protobuf:"varint,5,opt,name=sessionType,proto3,enum=octelium.api.main.core.v1.Session_Status_Type" json:"sessionType,omitempty"`
	Authorization *Credential_Spec_Authorization `protobuf:"bytes,6,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// IsDisabled disables the Credential and prevents authentication via it.
	IsDisabled bool `protobuf:"varint,7,opt,name=isDisabled,proto3" json:"isDisabled,omitempty"`
	// AutoDelete auto-deletes the Credentials once the max number of
	// authentications has been reached.
	AutoDelete    bool `protobuf:"varint,8,opt,name=autoDelete,proto3" json:"autoDelete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential_Spec) Reset() {
	*x = Credential_Spec{}
	mi := &file_corev1_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential_Spec) ProtoMessage() {}

func (x *Credential_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential_Spec.ProtoReflect.Descriptor instead.
func (*Credential_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Credential_Spec) GetType() Credential_Spec_Type {
	if x != nil {
		return x.Type
	}
	return Credential_Spec_TYPE_UNKNOWN
}

func (x *Credential_Spec) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Credential_Spec) GetMaxAuthentications() uint32 {
	if x != nil {
		return x.MaxAuthentications
	}
	return 0
}

func (x *Credential_Spec) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Credential_Spec) GetSessionType() Session_Status_Type {
	if x != nil {
		return x.SessionType
	}
	return Session_Status_TYPE_UNKNOWN
}

func (x *Credential_Spec) GetAuthorization() *Credential_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Credential_Spec) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *Credential_Spec) GetAutoDelete() bool {
	if x != nil {
		return x.AutoDelete
	}
	return false
}

type Credential_Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UserRef is the reference to the User who the Credential is created for
	UserRef              *metav1.ObjectReference `protobuf:"bytes,1,opt,name=userRef,proto3" json:"userRef,omitempty"`
	Id                   string                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TokenID              string                  `protobuf:"bytes,3,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	LastRotationAt       *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=lastRotationAt,proto3" json:"lastRotationAt,omitempty"`
	TotalRotations       uint32                  `protobuf:"varint,5,opt,name=totalRotations,proto3" json:"totalRotations,omitempty"`
	TotalAuthentications uint32                  `protobuf:"varint,6,opt,name=totalAuthentications,proto3" json:"totalAuthentications,omitempty"`
	IsLocked             bool                    `protobuf:"varint,7,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Credential_Status) Reset() {
	*x = Credential_Status{}
	mi := &file_corev1_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential_Status) ProtoMessage() {}

func (x *Credential_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential_Status.ProtoReflect.Descriptor instead.
func (*Credential_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Credential_Status) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

func (x *Credential_Status) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Credential_Status) GetTokenID() string {
	if x != nil {
		return x.TokenID
	}
	return ""
}

func (x *Credential_Status) GetLastRotationAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRotationAt
	}
	return nil
}

func (x *Credential_Status) GetTotalRotations() uint32 {
	if x != nil {
		return x.TotalRotations
	}
	return 0
}

func (x *Credential_Status) GetTotalAuthentications() uint32 {
	if x != nil {
		return x.TotalAuthentications
	}
	return 0
}

func (x *Credential_Status) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

type Credential_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Credential_Spec_Authorization) Reset() {
	*x = Credential_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential_Spec_Authorization) ProtoMessage() {}

func (x *Credential_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*Credential_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{13, 0, 0}
}

func (x *Credential_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Credential_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type Group_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Authorization sets the authorization-related configuration
	Authorization *Group_Spec_Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	Attrs         *structpb.Struct          `protobuf:"bytes,2,opt,name=attrs,proto3" json:"attrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Group_Spec) Reset() {
	*x = Group_Spec{}
	mi := &file_corev1_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group_Spec) ProtoMessage() {}

func (x *Group_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group_Spec.ProtoReflect.Descriptor instead.
func (*Group_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Group_Spec) GetAuthorization() *Group_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *Group_Spec) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

type Group_Status struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Ext           map[string]*structpb.Struct `protobuf:"bytes,1,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Group_Status) Reset() {
	*x = Group_Status{}
	mi := &file_corev1_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group_Status) ProtoMessage() {}

func (x *Group_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group_Status.ProtoReflect.Descriptor instead.
func (*Group_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Group_Status) GetExt() map[string]*structpb.Struct {
	if x != nil {
		return x.Ext
	}
	return nil
}

type Group_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Group_Spec_Authorization) Reset() {
	*x = Group_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Group_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group_Spec_Authorization) ProtoMessage() {}

func (x *Group_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*Group_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{15, 0, 0}
}

func (x *Group_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Group_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type Device_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// State is the Device state
	State         Device_Spec_State          `protobuf:"varint,1,opt,name=state,proto3,enum=octelium.api.main.core.v1.Device_Spec_State" json:"state,omitempty"`
	Authorization *Device_Spec_Authorization `protobuf:"bytes,2,opt,name=authorization,proto3" json:"authorization,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device_Spec) Reset() {
	*x = Device_Spec{}
	mi := &file_corev1_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Spec) ProtoMessage() {}

func (x *Device_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Spec.ProtoReflect.Descriptor instead.
func (*Device_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Device_Spec) GetState() Device_Spec_State {
	if x != nil {
		return x.State
	}
	return Device_Spec_STATE_UNKNOWN
}

func (x *Device_Spec) GetAuthorization() *Device_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

type Device_Status struct {
	state protoimpl.MessageState      `protogen:"open.v1"`
	Ext   map[string]*structpb.Struct `protobuf:"bytes,1,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// UserRef is a reference to the owner User
	UserRef *metav1.ObjectReference `protobuf:"bytes,2,opt,name=userRef,proto3" json:"userRef,omitempty"`
	// OSType is the OS type
	OsType        Device_Status_OSType `protobuf:"varint,3,opt,name=osType,proto3,enum=octelium.api.main.core.v1.Device_Status_OSType" json:"osType,omitempty"`
	Hostname      string               `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Id            string               `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	SerialNumber  string               `protobuf:"bytes,6,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	IsLocked      bool                 `protobuf:"varint,7,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	MacAddresses  []string             `protobuf:"bytes,8,rep,name=macAddresses,proto3" json:"macAddresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Device_Status) Reset() {
	*x = Device_Status{}
	mi := &file_corev1_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Status) ProtoMessage() {}

func (x *Device_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Status.ProtoReflect.Descriptor instead.
func (*Device_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Device_Status) GetExt() map[string]*structpb.Struct {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Device_Status) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

func (x *Device_Status) GetOsType() Device_Status_OSType {
	if x != nil {
		return x.OsType
	}
	return Device_Status_OS_TYPE_UNKNOWN
}

func (x *Device_Status) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Device_Status) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device_Status) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *Device_Status) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *Device_Status) GetMacAddresses() []string {
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

type Device_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Device_Spec_Authorization) Reset() {
	*x = Device_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device_Spec_Authorization) ProtoMessage() {}

func (x *Device_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*Device_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{17, 0, 0}
}

func (x *Device_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Device_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type Config_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Spec) Reset() {
	*x = Config_Spec{}
	mi := &file_corev1_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Spec) ProtoMessage() {}

func (x *Config_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Spec.ProtoReflect.Descriptor instead.
func (*Config_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{27, 0}
}

type Config_Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Status) Reset() {
	*x = Config_Status{}
	mi := &file_corev1_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Status) ProtoMessage() {}

func (x *Config_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Status.ProtoReflect.Descriptor instead.
func (*Config_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{27, 1}
}

type Config_Data struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Config_Data_Value
	//	*Config_Data_ValueBytes
	//	*Config_Data_DataMap_
	//	*Config_Data_Attrs
	Type          isConfig_Data_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Data) Reset() {
	*x = Config_Data{}
	mi := &file_corev1_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Data) ProtoMessage() {}

func (x *Config_Data) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Data.ProtoReflect.Descriptor instead.
func (*Config_Data) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{27, 2}
}

func (x *Config_Data) GetType() isConfig_Data_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Config_Data) GetValue() string {
	if x != nil {
		if x, ok := x.Type.(*Config_Data_Value); ok {
			return x.Value
		}
	}
	return ""
}

func (x *Config_Data) GetValueBytes() []byte {
	if x != nil {
		if x, ok := x.Type.(*Config_Data_ValueBytes); ok {
			return x.ValueBytes
		}
	}
	return nil
}

func (x *Config_Data) GetDataMap() *Config_Data_DataMap {
	if x != nil {
		if x, ok := x.Type.(*Config_Data_DataMap_); ok {
			return x.DataMap
		}
	}
	return nil
}

func (x *Config_Data) GetAttrs() *structpb.Struct {
	if x != nil {
		if x, ok := x.Type.(*Config_Data_Attrs); ok {
			return x.Attrs
		}
	}
	return nil
}

type isConfig_Data_Type interface {
	isConfig_Data_Type()
}

type Config_Data_Value struct {
	// Value is a string value
	Value string `protobuf:"bytes,1,opt,name=value,proto3,oneof"`
}

type Config_Data_ValueBytes struct {
	// ValueBytes is an array of bytes value
	ValueBytes []byte `protobuf:"bytes,2,opt,name=valueBytes,proto3,oneof"`
}

type Config_Data_DataMap_ struct {
	// DataMap is a map of array of bytes value
	DataMap *Config_Data_DataMap `protobuf:"bytes,3,opt,name=dataMap,proto3,oneof"`
}

type Config_Data_Attrs struct {
	// Attrs is a structured attribute map. It is extremely recommended to use
	// camelCase for key names in order to be conformant with the rest of
	// Octelium's API naming convention
	Attrs *structpb.Struct `protobuf:"bytes,4,opt,name=attrs,proto3,oneof"`
}

func (*Config_Data_Value) isConfig_Data_Type() {}

func (*Config_Data_ValueBytes) isConfig_Data_Type() {}

func (*Config_Data_DataMap_) isConfig_Data_Type() {}

func (*Config_Data_Attrs) isConfig_Data_Type() {}

type Config_Data_DataMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Map           map[string][]byte      `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config_Data_DataMap) Reset() {
	*x = Config_Data_DataMap{}
	mi := &file_corev1_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config_Data_DataMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Data_DataMap) ProtoMessage() {}

func (x *Config_Data_DataMap) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Data_DataMap.ProtoReflect.Descriptor instead.
func (*Config_Data_DataMap) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{27, 2, 0}
}

func (x *Config_Data_DataMap) GetMap() map[string][]byte {
	if x != nil {
		return x.Map
	}
	return nil
}

type Scope_Service struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Scope_Service_All_
	//	*Scope_Service_Filter_
	Type          isScope_Service_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope_Service) Reset() {
	*x = Scope_Service{}
	mi := &file_corev1_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope_Service) ProtoMessage() {}

func (x *Scope_Service) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope_Service.ProtoReflect.Descriptor instead.
func (*Scope_Service) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{29, 0}
}

func (x *Scope_Service) GetType() isScope_Service_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Scope_Service) GetAll() *Scope_Service_All {
	if x != nil {
		if x, ok := x.Type.(*Scope_Service_All_); ok {
			return x.All
		}
	}
	return nil
}

func (x *Scope_Service) GetFilter() *Scope_Service_Filter {
	if x != nil {
		if x, ok := x.Type.(*Scope_Service_Filter_); ok {
			return x.Filter
		}
	}
	return nil
}

type isScope_Service_Type interface {
	isScope_Service_Type()
}

type Scope_Service_All_ struct {
	// All means allow access to all Services
	All *Scope_Service_All `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type Scope_Service_Filter_ struct {
	// Filter filters access to certain Services or certain Namespaces
	Filter *Scope_Service_Filter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

func (*Scope_Service_All_) isScope_Service_Type() {}

func (*Scope_Service_Filter_) isScope_Service_Type() {}

type Scope_API struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Scope_API_All_
	//	*Scope_API_Filter_
	Type          isScope_API_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope_API) Reset() {
	*x = Scope_API{}
	mi := &file_corev1_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope_API) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope_API) ProtoMessage() {}

func (x *Scope_API) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope_API.ProtoReflect.Descriptor instead.
func (*Scope_API) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{29, 1}
}

func (x *Scope_API) GetType() isScope_API_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Scope_API) GetAll() *Scope_API_All {
	if x != nil {
		if x, ok := x.Type.(*Scope_API_All_); ok {
			return x.All
		}
	}
	return nil
}

func (x *Scope_API) GetFilter() *Scope_API_Filter {
	if x != nil {
		if x, ok := x.Type.(*Scope_API_Filter_); ok {
			return x.Filter
		}
	}
	return nil
}

type isScope_API_Type interface {
	isScope_API_Type()
}

type Scope_API_All_ struct {
	// All means allow access to all APIs
	All *Scope_API_All `protobuf:"bytes,1,opt,name=all,proto3,oneof"`
}

type Scope_API_Filter_ struct {
	// Filter filters access to certain APIs or certain methods of certain
	// APIs
	Filter *Scope_API_Filter `protobuf:"bytes,2,opt,name=filter,proto3,oneof"`
}

func (*Scope_API_All_) isScope_API_Type() {}

func (*Scope_API_Filter_) isScope_API_Type() {}

type Scope_Service_All struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope_Service_All) Reset() {
	*x = Scope_Service_All{}
	mi := &file_corev1_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope_Service_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope_Service_All) ProtoMessage() {}

func (x *Scope_Service_All) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope_Service_All.ProtoReflect.Descriptor instead.
func (*Scope_Service_All) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{29, 0, 0}
}

type Scope_Service_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Names is the list of allowed Service names
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	// Namespaces is the list of allowed Namespace names
	Namespaces    []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope_Service_Filter) Reset() {
	*x = Scope_Service_Filter{}
	mi := &file_corev1_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope_Service_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope_Service_Filter) ProtoMessage() {}

func (x *Scope_Service_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope_Service_Filter.ProtoReflect.Descriptor instead.
func (*Scope_Service_Filter) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{29, 0, 1}
}

func (x *Scope_Service_Filter) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Scope_Service_Filter) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

type Scope_API_All struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope_API_All) Reset() {
	*x = Scope_API_All{}
	mi := &file_corev1_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope_API_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope_API_All) ProtoMessage() {}

func (x *Scope_API_All) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope_API_All.ProtoReflect.Descriptor instead.
func (*Scope_API_All) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{29, 1, 0}
}

type Scope_API_Filter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Packages is the list of gRPC packages
	Packages []string `protobuf:"bytes,1,rep,name=packages,proto3" json:"packages,omitempty"`
	// Services is the list of gRPC services
	Services []string `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// Methods is the list of gRPC methods
	Methods       []string `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Scope_API_Filter) Reset() {
	*x = Scope_API_Filter{}
	mi := &file_corev1_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Scope_API_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scope_API_Filter) ProtoMessage() {}

func (x *Scope_API_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scope_API_Filter.ProtoReflect.Descriptor instead.
func (*Scope_API_Filter) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{29, 1, 1}
}

func (x *Scope_API_Filter) GetPackages() []string {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *Scope_API_Filter) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Scope_API_Filter) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

type Policy_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Rules is the list of Policy rules
	Rules []*Policy_Spec_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// EnforcementRules is the list of enforcement rules that are typically used
	// as a precondition for using the Policy rules. You can simply extract your
	// shared conditions from your rules and write them instead inside
	// enforcementRules for better performance and readability
	EnforcementRules []*Policy_Spec_EnforcementRule `protobuf:"bytes,2,rep,name=enforcementRules,proto3" json:"enforcementRules,omitempty"`
	Attrs            *structpb.Struct               `protobuf:"bytes,3,opt,name=attrs,proto3" json:"attrs,omitempty"`
	// IsDisabled disables (i.e. deactivates) the Policy. You can use this to
	// temporarily disable enforcing the Policy altogether instead of having to
	// delete it or de-attach it from the different Resources attaching it.
	IsDisabled    bool `protobuf:"varint,4,opt,name=isDisabled,proto3" json:"isDisabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy_Spec) Reset() {
	*x = Policy_Spec{}
	mi := &file_corev1_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Spec) ProtoMessage() {}

func (x *Policy_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Spec.ProtoReflect.Descriptor instead.
func (*Policy_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{30, 0}
}

func (x *Policy_Spec) GetRules() []*Policy_Spec_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Policy_Spec) GetEnforcementRules() []*Policy_Spec_EnforcementRule {
	if x != nil {
		return x.EnforcementRules
	}
	return nil
}

func (x *Policy_Spec) GetAttrs() *structpb.Struct {
	if x != nil {
		return x.Attrs
	}
	return nil
}

func (x *Policy_Spec) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

type Policy_Status struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	ParentPolicyRef *metav1.ObjectReference `protobuf:"bytes,1,opt,name=parentPolicyRef,proto3" json:"parentPolicyRef,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Policy_Status) Reset() {
	*x = Policy_Status{}
	mi := &file_corev1_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Status) ProtoMessage() {}

func (x *Policy_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Status.ProtoReflect.Descriptor instead.
func (*Policy_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{30, 1}
}

func (x *Policy_Status) GetParentPolicyRef() *metav1.ObjectReference {
	if x != nil {
		return x.ParentPolicyRef
	}
	return nil
}

type Policy_Spec_Rule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is an optional name for the rule. It is currently useful in Logs
	// to understand which rule triggered the Policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Condition is the rule's Condition that must match in order for the
	// rule, and subsequently the Policy as whole, to match
	Condition *Condition `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	// Effect is the effect of the policy when a match happens to any of the
	// Conditions.
	Effect Policy_Spec_Rule_Effect `protobuf:"varint,3,opt,name=effect,proto3,enum=octelium.api.main.core.v1.Policy_Spec_Rule_Effect" json:"effect,omitempty"`
	// Priority is an integer that sets the rule priority level. The lower the
	// number, the higher the priority. Currently the range of numbers is
	// between -4 (i.e. the highest priority) and 4
	// (i.e. the lowest priority).
	Priority      int32 `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy_Spec_Rule) Reset() {
	*x = Policy_Spec_Rule{}
	mi := &file_corev1_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy_Spec_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Spec_Rule) ProtoMessage() {}

func (x *Policy_Spec_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Spec_Rule.ProtoReflect.Descriptor instead.
func (*Policy_Spec_Rule) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{30, 0, 0}
}

func (x *Policy_Spec_Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy_Spec_Rule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Policy_Spec_Rule) GetEffect() Policy_Spec_Rule_Effect {
	if x != nil {
		return x.Effect
	}
	return Policy_Spec_Rule_EFFECT_UNKNOWN
}

func (x *Policy_Spec_Rule) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type Policy_Spec_EnforcementRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Condition is the enforcement rule's Condition
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// Effect is the effect of the policy when a match happens to any of the
	// Conditions.
	Effect        Policy_Spec_EnforcementRule_Effect `protobuf:"varint,2,opt,name=effect,proto3,enum=octelium.api.main.core.v1.Policy_Spec_EnforcementRule_Effect" json:"effect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy_Spec_EnforcementRule) Reset() {
	*x = Policy_Spec_EnforcementRule{}
	mi := &file_corev1_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy_Spec_EnforcementRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy_Spec_EnforcementRule) ProtoMessage() {}

func (x *Policy_Spec_EnforcementRule) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy_Spec_EnforcementRule.ProtoReflect.Descriptor instead.
func (*Policy_Spec_EnforcementRule) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{30, 0, 1}
}

func (x *Policy_Spec_EnforcementRule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Policy_Spec_EnforcementRule) GetEffect() Policy_Spec_EnforcementRule_Effect {
	if x != nil {
		return x.Effect
	}
	return Policy_Spec_EnforcementRule_EFFECT_UNKNOWN
}

type AccessLog_Entry struct {
	state  protoimpl.MessageState  `protogen:"open.v1"`
	Common *AccessLog_Entry_Common `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	// Info is the log entry information.
	Info          *AccessLog_Entry_Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry) Reset() {
	*x = AccessLog_Entry{}
	mi := &file_corev1_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry) ProtoMessage() {}

func (x *AccessLog_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0}
}

func (x *AccessLog_Entry) GetCommon() *AccessLog_Entry_Common {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *AccessLog_Entry) GetInfo() *AccessLog_Entry_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type AccessLog_Entry_Info struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AccessLog_Entry_Info_Tcp
	//	*AccessLog_Entry_Info_Http
	//	*AccessLog_Entry_Info_Ssh
	//	*AccessLog_Entry_Info_Udp
	//	*AccessLog_Entry_Info_Postgres_
	//	*AccessLog_Entry_Info_Kubernetes_
	//	*AccessLog_Entry_Info_Grpc
	//	*AccessLog_Entry_Info_Mysql
	//	*AccessLog_Entry_Info_Dns
	Type          isAccessLog_Entry_Info_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info) Reset() {
	*x = AccessLog_Entry_Info{}
	mi := &file_corev1_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info) ProtoMessage() {}

func (x *AccessLog_Entry_Info) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0}
}

func (x *AccessLog_Entry_Info) GetType() isAccessLog_Entry_Info_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetTcp() *AccessLog_Entry_Info_TCP {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Tcp); ok {
			return x.Tcp
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetHttp() *AccessLog_Entry_Info_HTTP {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetSsh() *AccessLog_Entry_Info_SSH {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Ssh); ok {
			return x.Ssh
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetUdp() *AccessLog_Entry_Info_UDP {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Udp); ok {
			return x.Udp
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetPostgres() *AccessLog_Entry_Info_Postgres {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetKubernetes() *AccessLog_Entry_Info_Kubernetes {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Kubernetes_); ok {
			return x.Kubernetes
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetGrpc() *AccessLog_Entry_Info_GRPC {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Grpc); ok {
			return x.Grpc
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetMysql() *AccessLog_Entry_Info_MySQL {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Mysql); ok {
			return x.Mysql
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info) GetDns() *AccessLog_Entry_Info_DNS {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Info_Dns); ok {
			return x.Dns
		}
	}
	return nil
}

type isAccessLog_Entry_Info_Type interface {
	isAccessLog_Entry_Info_Type()
}

type AccessLog_Entry_Info_Tcp struct {
	// TCP sets the TCP-specific entry details
	Tcp *AccessLog_Entry_Info_TCP `protobuf:"bytes,1,opt,name=tcp,proto3,oneof"`
}

type AccessLog_Entry_Info_Http struct {
	// HTTP sets the HTTP-specific entry details
	Http *AccessLog_Entry_Info_HTTP `protobuf:"bytes,2,opt,name=http,proto3,oneof"`
}

type AccessLog_Entry_Info_Ssh struct {
	// SSH sets the SSH-specific entry details
	Ssh *AccessLog_Entry_Info_SSH `protobuf:"bytes,3,opt,name=ssh,proto3,oneof"`
}

type AccessLog_Entry_Info_Udp struct {
	// UDP sets the UDP-specific entry details
	Udp *AccessLog_Entry_Info_UDP `protobuf:"bytes,4,opt,name=udp,proto3,oneof"`
}

type AccessLog_Entry_Info_Postgres_ struct {
	// Postgres sets the PostgreSQL-specific entry details
	Postgres *AccessLog_Entry_Info_Postgres `protobuf:"bytes,5,opt,name=postgres,proto3,oneof"`
}

type AccessLog_Entry_Info_Kubernetes_ struct {
	// Kubernetes sets the Kubernetes-specific entry details
	Kubernetes *AccessLog_Entry_Info_Kubernetes `protobuf:"bytes,6,opt,name=kubernetes,proto3,oneof"`
}

type AccessLog_Entry_Info_Grpc struct {
	// GRPC sets the gRPC-specific entry details
	Grpc *AccessLog_Entry_Info_GRPC `protobuf:"bytes,7,opt,name=grpc,proto3,oneof"`
}

type AccessLog_Entry_Info_Mysql struct {
	// MySQL sets the MySQL-specific entry details
	Mysql *AccessLog_Entry_Info_MySQL `protobuf:"bytes,8,opt,name=mysql,proto3,oneof"`
}

type AccessLog_Entry_Info_Dns struct {
	// DNS sets the DNS-specific entry details
	Dns *AccessLog_Entry_Info_DNS `protobuf:"bytes,9,opt,name=dns,proto3,oneof"`
}

func (*AccessLog_Entry_Info_Tcp) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Http) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Ssh) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Udp) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Postgres_) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Kubernetes_) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Grpc) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Mysql) isAccessLog_Entry_Info_Type() {}

func (*AccessLog_Entry_Info_Dns) isAccessLog_Entry_Info_Type() {}

type AccessLog_Entry_Common struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// StartedAt is the start time of the connection/request.
	StartedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	// EndedAt is the end time of the connection/request.
	EndedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endedAt,proto3" json:"endedAt,omitempty"`
	// Status is the connection/request status (i.e. "ALLOWED" or "DENIED").
	Status AccessLog_Entry_Common_Status `protobuf:"varint,3,opt,name=status,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Common_Status" json:"status,omitempty"`
	// Mode is the Service mode
	Mode Service_Spec_Mode `protobuf:"varint,4,opt,name=mode,proto3,enum=octelium.api.main.core.v1.Service_Spec_Mode" json:"mode,omitempty"`
	// Reason sets the details as to why the request is allowed or denied
	// (e.g. the Policy that triggered the decision)
	Reason *AccessLog_Entry_Common_Reason `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// SessionRef refers the Session.
	SessionRef *metav1.ObjectReference `protobuf:"bytes,6,opt,name=sessionRef,proto3" json:"sessionRef,omitempty"`
	UserRef    *metav1.ObjectReference `protobuf:"bytes,7,opt,name=userRef,proto3" json:"userRef,omitempty"`
	DeviceRef  *metav1.ObjectReference `protobuf:"bytes,8,opt,name=deviceRef,proto3" json:"deviceRef,omitempty"`
	// ServiceRef refers the Service.
	ServiceRef    *metav1.ObjectReference `protobuf:"bytes,9,opt,name=serviceRef,proto3" json:"serviceRef,omitempty"`
	NamespaceRef  *metav1.ObjectReference `protobuf:"bytes,10,opt,name=namespaceRef,proto3" json:"namespaceRef,omitempty"`
	RegionRef     *metav1.ObjectReference `protobuf:"bytes,11,opt,name=regionRef,proto3" json:"regionRef,omitempty"`
	ConnectionID  string                  `protobuf:"bytes,12,opt,name=connectionID,proto3" json:"connectionID,omitempty"`
	SessionID     string                  `protobuf:"bytes,13,opt,name=sessionID,proto3" json:"sessionID,omitempty"`
	Sequence      int64                   `protobuf:"varint,14,opt,name=sequence,proto3" json:"sequence,omitempty"`
	IsPublic      bool                    `protobuf:"varint,15,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	IsAnonymous   bool                    `protobuf:"varint,16,opt,name=isAnonymous,proto3" json:"isAnonymous,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Common) Reset() {
	*x = AccessLog_Entry_Common{}
	mi := &file_corev1_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Common) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Common) ProtoMessage() {}

func (x *AccessLog_Entry_Common) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Common.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Common) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1}
}

func (x *AccessLog_Entry_Common) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetEndedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndedAt
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetStatus() AccessLog_Entry_Common_Status {
	if x != nil {
		return x.Status
	}
	return AccessLog_Entry_Common_STATUS_UNSET
}

func (x *AccessLog_Entry_Common) GetMode() Service_Spec_Mode {
	if x != nil {
		return x.Mode
	}
	return Service_Spec_MODE_UNSET
}

func (x *AccessLog_Entry_Common) GetReason() *AccessLog_Entry_Common_Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetSessionRef() *metav1.ObjectReference {
	if x != nil {
		return x.SessionRef
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetDeviceRef() *metav1.ObjectReference {
	if x != nil {
		return x.DeviceRef
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetServiceRef() *metav1.ObjectReference {
	if x != nil {
		return x.ServiceRef
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetNamespaceRef() *metav1.ObjectReference {
	if x != nil {
		return x.NamespaceRef
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetRegionRef() *metav1.ObjectReference {
	if x != nil {
		return x.RegionRef
	}
	return nil
}

func (x *AccessLog_Entry_Common) GetConnectionID() string {
	if x != nil {
		return x.ConnectionID
	}
	return ""
}

func (x *AccessLog_Entry_Common) GetSessionID() string {
	if x != nil {
		return x.SessionID
	}
	return ""
}

func (x *AccessLog_Entry_Common) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *AccessLog_Entry_Common) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *AccessLog_Entry_Common) GetIsAnonymous() bool {
	if x != nil {
		return x.IsAnonymous
	}
	return false
}

type AccessLog_Entry_Info_HTTP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Request is the HTTP request information.
	Request *AccessLog_Entry_Info_HTTP_Request `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Response is the HTTP response information.
	Response *AccessLog_Entry_Info_HTTP_Response `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	// HTTPVersion is the HTTP version.
	HttpVersion   AccessLog_Entry_Info_HTTP_HTTPVersion `protobuf:"varint,3,opt,name=httpVersion,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_HTTP_HTTPVersion" json:"httpVersion,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_HTTP) Reset() {
	*x = AccessLog_Entry_Info_HTTP{}
	mi := &file_corev1_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_HTTP) ProtoMessage() {}

func (x *AccessLog_Entry_Info_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_HTTP.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_HTTP) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 0}
}

func (x *AccessLog_Entry_Info_HTTP) GetRequest() *AccessLog_Entry_Info_HTTP_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *AccessLog_Entry_Info_HTTP) GetResponse() *AccessLog_Entry_Info_HTTP_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AccessLog_Entry_Info_HTTP) GetHttpVersion() AccessLog_Entry_Info_HTTP_HTTPVersion {
	if x != nil {
		return x.HttpVersion
	}
	return AccessLog_Entry_Info_HTTP_HTTP_VERSION_UNKNOWN
}

type AccessLog_Entry_Info_TCP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the entry SSH-specific type
	Type AccessLog_Entry_Info_TCP_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_TCP_Type" json:"type,omitempty"`
	// ReceivedBytes is the number of bytes received from downstream. Only
	// used with END entries.
	ReceivedBytes uint64 `protobuf:"varint,2,opt,name=receivedBytes,proto3" json:"receivedBytes,omitempty"`
	// SentBytes is the number of bytes sent to downstream. Only used with
	// END entries.
	SentBytes     uint64 `protobuf:"varint,3,opt,name=sentBytes,proto3" json:"sentBytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_TCP) Reset() {
	*x = AccessLog_Entry_Info_TCP{}
	mi := &file_corev1_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_TCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_TCP) ProtoMessage() {}

func (x *AccessLog_Entry_Info_TCP) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_TCP.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_TCP) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 1}
}

func (x *AccessLog_Entry_Info_TCP) GetType() AccessLog_Entry_Info_TCP_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Info_TCP_TYPE_UNKNOWN
}

func (x *AccessLog_Entry_Info_TCP) GetReceivedBytes() uint64 {
	if x != nil {
		return x.ReceivedBytes
	}
	return 0
}

func (x *AccessLog_Entry_Info_TCP) GetSentBytes() uint64 {
	if x != nil {
		return x.SentBytes
	}
	return 0
}

type AccessLog_Entry_Info_SSH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the SSH-specific request type of the entry
	Type AccessLog_Entry_Info_SSH_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_SSH_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//
	//	*AccessLog_Entry_Info_SSH_Start_
	//	*AccessLog_Entry_Info_SSH_DirectTCPIPStart_
	//	*AccessLog_Entry_Info_SSH_SessionRecording_
	//	*AccessLog_Entry_Info_SSH_SessionRequestExec_
	//	*AccessLog_Entry_Info_SSH_SessionRequestSubsystem_
	Details       isAccessLog_Entry_Info_SSH_Details `protobuf_oneof:"details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_SSH) Reset() {
	*x = AccessLog_Entry_Info_SSH{}
	mi := &file_corev1_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_SSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_SSH) ProtoMessage() {}

func (x *AccessLog_Entry_Info_SSH) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_SSH) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2}
}

func (x *AccessLog_Entry_Info_SSH) GetType() AccessLog_Entry_Info_SSH_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Info_SSH_TYPE_UNKNOWN
}

func (x *AccessLog_Entry_Info_SSH) GetDetails() isAccessLog_Entry_Info_SSH_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AccessLog_Entry_Info_SSH) GetStart() *AccessLog_Entry_Info_SSH_Start {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_SSH_Start_); ok {
			return x.Start
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_SSH) GetDirectTCPIPStart() *AccessLog_Entry_Info_SSH_DirectTCPIPStart {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_SSH_DirectTCPIPStart_); ok {
			return x.DirectTCPIPStart
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_SSH) GetSessionRecording() *AccessLog_Entry_Info_SSH_SessionRecording {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_SSH_SessionRecording_); ok {
			return x.SessionRecording
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_SSH) GetSessionRequestExec() *AccessLog_Entry_Info_SSH_SessionRequestExec {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_SSH_SessionRequestExec_); ok {
			return x.SessionRequestExec
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_SSH) GetSessionRequestSubsystem() *AccessLog_Entry_Info_SSH_SessionRequestSubsystem {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_SSH_SessionRequestSubsystem_); ok {
			return x.SessionRequestSubsystem
		}
	}
	return nil
}

type isAccessLog_Entry_Info_SSH_Details interface {
	isAccessLog_Entry_Info_SSH_Details()
}

type AccessLog_Entry_Info_SSH_Start_ struct {
	// Start shows the details of the new SSH connection
	Start *AccessLog_Entry_Info_SSH_Start `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

type AccessLog_Entry_Info_SSH_DirectTCPIPStart_ struct {
	// DirectTCPIPStart shows the details of the requested
	// "direct-tcpip" channel
	DirectTCPIPStart *AccessLog_Entry_Info_SSH_DirectTCPIPStart `protobuf:"bytes,3,opt,name=directTCPIPStart,proto3,oneof"`
}

type AccessLog_Entry_Info_SSH_SessionRecording_ struct {
	// SessionRecording shows the details and a session recording
	SessionRecording *AccessLog_Entry_Info_SSH_SessionRecording `protobuf:"bytes,4,opt,name=sessionRecording,proto3,oneof"`
}

type AccessLog_Entry_Info_SSH_SessionRequestExec_ struct {
	// SessionRequestExec shows the details of a session exec request
	SessionRequestExec *AccessLog_Entry_Info_SSH_SessionRequestExec `protobuf:"bytes,5,opt,name=sessionRequestExec,proto3,oneof"`
}

type AccessLog_Entry_Info_SSH_SessionRequestSubsystem_ struct {
	// SessionRequestSubsystem shows the details of a session subsystem
	// request
	SessionRequestSubsystem *AccessLog_Entry_Info_SSH_SessionRequestSubsystem `protobuf:"bytes,6,opt,name=sessionRequestSubsystem,proto3,oneof"`
}

func (*AccessLog_Entry_Info_SSH_Start_) isAccessLog_Entry_Info_SSH_Details() {}

func (*AccessLog_Entry_Info_SSH_DirectTCPIPStart_) isAccessLog_Entry_Info_SSH_Details() {}

func (*AccessLog_Entry_Info_SSH_SessionRecording_) isAccessLog_Entry_Info_SSH_Details() {}

func (*AccessLog_Entry_Info_SSH_SessionRequestExec_) isAccessLog_Entry_Info_SSH_Details() {}

func (*AccessLog_Entry_Info_SSH_SessionRequestSubsystem_) isAccessLog_Entry_Info_SSH_Details() {}

type AccessLog_Entry_Info_UDP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the UDP-specific log entry type
	Type          AccessLog_Entry_Info_UDP_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_UDP_Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_UDP) Reset() {
	*x = AccessLog_Entry_Info_UDP{}
	mi := &file_corev1_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_UDP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_UDP) ProtoMessage() {}

func (x *AccessLog_Entry_Info_UDP) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_UDP.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_UDP) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 3}
}

func (x *AccessLog_Entry_Info_UDP) GetType() AccessLog_Entry_Info_UDP_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Info_UDP_TYPE_UNKNOWN
}

type AccessLog_Entry_Info_Postgres struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the PostgreSQL-specific log entry type
	Type AccessLog_Entry_Info_Postgres_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_Postgres_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//
	//	*AccessLog_Entry_Info_Postgres_Start_
	//	*AccessLog_Entry_Info_Postgres_Query_
	//	*AccessLog_Entry_Info_Postgres_Parse_
	Details       isAccessLog_Entry_Info_Postgres_Details `protobuf_oneof:"details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_Postgres) Reset() {
	*x = AccessLog_Entry_Info_Postgres{}
	mi := &file_corev1_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_Postgres) ProtoMessage() {}

func (x *AccessLog_Entry_Info_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_Postgres.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_Postgres) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 4}
}

func (x *AccessLog_Entry_Info_Postgres) GetType() AccessLog_Entry_Info_Postgres_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Info_Postgres_TYPE_UNKNOWN
}

func (x *AccessLog_Entry_Info_Postgres) GetDetails() isAccessLog_Entry_Info_Postgres_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AccessLog_Entry_Info_Postgres) GetStart() *AccessLog_Entry_Info_Postgres_Start {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_Postgres_Start_); ok {
			return x.Start
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_Postgres) GetQuery() *AccessLog_Entry_Info_Postgres_Query {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_Postgres_Query_); ok {
			return x.Query
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_Postgres) GetParse() *AccessLog_Entry_Info_Postgres_Parse {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_Postgres_Parse_); ok {
			return x.Parse
		}
	}
	return nil
}

type isAccessLog_Entry_Info_Postgres_Details interface {
	isAccessLog_Entry_Info_Postgres_Details()
}

type AccessLog_Entry_Info_Postgres_Start_ struct {
	// Starts shows the details of the start of a PostgreSQL connection
	Start *AccessLog_Entry_Info_Postgres_Start `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

type AccessLog_Entry_Info_Postgres_Query_ struct {
	// Query shows the details of the query message
	Query *AccessLog_Entry_Info_Postgres_Query `protobuf:"bytes,3,opt,name=query,proto3,oneof"`
}

type AccessLog_Entry_Info_Postgres_Parse_ struct {
	// Parse shows the details of the parse message
	Parse *AccessLog_Entry_Info_Postgres_Parse `protobuf:"bytes,4,opt,name=parse,proto3,oneof"`
}

func (*AccessLog_Entry_Info_Postgres_Start_) isAccessLog_Entry_Info_Postgres_Details() {}

func (*AccessLog_Entry_Info_Postgres_Query_) isAccessLog_Entry_Info_Postgres_Details() {}

func (*AccessLog_Entry_Info_Postgres_Parse_) isAccessLog_Entry_Info_Postgres_Details() {}

type AccessLog_Entry_Info_MySQL struct {
	state protoimpl.MessageState          `protogen:"open.v1"`
	Type  AccessLog_Entry_Info_MySQL_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_MySQL_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//
	//	*AccessLog_Entry_Info_MySQL_Query_
	//	*AccessLog_Entry_Info_MySQL_InitDB_
	//	*AccessLog_Entry_Info_MySQL_CreateDB_
	//	*AccessLog_Entry_Info_MySQL_DropDB_
	//	*AccessLog_Entry_Info_MySQL_PrepareStatement_
	Details       isAccessLog_Entry_Info_MySQL_Details `protobuf_oneof:"details"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_MySQL) Reset() {
	*x = AccessLog_Entry_Info_MySQL{}
	mi := &file_corev1_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_MySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_MySQL) ProtoMessage() {}

func (x *AccessLog_Entry_Info_MySQL) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_MySQL.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_MySQL) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 5}
}

func (x *AccessLog_Entry_Info_MySQL) GetType() AccessLog_Entry_Info_MySQL_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Info_MySQL_TYPE_UNKNOWN
}

func (x *AccessLog_Entry_Info_MySQL) GetDetails() isAccessLog_Entry_Info_MySQL_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *AccessLog_Entry_Info_MySQL) GetQuery() *AccessLog_Entry_Info_MySQL_Query {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_MySQL_Query_); ok {
			return x.Query
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_MySQL) GetInitDB() *AccessLog_Entry_Info_MySQL_InitDB {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_MySQL_InitDB_); ok {
			return x.InitDB
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_MySQL) GetCreateDB() *AccessLog_Entry_Info_MySQL_CreateDB {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_MySQL_CreateDB_); ok {
			return x.CreateDB
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_MySQL) GetDropDB() *AccessLog_Entry_Info_MySQL_DropDB {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_MySQL_DropDB_); ok {
			return x.DropDB
		}
	}
	return nil
}

func (x *AccessLog_Entry_Info_MySQL) GetPrepareStatement() *AccessLog_Entry_Info_MySQL_PrepareStatement {
	if x != nil {
		if x, ok := x.Details.(*AccessLog_Entry_Info_MySQL_PrepareStatement_); ok {
			return x.PrepareStatement
		}
	}
	return nil
}

type isAccessLog_Entry_Info_MySQL_Details interface {
	isAccessLog_Entry_Info_MySQL_Details()
}

type AccessLog_Entry_Info_MySQL_Query_ struct {
	Query *AccessLog_Entry_Info_MySQL_Query `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

type AccessLog_Entry_Info_MySQL_InitDB_ struct {
	InitDB *AccessLog_Entry_Info_MySQL_InitDB `protobuf:"bytes,3,opt,name=initDB,proto3,oneof"`
}

type AccessLog_Entry_Info_MySQL_CreateDB_ struct {
	CreateDB *AccessLog_Entry_Info_MySQL_CreateDB `protobuf:"bytes,4,opt,name=createDB,proto3,oneof"`
}

type AccessLog_Entry_Info_MySQL_DropDB_ struct {
	DropDB *AccessLog_Entry_Info_MySQL_DropDB `protobuf:"bytes,5,opt,name=dropDB,proto3,oneof"`
}

type AccessLog_Entry_Info_MySQL_PrepareStatement_ struct {
	PrepareStatement *AccessLog_Entry_Info_MySQL_PrepareStatement `protobuf:"bytes,6,opt,name=prepareStatement,proto3,oneof"`
}

func (*AccessLog_Entry_Info_MySQL_Query_) isAccessLog_Entry_Info_MySQL_Details() {}

func (*AccessLog_Entry_Info_MySQL_InitDB_) isAccessLog_Entry_Info_MySQL_Details() {}

func (*AccessLog_Entry_Info_MySQL_CreateDB_) isAccessLog_Entry_Info_MySQL_Details() {}

func (*AccessLog_Entry_Info_MySQL_DropDB_) isAccessLog_Entry_Info_MySQL_Details() {}

func (*AccessLog_Entry_Info_MySQL_PrepareStatement_) isAccessLog_Entry_Info_MySQL_Details() {}

type AccessLog_Entry_Info_Kubernetes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTP shows the underlying HTTP information of the request/response
	Http *AccessLog_Entry_Info_HTTP `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	// Verb is the request verb (e.g. "create", "get", "update", "list",
	// "delete", "watch", "patch", "deletecollection")
	Verb string `protobuf:"bytes,2,opt,name=verb,proto3" json:"verb,omitempty"`
	// APIPrefix is the API prefix
	ApiPrefix string `protobuf:"bytes,3,opt,name=apiPrefix,proto3" json:"apiPrefix,omitempty"`
	// APIGroup is the API group
	ApiGroup string `protobuf:"bytes,4,opt,name=apiGroup,proto3" json:"apiGroup,omitempty"`
	// APIVersion is the API version
	ApiVersion string `protobuf:"bytes,5,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Namespace is the namespace
	Namespace string `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Resource is the resource (e.g. "pods")
	Resource string `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	// Subresource is the subresource (e.g. "status")
	Subresource string `protobuf:"bytes,8,opt,name=subresource,proto3" json:"subresource,omitempty"`
	// Name is the resource name if available
	Name          string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_Kubernetes) Reset() {
	*x = AccessLog_Entry_Info_Kubernetes{}
	mi := &file_corev1_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_Kubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_Kubernetes) ProtoMessage() {}

func (x *AccessLog_Entry_Info_Kubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_Kubernetes.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_Kubernetes) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 6}
}

func (x *AccessLog_Entry_Info_Kubernetes) GetHttp() *AccessLog_Entry_Info_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *AccessLog_Entry_Info_Kubernetes) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *AccessLog_Entry_Info_Kubernetes) GetApiPrefix() string {
	if x != nil {
		return x.ApiPrefix
	}
	return ""
}

func (x *AccessLog_Entry_Info_Kubernetes) GetApiGroup() string {
	if x != nil {
		return x.ApiGroup
	}
	return ""
}

func (x *AccessLog_Entry_Info_Kubernetes) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *AccessLog_Entry_Info_Kubernetes) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AccessLog_Entry_Info_Kubernetes) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *AccessLog_Entry_Info_Kubernetes) GetSubresource() string {
	if x != nil {
		return x.Subresource
	}
	return ""
}

func (x *AccessLog_Entry_Info_Kubernetes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AccessLog_Entry_Info_GRPC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HTTP shows the underlying HTTP information of the request/response
	Http *AccessLog_Entry_Info_HTTP `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	// Method is the gRPC method
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Service is the gRPC service
	Service string `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	// ServiceFullName is the full name of the Service (i.e.
	// "<package>.<service>")
	ServiceFullName string `protobuf:"bytes,4,opt,name=serviceFullName,proto3" json:"serviceFullName,omitempty"`
	// Package is the gRPC package
	Package string `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	// Status is the grpc-status value
	Status int32 `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// Message is the grpc-message value
	Message       string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_GRPC) Reset() {
	*x = AccessLog_Entry_Info_GRPC{}
	mi := &file_corev1_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_GRPC) ProtoMessage() {}

func (x *AccessLog_Entry_Info_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_GRPC.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_GRPC) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 7}
}

func (x *AccessLog_Entry_Info_GRPC) GetHttp() *AccessLog_Entry_Info_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *AccessLog_Entry_Info_GRPC) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AccessLog_Entry_Info_GRPC) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *AccessLog_Entry_Info_GRPC) GetServiceFullName() string {
	if x != nil {
		return x.ServiceFullName
	}
	return ""
}

func (x *AccessLog_Entry_Info_GRPC) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *AccessLog_Entry_Info_GRPC) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AccessLog_Entry_Info_GRPC) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AccessLog_Entry_Info_DNS struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Type          AccessLog_Entry_Info_DNS_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_DNS_Type" json:"type,omitempty"`
	TypeID        int64                         `protobuf:"varint,2,opt,name=typeID,proto3" json:"typeID,omitempty"`
	Name          string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Answer        string                        `protobuf:"bytes,4,opt,name=answer,proto3" json:"answer,omitempty"`
	Rcode         int64                         `protobuf:"varint,5,opt,name=rcode,proto3" json:"rcode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_DNS) Reset() {
	*x = AccessLog_Entry_Info_DNS{}
	mi := &file_corev1_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_DNS) ProtoMessage() {}

func (x *AccessLog_Entry_Info_DNS) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_DNS.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_DNS) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 8}
}

func (x *AccessLog_Entry_Info_DNS) GetType() AccessLog_Entry_Info_DNS_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Info_DNS_TYPE_UNSET
}

func (x *AccessLog_Entry_Info_DNS) GetTypeID() int64 {
	if x != nil {
		return x.TypeID
	}
	return 0
}

func (x *AccessLog_Entry_Info_DNS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessLog_Entry_Info_DNS) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *AccessLog_Entry_Info_DNS) GetRcode() int64 {
	if x != nil {
		return x.Rcode
	}
	return 0
}

type AccessLog_Entry_Info_HTTP_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path is the request's path without the query params.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// UserAgent is the value of the `User-Agent` request header.
	UserAgent string `protobuf:"bytes,2,opt,name=userAgent,proto3" json:"userAgent,omitempty"`
	// Method is the request HTTP method.
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// Referer is the value of the `Referer` request header.
	Referer string `protobuf:"bytes,4,opt,name=referer,proto3" json:"referer,omitempty"`
	// Scheme is th scheme portion of the request's URI.
	Scheme string `protobuf:"bytes,5,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// BodyBytes is the size of the HTTP request body in bytes.
	BodyBytes uint64 `protobuf:"varint,6,opt,name=bodyBytes,proto3" json:"bodyBytes,omitempty"`
	// ForwardedHost represents the value of the X-Forwarded-Host
	// header.
	ForwardedHost string `protobuf:"bytes,7,opt,name=forwardedHost,proto3" json:"forwardedHost,omitempty"`
	// URI is the request path including the query params
	Uri string `protobuf:"bytes,8,opt,name=uri,proto3" json:"uri,omitempty"`
	// Body is the body content
	Body []byte `protobuf:"bytes,9,opt,name=body,proto3" json:"body,omitempty"`
	// BodyMap is the serialized, usually JSON, body content
	BodyMap *structpb.Struct `protobuf:"bytes,10,opt,name=bodyMap,proto3" json:"bodyMap,omitempty"`
	// Origin is the value of the Origin header
	Origin string `protobuf:"bytes,11,opt,name=origin,proto3" json:"origin,omitempty"`
	// Headers is the map of request headers, when enabled.
	Headers       map[string]string `protobuf:"bytes,12,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_HTTP_Request) Reset() {
	*x = AccessLog_Entry_Info_HTTP_Request{}
	mi := &file_corev1_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_HTTP_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_HTTP_Request) ProtoMessage() {}

func (x *AccessLog_Entry_Info_HTTP_Request) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_HTTP_Request.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_HTTP_Request) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 0, 0}
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetReferer() string {
	if x != nil {
		return x.Referer
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetBodyBytes() uint64 {
	if x != nil {
		return x.BodyBytes
	}
	return 0
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetForwardedHost() string {
	if x != nil {
		return x.ForwardedHost
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetBodyMap() *structpb.Struct {
	if x != nil {
		return x.BodyMap
	}
	return nil
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Request) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type AccessLog_Entry_Info_HTTP_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Code is the response code.
	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// BodyBytes is the size of the HTTP response body in bytes.
	BodyBytes uint64 `protobuf:"varint,2,opt,name=bodyBytes,proto3" json:"bodyBytes,omitempty"`
	// Body is the body content
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// BodyMap is the serialized, usually JSON, body content
	BodyMap *structpb.Struct `protobuf:"bytes,4,opt,name=bodyMap,proto3" json:"bodyMap,omitempty"`
	// ContentType is the value of the Content-Type header
	ContentType string `protobuf:"bytes,5,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// Headers is the map of request headers, when enabled.
	Headers       map[string]string `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_HTTP_Response) Reset() {
	*x = AccessLog_Entry_Info_HTTP_Response{}
	mi := &file_corev1_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_HTTP_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_HTTP_Response) ProtoMessage() {}

func (x *AccessLog_Entry_Info_HTTP_Response) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_HTTP_Response.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_HTTP_Response) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 0, 1}
}

func (x *AccessLog_Entry_Info_HTTP_Response) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *AccessLog_Entry_Info_HTTP_Response) GetBodyBytes() uint64 {
	if x != nil {
		return x.BodyBytes
	}
	return 0
}

func (x *AccessLog_Entry_Info_HTTP_Response) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AccessLog_Entry_Info_HTTP_Response) GetBodyMap() *structpb.Struct {
	if x != nil {
		return x.BodyMap
	}
	return nil
}

func (x *AccessLog_Entry_Info_HTTP_Response) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AccessLog_Entry_Info_HTTP_Response) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type AccessLog_Entry_Info_SSH_Start struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RequestedUser is the requested SSH user by the downstream.
	RequestedUser string `protobuf:"bytes,1,opt,name=requestedUser,proto3" json:"requestedUser,omitempty"`
	// User is the effective SSH user actually used to connect to the
	// upstream server
	User          string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_SSH_Start) Reset() {
	*x = AccessLog_Entry_Info_SSH_Start{}
	mi := &file_corev1_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_SSH_Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_SSH_Start) ProtoMessage() {}

func (x *AccessLog_Entry_Info_SSH_Start) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH_Start.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_SSH_Start) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2, 0}
}

func (x *AccessLog_Entry_Info_SSH_Start) GetRequestedUser() string {
	if x != nil {
		return x.RequestedUser
	}
	return ""
}

func (x *AccessLog_Entry_Info_SSH_Start) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type AccessLog_Entry_Info_SSH_SessionRecording struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type is the recording chunk type
	Type AccessLog_Entry_Info_SSH_SessionRecording_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Info_SSH_SessionRecording_Type" json:"type,omitempty"`
	// Data is the data content of the recording chunk
	Data          []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_SSH_SessionRecording) Reset() {
	*x = AccessLog_Entry_Info_SSH_SessionRecording{}
	mi := &file_corev1_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_SSH_SessionRecording) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_SSH_SessionRecording) ProtoMessage() {}

func (x *AccessLog_Entry_Info_SSH_SessionRecording) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH_SessionRecording.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_SSH_SessionRecording) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2, 1}
}

func (x *AccessLog_Entry_Info_SSH_SessionRecording) GetType() AccessLog_Entry_Info_SSH_SessionRecording_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Info_SSH_SessionRecording_TYPE_UNKNOWN
}

func (x *AccessLog_Entry_Info_SSH_SessionRecording) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type AccessLog_Entry_Info_SSH_SessionRequestExec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Command is the command of the exec request
	Command       string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_SSH_SessionRequestExec) Reset() {
	*x = AccessLog_Entry_Info_SSH_SessionRequestExec{}
	mi := &file_corev1_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_SSH_SessionRequestExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_SSH_SessionRequestExec) ProtoMessage() {}

func (x *AccessLog_Entry_Info_SSH_SessionRequestExec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH_SessionRequestExec.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_SSH_SessionRequestExec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2, 2}
}

func (x *AccessLog_Entry_Info_SSH_SessionRequestExec) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type AccessLog_Entry_Info_SSH_SessionRequestSubsystem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the subsystem request
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_SSH_SessionRequestSubsystem) Reset() {
	*x = AccessLog_Entry_Info_SSH_SessionRequestSubsystem{}
	mi := &file_corev1_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_SSH_SessionRequestSubsystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_SSH_SessionRequestSubsystem) ProtoMessage() {}

func (x *AccessLog_Entry_Info_SSH_SessionRequestSubsystem) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH_SessionRequestSubsystem.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_SSH_SessionRequestSubsystem) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2, 3}
}

func (x *AccessLog_Entry_Info_SSH_SessionRequestSubsystem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AccessLog_Entry_Info_SSH_DirectTCPIPStart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host is the destination host of the "direct-tcpip" channel
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port is the destination port of the "direct-tcpip" channel
	Port          int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_SSH_DirectTCPIPStart) Reset() {
	*x = AccessLog_Entry_Info_SSH_DirectTCPIPStart{}
	mi := &file_corev1_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_SSH_DirectTCPIPStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_SSH_DirectTCPIPStart) ProtoMessage() {}

func (x *AccessLog_Entry_Info_SSH_DirectTCPIPStart) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_SSH_DirectTCPIPStart.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_SSH_DirectTCPIPStart) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 2, 4}
}

func (x *AccessLog_Entry_Info_SSH_DirectTCPIPStart) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *AccessLog_Entry_Info_SSH_DirectTCPIPStart) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type AccessLog_Entry_Info_Postgres_Start struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User is the effective user used to connect to the upstream server
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// Database is the effective database used to connect to the
	// upstream server
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// RequestedUser is the user requested by the downstream. Maybe
	// overridden according to the Service configuration
	RequestedUser string `protobuf:"bytes,3,opt,name=requestedUser,proto3" json:"requestedUser,omitempty"`
	// RequestedDatabase is the database requested by the downstream.
	// Maybe overridden according to the Service configuration
	RequestedDatabase string `protobuf:"bytes,4,opt,name=requestedDatabase,proto3" json:"requestedDatabase,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_Postgres_Start) Reset() {
	*x = AccessLog_Entry_Info_Postgres_Start{}
	mi := &file_corev1_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_Postgres_Start) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_Postgres_Start) ProtoMessage() {}

func (x *AccessLog_Entry_Info_Postgres_Start) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_Postgres_Start.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_Postgres_Start) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 4, 0}
}

func (x *AccessLog_Entry_Info_Postgres_Start) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AccessLog_Entry_Info_Postgres_Start) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AccessLog_Entry_Info_Postgres_Start) GetRequestedUser() string {
	if x != nil {
		return x.RequestedUser
	}
	return ""
}

func (x *AccessLog_Entry_Info_Postgres_Start) GetRequestedDatabase() string {
	if x != nil {
		return x.RequestedDatabase
	}
	return ""
}

type AccessLog_Entry_Info_Postgres_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Query is the query in the query message
	Query         string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_Postgres_Query) Reset() {
	*x = AccessLog_Entry_Info_Postgres_Query{}
	mi := &file_corev1_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_Postgres_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_Postgres_Query) ProtoMessage() {}

func (x *AccessLog_Entry_Info_Postgres_Query) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_Postgres_Query.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_Postgres_Query) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 4, 1}
}

func (x *AccessLog_Entry_Info_Postgres_Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type AccessLog_Entry_Info_Postgres_Parse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name in the parse message
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Query is the query in the parse message
	Query         string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_Postgres_Parse) Reset() {
	*x = AccessLog_Entry_Info_Postgres_Parse{}
	mi := &file_corev1_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_Postgres_Parse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_Postgres_Parse) ProtoMessage() {}

func (x *AccessLog_Entry_Info_Postgres_Parse) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_Postgres_Parse.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_Postgres_Parse) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 4, 2}
}

func (x *AccessLog_Entry_Info_Postgres_Parse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessLog_Entry_Info_Postgres_Parse) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type AccessLog_Entry_Info_MySQL_Query struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_MySQL_Query) Reset() {
	*x = AccessLog_Entry_Info_MySQL_Query{}
	mi := &file_corev1_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_MySQL_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_MySQL_Query) ProtoMessage() {}

func (x *AccessLog_Entry_Info_MySQL_Query) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_MySQL_Query.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_MySQL_Query) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 5, 0}
}

func (x *AccessLog_Entry_Info_MySQL_Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type AccessLog_Entry_Info_MySQL_InitDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      string                 `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_MySQL_InitDB) Reset() {
	*x = AccessLog_Entry_Info_MySQL_InitDB{}
	mi := &file_corev1_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_MySQL_InitDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_MySQL_InitDB) ProtoMessage() {}

func (x *AccessLog_Entry_Info_MySQL_InitDB) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_MySQL_InitDB.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_MySQL_InitDB) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 5, 1}
}

func (x *AccessLog_Entry_Info_MySQL_InitDB) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type AccessLog_Entry_Info_MySQL_CreateDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      string                 `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_MySQL_CreateDB) Reset() {
	*x = AccessLog_Entry_Info_MySQL_CreateDB{}
	mi := &file_corev1_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_MySQL_CreateDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_MySQL_CreateDB) ProtoMessage() {}

func (x *AccessLog_Entry_Info_MySQL_CreateDB) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_MySQL_CreateDB.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_MySQL_CreateDB) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 5, 2}
}

func (x *AccessLog_Entry_Info_MySQL_CreateDB) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type AccessLog_Entry_Info_MySQL_DropDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Database      string                 `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_MySQL_DropDB) Reset() {
	*x = AccessLog_Entry_Info_MySQL_DropDB{}
	mi := &file_corev1_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_MySQL_DropDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_MySQL_DropDB) ProtoMessage() {}

func (x *AccessLog_Entry_Info_MySQL_DropDB) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_MySQL_DropDB.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_MySQL_DropDB) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 5, 3}
}

func (x *AccessLog_Entry_Info_MySQL_DropDB) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type AccessLog_Entry_Info_MySQL_PrepareStatement struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Info_MySQL_PrepareStatement) Reset() {
	*x = AccessLog_Entry_Info_MySQL_PrepareStatement{}
	mi := &file_corev1_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Info_MySQL_PrepareStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Info_MySQL_PrepareStatement) ProtoMessage() {}

func (x *AccessLog_Entry_Info_MySQL_PrepareStatement) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Info_MySQL_PrepareStatement.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Info_MySQL_PrepareStatement) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 0, 5, 4}
}

func (x *AccessLog_Entry_Info_MySQL_PrepareStatement) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type AccessLog_Entry_Common_Reason struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Type          AccessLog_Entry_Common_Reason_Type     `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.AccessLog_Entry_Common_Reason_Type" json:"type,omitempty"`
	Details       *AccessLog_Entry_Common_Reason_Details `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Common_Reason) Reset() {
	*x = AccessLog_Entry_Common_Reason{}
	mi := &file_corev1_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Common_Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Common_Reason) ProtoMessage() {}

func (x *AccessLog_Entry_Common_Reason) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Common_Reason.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Common_Reason) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1, 0}
}

func (x *AccessLog_Entry_Common_Reason) GetType() AccessLog_Entry_Common_Reason_Type {
	if x != nil {
		return x.Type
	}
	return AccessLog_Entry_Common_Reason_TYPE_UNKNOWN_REASON
}

func (x *AccessLog_Entry_Common_Reason) GetDetails() *AccessLog_Entry_Common_Reason_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type AccessLog_Entry_Common_Reason_Details struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AccessLog_Entry_Common_Reason_Details_PolicyMatch_
	Type          isAccessLog_Entry_Common_Reason_Details_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Common_Reason_Details) Reset() {
	*x = AccessLog_Entry_Common_Reason_Details{}
	mi := &file_corev1_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Common_Reason_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Common_Reason_Details) ProtoMessage() {}

func (x *AccessLog_Entry_Common_Reason_Details) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Common_Reason_Details.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Common_Reason_Details) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1, 0, 0}
}

func (x *AccessLog_Entry_Common_Reason_Details) GetType() isAccessLog_Entry_Common_Reason_Details_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AccessLog_Entry_Common_Reason_Details) GetPolicyMatch() *AccessLog_Entry_Common_Reason_Details_PolicyMatch {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_); ok {
			return x.PolicyMatch
		}
	}
	return nil
}

type isAccessLog_Entry_Common_Reason_Details_Type interface {
	isAccessLog_Entry_Common_Reason_Details_Type()
}

type AccessLog_Entry_Common_Reason_Details_PolicyMatch_ struct {
	PolicyMatch *AccessLog_Entry_Common_Reason_Details_PolicyMatch `protobuf:"bytes,1,opt,name=policyMatch,proto3,oneof"`
}

func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch_) isAccessLog_Entry_Common_Reason_Details_Type() {
}

type AccessLog_Entry_Common_Reason_Details_PolicyMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy_
	//	*AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy_
	Type          isAccessLog_Entry_Common_Reason_Details_PolicyMatch_Type `protobuf_oneof:"type"`
	RuleName      string                                                   `protobuf:"bytes,3,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	Priority      int32                                                    `protobuf:"varint,4,opt,name=priority,proto3" json:"priority,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) Reset() {
	*x = AccessLog_Entry_Common_Reason_Details_PolicyMatch{}
	mi := &file_corev1_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch) ProtoMessage() {}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Common_Reason_Details_PolicyMatch.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1, 0, 0, 0}
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) GetType() isAccessLog_Entry_Common_Reason_Details_PolicyMatch_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) GetPolicy() *AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy_); ok {
			return x.Policy
		}
	}
	return nil
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) GetInlinePolicy() *AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy {
	if x != nil {
		if x, ok := x.Type.(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy_); ok {
			return x.InlinePolicy
		}
	}
	return nil
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

type isAccessLog_Entry_Common_Reason_Details_PolicyMatch_Type interface {
	isAccessLog_Entry_Common_Reason_Details_PolicyMatch_Type()
}

type AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy_ struct {
	// Policy is the standalone Policy whose rule match triggered
	// the decision
	Policy *AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy `protobuf:"bytes,1,opt,name=policy,proto3,oneof"`
}

type AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy_ struct {
	// InlinePolicy is the inline Policy of a resource whose rule
	// match triggered the decision
	InlinePolicy *AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy `protobuf:"bytes,2,opt,name=inlinePolicy,proto3,oneof"`
}

func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy_) isAccessLog_Entry_Common_Reason_Details_PolicyMatch_Type() {
}

func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy_) isAccessLog_Entry_Common_Reason_Details_PolicyMatch_Type() {
}

type AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ResourceRef is the reference to the Resource whose inline
	// Policy triggered the rule match
	ResourceRef *metav1.ObjectReference `protobuf:"bytes,1,opt,name=resourceRef,proto3" json:"resourceRef,omitempty"`
	// Name is the name of the inline Policy if available
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy) Reset() {
	*x = AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy{}
	mi := &file_corev1_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy) ProtoMessage() {}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1, 0, 0, 0, 0}
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy) GetResourceRef() *metav1.ObjectReference {
	if x != nil {
		return x.ResourceRef
	}
	return nil
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PolicyRef is the reference to the Policy
	PolicyRef     *metav1.ObjectReference `protobuf:"bytes,1,opt,name=policyRef,proto3" json:"policyRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy) Reset() {
	*x = AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy{}
	mi := &file_corev1_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy) ProtoMessage() {}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy.ProtoReflect.Descriptor instead.
func (*AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{33, 0, 1, 0, 0, 0, 1}
}

func (x *AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy) GetPolicyRef() *metav1.ObjectReference {
	if x != nil {
		return x.PolicyRef
	}
	return nil
}

type IdentityProvider_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IsDisabled disables the IdentityProvider
	IsDisabled bool `protobuf:"varint,1,opt,name=isDisabled,proto3" json:"isDisabled,omitempty"`
	// DisplayName is the public IdentityProvider display name that Users see
	// when they try to authenticate
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	// AALRules is the list of Authenticator assurance level rules
	AalRules []*IdentityProvider_Spec_AALRule `protobuf:"bytes,3,rep,name=aalRules,proto3" json:"aalRules,omitempty"`
	// DisableEmailAsIdentity disables using the email field in the User spec
	// as an identity to be matched against the information returned by the
	// IdentityProvider during the authentication flow. In other words, if
	// this field is set to true, then you must create an identity for the
	// IdentityProvider with an explicit identifier in the User spec. This
	// field is only meaningful for web-based IdentityProviders only (i.e. the
	// ones with types "github", "oidc" or "saml").
	DisableEmailAsIdentity  bool                                            `protobuf:"varint,4,opt,name=disableEmailAsIdentity,proto3" json:"disableEmailAsIdentity,omitempty"`
	PostAuthenticationRules []*IdentityProvider_Spec_PostAuthenticationRule `protobuf:"bytes,9,rep,name=postAuthenticationRules,proto3" json:"postAuthenticationRules,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*IdentityProvider_Spec_Github_
	//	*IdentityProvider_Spec_Oidc
	//	*IdentityProvider_Spec_Saml
	//	*IdentityProvider_Spec_OidcIdentityToken
	Type          isIdentityProvider_Spec_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec) Reset() {
	*x = IdentityProvider_Spec{}
	mi := &file_corev1_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec) ProtoMessage() {}

func (x *IdentityProvider_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0}
}

func (x *IdentityProvider_Spec) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *IdentityProvider_Spec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *IdentityProvider_Spec) GetAalRules() []*IdentityProvider_Spec_AALRule {
	if x != nil {
		return x.AalRules
	}
	return nil
}

func (x *IdentityProvider_Spec) GetDisableEmailAsIdentity() bool {
	if x != nil {
		return x.DisableEmailAsIdentity
	}
	return false
}

func (x *IdentityProvider_Spec) GetPostAuthenticationRules() []*IdentityProvider_Spec_PostAuthenticationRule {
	if x != nil {
		return x.PostAuthenticationRules
	}
	return nil
}

func (x *IdentityProvider_Spec) GetType() isIdentityProvider_Spec_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *IdentityProvider_Spec) GetGithub() *IdentityProvider_Spec_Github {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_Github_); ok {
			return x.Github
		}
	}
	return nil
}

func (x *IdentityProvider_Spec) GetOidc() *IdentityProvider_Spec_OIDC {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_Oidc); ok {
			return x.Oidc
		}
	}
	return nil
}

func (x *IdentityProvider_Spec) GetSaml() *IdentityProvider_Spec_SAML {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_Saml); ok {
			return x.Saml
		}
	}
	return nil
}

func (x *IdentityProvider_Spec) GetOidcIdentityToken() *IdentityProvider_Spec_OIDCIdentityToken {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_OidcIdentityToken); ok {
			return x.OidcIdentityToken
		}
	}
	return nil
}

type isIdentityProvider_Spec_Type interface {
	isIdentityProvider_Spec_Type()
}

type IdentityProvider_Spec_Github_ struct {
	// Github sets the Github OAuth2 provider specific options.
	Github *IdentityProvider_Spec_Github `protobuf:"bytes,5,opt,name=github,proto3,oneof"`
}

type IdentityProvider_Spec_Oidc struct {
	// OIDC sets the OpenID Connect provider options.
	Oidc *IdentityProvider_Spec_OIDC `protobuf:"bytes,6,opt,name=oidc,proto3,oneof"`
}

type IdentityProvider_Spec_Saml struct {
	// SAML sets the SAML 2.0 identity provider options.
	Saml *IdentityProvider_Spec_SAML `protobuf:"bytes,7,opt,name=saml,proto3,oneof"`
}

type IdentityProvider_Spec_OidcIdentityToken struct {
	// OIDCIdentityToken sets the OIDC-based assertion options used for
	// WORKLOAD User authentication
	OidcIdentityToken *IdentityProvider_Spec_OIDCIdentityToken `protobuf:"bytes,8,opt,name=oidcIdentityToken,proto3,oneof"`
}

func (*IdentityProvider_Spec_Github_) isIdentityProvider_Spec_Type() {}

func (*IdentityProvider_Spec_Oidc) isIdentityProvider_Spec_Type() {}

func (*IdentityProvider_Spec_Saml) isIdentityProvider_Spec_Type() {}

func (*IdentityProvider_Spec_OidcIdentityToken) isIdentityProvider_Spec_Type() {}

type IdentityProvider_Status struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Type          IdentityProvider_Status_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.core.v1.IdentityProvider_Status_Type" json:"type,omitempty"`
	IsLocked      bool                         `protobuf:"varint,2,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Status) Reset() {
	*x = IdentityProvider_Status{}
	mi := &file_corev1_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Status) ProtoMessage() {}

func (x *IdentityProvider_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Status.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 1}
}

func (x *IdentityProvider_Status) GetType() IdentityProvider_Status_Type {
	if x != nil {
		return x.Type
	}
	return IdentityProvider_Status_TYPE_UNKNOWN
}

func (x *IdentityProvider_Status) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

type IdentityProvider_Spec_Github struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	ClientID      string                                     `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	ClientSecret  *IdentityProvider_Spec_Github_ClientSecret `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_Github) Reset() {
	*x = IdentityProvider_Spec_Github{}
	mi := &file_corev1_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_Github) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_Github) ProtoMessage() {}

func (x *IdentityProvider_Spec_Github) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_Github.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_Github) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 0}
}

func (x *IdentityProvider_Spec_Github) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *IdentityProvider_Spec_Github) GetClientSecret() *IdentityProvider_Spec_Github_ClientSecret {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

type IdentityProvider_Spec_OIDC struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientID is the OIDC OAuth2 client ID
	ClientID string `protobuf:"bytes,1,opt,name=clientID,proto3" json:"clientID,omitempty"`
	// ClientSecret is the OIDC OAuth2 client secret
	ClientSecret *IdentityProvider_Spec_OIDC_ClientSecret `protobuf:"bytes,2,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	// IssuerURL is the issuer URL where the OIDC configuration can be
	// obtained automatically by adding this IssuerURL to the path
	// "/.well-known/openid-configuration"
	IssuerURL string `protobuf:"bytes,3,opt,name=issuerURL,proto3" json:"issuerURL,omitempty"`
	// Scopes are the additional scopes to `openid`. The default value is
	// [`profile`, `email`].
	Scopes []string `protobuf:"bytes,4,rep,name=scopes,proto3" json:"scopes,omitempty"`
	// IdentifierClaim overrides the default claim (i.e. currently `email`) as
	// the claim whose value is used as the identifier.
	IdentifierClaim string `protobuf:"bytes,5,opt,name=identifierClaim,proto3" json:"identifierClaim,omitempty"`
	// CheckEmailVerified checks that the `email_verified` claim
	// is set to true.
	CheckEmailVerified bool `protobuf:"varint,6,opt,name=checkEmailVerified,proto3" json:"checkEmailVerified,omitempty"`
	// UseUserInfoEndpoint obtains the claims via the UserInfo endpoint.
	UseUserInfoEndpoint bool `protobuf:"varint,7,opt,name=useUserInfoEndpoint,proto3" json:"useUserInfoEndpoint,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_OIDC) Reset() {
	*x = IdentityProvider_Spec_OIDC{}
	mi := &file_corev1_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_OIDC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_OIDC) ProtoMessage() {}

func (x *IdentityProvider_Spec_OIDC) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_OIDC.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_OIDC) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 1}
}

func (x *IdentityProvider_Spec_OIDC) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *IdentityProvider_Spec_OIDC) GetClientSecret() *IdentityProvider_Spec_OIDC_ClientSecret {
	if x != nil {
		return x.ClientSecret
	}
	return nil
}

func (x *IdentityProvider_Spec_OIDC) GetIssuerURL() string {
	if x != nil {
		return x.IssuerURL
	}
	return ""
}

func (x *IdentityProvider_Spec_OIDC) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *IdentityProvider_Spec_OIDC) GetIdentifierClaim() string {
	if x != nil {
		return x.IdentifierClaim
	}
	return ""
}

func (x *IdentityProvider_Spec_OIDC) GetCheckEmailVerified() bool {
	if x != nil {
		return x.CheckEmailVerified
	}
	return false
}

func (x *IdentityProvider_Spec_OIDC) GetUseUserInfoEndpoint() bool {
	if x != nil {
		return x.UseUserInfoEndpoint
	}
	return false
}

type IdentityProvider_Spec_SAML struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MetadataType:
	//
	//	*IdentityProvider_Spec_SAML_MetadataURL
	//	*IdentityProvider_Spec_SAML_Metadata
	MetadataType isIdentityProvider_Spec_SAML_MetadataType `protobuf_oneof:"metadataType"`
	// EntityID is the entity ID. If not set, then the value
	// "https://<CLUSTER_DOMAIN>" is used as the default entity ID.
	EntityID string `protobuf:"bytes,3,opt,name=entityID,proto3" json:"entityID,omitempty"`
	// IdentifierAttribute is the attribute of the identifier used for
	// authentication. If not set, then the default value
	// "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress" is
	// used instead.
	IdentifierAttribute string `protobuf:"bytes,4,opt,name=identifierAttribute,proto3" json:"identifierAttribute,omitempty"`
	// ForceAuthn forces re-authentication by the IdP even if the user has a
	// valid SSO session
	ForceAuthn    bool `protobuf:"varint,5,opt,name=forceAuthn,proto3" json:"forceAuthn,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_SAML) Reset() {
	*x = IdentityProvider_Spec_SAML{}
	mi := &file_corev1_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_SAML) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_SAML) ProtoMessage() {}

func (x *IdentityProvider_Spec_SAML) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_SAML.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_SAML) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 2}
}

func (x *IdentityProvider_Spec_SAML) GetMetadataType() isIdentityProvider_Spec_SAML_MetadataType {
	if x != nil {
		return x.MetadataType
	}
	return nil
}

func (x *IdentityProvider_Spec_SAML) GetMetadataURL() string {
	if x != nil {
		if x, ok := x.MetadataType.(*IdentityProvider_Spec_SAML_MetadataURL); ok {
			return x.MetadataURL
		}
	}
	return ""
}

func (x *IdentityProvider_Spec_SAML) GetMetadata() string {
	if x != nil {
		if x, ok := x.MetadataType.(*IdentityProvider_Spec_SAML_Metadata); ok {
			return x.Metadata
		}
	}
	return ""
}

func (x *IdentityProvider_Spec_SAML) GetEntityID() string {
	if x != nil {
		return x.EntityID
	}
	return ""
}

func (x *IdentityProvider_Spec_SAML) GetIdentifierAttribute() string {
	if x != nil {
		return x.IdentifierAttribute
	}
	return ""
}

func (x *IdentityProvider_Spec_SAML) GetForceAuthn() bool {
	if x != nil {
		return x.ForceAuthn
	}
	return false
}

type isIdentityProvider_Spec_SAML_MetadataType interface {
	isIdentityProvider_Spec_SAML_MetadataType()
}

type IdentityProvider_Spec_SAML_MetadataURL struct {
	// MetadataURL is the SAML 2.0 metadata URL
	MetadataURL string `protobuf:"bytes,1,opt,name=metadataURL,proto3,oneof"`
}

type IdentityProvider_Spec_SAML_Metadata struct {
	// Metadata is the inline metadata XML content
	Metadata string `protobuf:"bytes,2,opt,name=metadata,proto3,oneof"`
}

func (*IdentityProvider_Spec_SAML_MetadataURL) isIdentityProvider_Spec_SAML_MetadataType() {}

func (*IdentityProvider_Spec_SAML_Metadata) isIdentityProvider_Spec_SAML_MetadataType() {}

type IdentityProvider_Spec_OIDCIdentityToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*IdentityProvider_Spec_OIDCIdentityToken_IssuerURL
	//	*IdentityProvider_Spec_OIDCIdentityToken_JwksURL
	//	*IdentityProvider_Spec_OIDCIdentityToken_JwksContent
	Type          isIdentityProvider_Spec_OIDCIdentityToken_Type `protobuf_oneof:"type"`
	Issuer        string                                         `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Audience      string                                         `protobuf:"bytes,5,opt,name=audience,proto3" json:"audience,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) Reset() {
	*x = IdentityProvider_Spec_OIDCIdentityToken{}
	mi := &file_corev1_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_OIDCIdentityToken) ProtoMessage() {}

func (x *IdentityProvider_Spec_OIDCIdentityToken) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_OIDCIdentityToken.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_OIDCIdentityToken) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 3}
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) GetType() isIdentityProvider_Spec_OIDCIdentityToken_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) GetIssuerURL() string {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_OIDCIdentityToken_IssuerURL); ok {
			return x.IssuerURL
		}
	}
	return ""
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) GetJwksURL() string {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_OIDCIdentityToken_JwksURL); ok {
			return x.JwksURL
		}
	}
	return ""
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) GetJwksContent() string {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_OIDCIdentityToken_JwksContent); ok {
			return x.JwksContent
		}
	}
	return ""
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *IdentityProvider_Spec_OIDCIdentityToken) GetAudience() string {
	if x != nil {
		return x.Audience
	}
	return ""
}

type isIdentityProvider_Spec_OIDCIdentityToken_Type interface {
	isIdentityProvider_Spec_OIDCIdentityToken_Type()
}

type IdentityProvider_Spec_OIDCIdentityToken_IssuerURL struct {
	IssuerURL string `protobuf:"bytes,1,opt,name=issuerURL,proto3,oneof"`
}

type IdentityProvider_Spec_OIDCIdentityToken_JwksURL struct {
	JwksURL string `protobuf:"bytes,2,opt,name=jwksURL,proto3,oneof"`
}

type IdentityProvider_Spec_OIDCIdentityToken_JwksContent struct {
	JwksContent string `protobuf:"bytes,3,opt,name=jwksContent,proto3,oneof"`
}

func (*IdentityProvider_Spec_OIDCIdentityToken_IssuerURL) isIdentityProvider_Spec_OIDCIdentityToken_Type() {
}

func (*IdentityProvider_Spec_OIDCIdentityToken_JwksURL) isIdentityProvider_Spec_OIDCIdentityToken_Type() {
}

func (*IdentityProvider_Spec_OIDCIdentityToken_JwksContent) isIdentityProvider_Spec_OIDCIdentityToken_Type() {
}

type IdentityProvider_Spec_AALRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Condition is the rule's condition
	Condition *Condition `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// AAL is the corresponding AAL level if the condition matches
	Aal           IdentityProvider_Spec_AALRule_AAL `protobuf:"varint,2,opt,name=aal,proto3,enum=octelium.api.main.core.v1.IdentityProvider_Spec_AALRule_AAL" json:"aal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_AALRule) Reset() {
	*x = IdentityProvider_Spec_AALRule{}
	mi := &file_corev1_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_AALRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_AALRule) ProtoMessage() {}

func (x *IdentityProvider_Spec_AALRule) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_AALRule.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_AALRule) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 4}
}

func (x *IdentityProvider_Spec_AALRule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *IdentityProvider_Spec_AALRule) GetAal() IdentityProvider_Spec_AALRule_AAL {
	if x != nil {
		return x.Aal
	}
	return IdentityProvider_Spec_AALRule_AAL_UNSET
}

type IdentityProvider_Spec_PostAuthenticationRule struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Condition *Condition             `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// Effect is the effect of the policy when a match happens to any of the
	// Conditions.
	Effect        IdentityProvider_Spec_PostAuthenticationRule_Effect `protobuf:"varint,2,opt,name=effect,proto3,enum=octelium.api.main.core.v1.IdentityProvider_Spec_PostAuthenticationRule_Effect" json:"effect,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_PostAuthenticationRule) Reset() {
	*x = IdentityProvider_Spec_PostAuthenticationRule{}
	mi := &file_corev1_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_PostAuthenticationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_PostAuthenticationRule) ProtoMessage() {}

func (x *IdentityProvider_Spec_PostAuthenticationRule) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_PostAuthenticationRule.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_PostAuthenticationRule) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 5}
}

func (x *IdentityProvider_Spec_PostAuthenticationRule) GetCondition() *Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *IdentityProvider_Spec_PostAuthenticationRule) GetEffect() IdentityProvider_Spec_PostAuthenticationRule_Effect {
	if x != nil {
		return x.Effect
	}
	return IdentityProvider_Spec_PostAuthenticationRule_EFFECT_UNKNOWN
}

type IdentityProvider_Spec_Github_ClientSecret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*IdentityProvider_Spec_Github_ClientSecret_FromSecret
	Type          isIdentityProvider_Spec_Github_ClientSecret_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_Github_ClientSecret) Reset() {
	*x = IdentityProvider_Spec_Github_ClientSecret{}
	mi := &file_corev1_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_Github_ClientSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_Github_ClientSecret) ProtoMessage() {}

func (x *IdentityProvider_Spec_Github_ClientSecret) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_Github_ClientSecret.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_Github_ClientSecret) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 0, 0}
}

func (x *IdentityProvider_Spec_Github_ClientSecret) GetType() isIdentityProvider_Spec_Github_ClientSecret_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *IdentityProvider_Spec_Github_ClientSecret) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_Github_ClientSecret_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isIdentityProvider_Spec_Github_ClientSecret_Type interface {
	isIdentityProvider_Spec_Github_ClientSecret_Type()
}

type IdentityProvider_Spec_Github_ClientSecret_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*IdentityProvider_Spec_Github_ClientSecret_FromSecret) isIdentityProvider_Spec_Github_ClientSecret_Type() {
}

type IdentityProvider_Spec_OIDC_ClientSecret struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*IdentityProvider_Spec_OIDC_ClientSecret_FromSecret
	Type          isIdentityProvider_Spec_OIDC_ClientSecret_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdentityProvider_Spec_OIDC_ClientSecret) Reset() {
	*x = IdentityProvider_Spec_OIDC_ClientSecret{}
	mi := &file_corev1_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdentityProvider_Spec_OIDC_ClientSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityProvider_Spec_OIDC_ClientSecret) ProtoMessage() {}

func (x *IdentityProvider_Spec_OIDC_ClientSecret) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityProvider_Spec_OIDC_ClientSecret.ProtoReflect.Descriptor instead.
func (*IdentityProvider_Spec_OIDC_ClientSecret) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{35, 0, 1, 0}
}

func (x *IdentityProvider_Spec_OIDC_ClientSecret) GetType() isIdentityProvider_Spec_OIDC_ClientSecret_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *IdentityProvider_Spec_OIDC_ClientSecret) GetFromSecret() string {
	if x != nil {
		if x, ok := x.Type.(*IdentityProvider_Spec_OIDC_ClientSecret_FromSecret); ok {
			return x.FromSecret
		}
	}
	return ""
}

type isIdentityProvider_Spec_OIDC_ClientSecret_Type interface {
	isIdentityProvider_Spec_OIDC_ClientSecret_Type()
}

type IdentityProvider_Spec_OIDC_ClientSecret_FromSecret struct {
	FromSecret string `protobuf:"bytes,1,opt,name=fromSecret,proto3,oneof"`
}

func (*IdentityProvider_Spec_OIDC_ClientSecret_FromSecret) isIdentityProvider_Spec_OIDC_ClientSecret_Type() {
}

type Region_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Region_Spec) Reset() {
	*x = Region_Spec{}
	mi := &file_corev1_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Region_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region_Spec) ProtoMessage() {}

func (x *Region_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region_Spec.ProtoReflect.Descriptor instead.
func (*Region_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{37, 0}
}

type Region_Status struct {
	state            protoimpl.MessageState      `protogen:"open.v1"`
	Index            int32                       `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	IngressAddresses []string                    `protobuf:"bytes,2,rep,name=ingressAddresses,proto3" json:"ingressAddresses,omitempty"`
	PublicHostname   string                      `protobuf:"bytes,3,opt,name=publicHostname,proto3" json:"publicHostname,omitempty"`
	Ext              map[string]*structpb.Struct `protobuf:"bytes,4,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Version          string                      `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Region_Status) Reset() {
	*x = Region_Status{}
	mi := &file_corev1_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Region_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Region_Status) ProtoMessage() {}

func (x *Region_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Region_Status.ProtoReflect.Descriptor instead.
func (*Region_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{37, 1}
}

func (x *Region_Status) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Region_Status) GetIngressAddresses() []string {
	if x != nil {
		return x.IngressAddresses
	}
	return nil
}

func (x *Region_Status) GetPublicHostname() string {
	if x != nil {
		return x.PublicHostname
	}
	return ""
}

func (x *Region_Status) GetExt() map[string]*structpb.Struct {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Region_Status) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Gateway_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway_Spec) Reset() {
	*x = Gateway_Spec{}
	mi := &file_corev1_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_Spec) ProtoMessage() {}

func (x *Gateway_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_Spec.ProtoReflect.Descriptor instead.
func (*Gateway_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{39, 0}
}

type Gateway_Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// RegionRef is the reference to the owner Region
	RegionRef *metav1.ObjectReference `protobuf:"bytes,1,opt,name=regionRef,proto3" json:"regionRef,omitempty"`
	// NodeRef is the reference to the owner Kubernetes node using the UID set
	// by Kubernetes
	NodeRef *metav1.ObjectReference `protobuf:"bytes,2,opt,name=nodeRef,proto3" json:"nodeRef,omitempty"`
	// ID is a unique Gateway ID
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// CIDR is the dual-stack CIDR of the Gateway encompassing all the Services
	// addresses serving in it
	Cidr *metav1.DualStackNetwork `protobuf:"bytes,4,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// Wireguard is the Gateway WireGuard's information
	Wireguard *Gateway_Status_WireGuard `protobuf:"bytes,5,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	// Quicv0 is the Gateway QUICv0 information
	Quicv0 *Gateway_Status_QUICV0 `protobuf:"bytes,6,opt,name=quicv0,proto3" json:"quicv0,omitempty"`
	// PublicIPs is the list of public IPs of the Gateway when connected to by
	// the User clients
	PublicIPs []string `protobuf:"bytes,7,rep,name=publicIPs,proto3" json:"publicIPs,omitempty"`
	// Hostname is the public hostname of the Gateway when connected to by
	// the User clients. Currently sed by QUICv0
	// Gateways.
	Hostname      string `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway_Status) Reset() {
	*x = Gateway_Status{}
	mi := &file_corev1_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_Status) ProtoMessage() {}

func (x *Gateway_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_Status.ProtoReflect.Descriptor instead.
func (*Gateway_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{39, 1}
}

func (x *Gateway_Status) GetRegionRef() *metav1.ObjectReference {
	if x != nil {
		return x.RegionRef
	}
	return nil
}

func (x *Gateway_Status) GetNodeRef() *metav1.ObjectReference {
	if x != nil {
		return x.NodeRef
	}
	return nil
}

func (x *Gateway_Status) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Gateway_Status) GetCidr() *metav1.DualStackNetwork {
	if x != nil {
		return x.Cidr
	}
	return nil
}

func (x *Gateway_Status) GetWireguard() *Gateway_Status_WireGuard {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

func (x *Gateway_Status) GetQuicv0() *Gateway_Status_QUICV0 {
	if x != nil {
		return x.Quicv0
	}
	return nil
}

func (x *Gateway_Status) GetPublicIPs() []string {
	if x != nil {
		return x.PublicIPs
	}
	return nil
}

func (x *Gateway_Status) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

type Gateway_Status_WireGuard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port is the listen port
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// PublicKey is the current public key
	PublicKey     string                 `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	KeyRotatedAt  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=keyRotatedAt,proto3" json:"keyRotatedAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway_Status_WireGuard) Reset() {
	*x = Gateway_Status_WireGuard{}
	mi := &file_corev1_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway_Status_WireGuard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_Status_WireGuard) ProtoMessage() {}

func (x *Gateway_Status_WireGuard) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_Status_WireGuard.ProtoReflect.Descriptor instead.
func (*Gateway_Status_WireGuard) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{39, 1, 0}
}

func (x *Gateway_Status_WireGuard) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Gateway_Status_WireGuard) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Gateway_Status_WireGuard) GetKeyRotatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.KeyRotatedAt
	}
	return nil
}

type Gateway_Status_QUICV0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port is the listen port
	Port          int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway_Status_QUICV0) Reset() {
	*x = Gateway_Status_QUICV0{}
	mi := &file_corev1_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway_Status_QUICV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_Status_QUICV0) ProtoMessage() {}

func (x *Gateway_Status_QUICV0) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_Status_QUICV0.ProtoReflect.Descriptor instead.
func (*Gateway_Status_QUICV0) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{39, 1, 1}
}

func (x *Gateway_Status_QUICV0) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Condition_All struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Of            []*Condition           `protobuf:"bytes,1,rep,name=of,proto3" json:"of,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition_All) Reset() {
	*x = Condition_All{}
	mi := &file_corev1_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_All) ProtoMessage() {}

func (x *Condition_All) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_All.ProtoReflect.Descriptor instead.
func (*Condition_All) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{43, 0}
}

func (x *Condition_All) GetOf() []*Condition {
	if x != nil {
		return x.Of
	}
	return nil
}

type Condition_Any struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Expressions is the list of CEL expressions
	Of            []*Condition `protobuf:"bytes,1,rep,name=of,proto3" json:"of,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition_Any) Reset() {
	*x = Condition_Any{}
	mi := &file_corev1_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition_Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Any) ProtoMessage() {}

func (x *Condition_Any) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Any.ProtoReflect.Descriptor instead.
func (*Condition_Any) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{43, 1}
}

func (x *Condition_Any) GetOf() []*Condition {
	if x != nil {
		return x.Of
	}
	return nil
}

type Condition_None struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Expressions is the list of CEL expressions
	Of            []*Condition `protobuf:"bytes,1,rep,name=of,proto3" json:"of,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition_None) Reset() {
	*x = Condition_None{}
	mi := &file_corev1_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition_None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_None) ProtoMessage() {}

func (x *Condition_None) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_None.ProtoReflect.Descriptor instead.
func (*Condition_None) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{43, 2}
}

func (x *Condition_None) GetOf() []*Condition {
	if x != nil {
		return x.Of
	}
	return nil
}

type Condition_OPA struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Condition_OPA_Inline
	Type          isCondition_OPA_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition_OPA) Reset() {
	*x = Condition_OPA{}
	mi := &file_corev1_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition_OPA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_OPA) ProtoMessage() {}

func (x *Condition_OPA) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_OPA.ProtoReflect.Descriptor instead.
func (*Condition_OPA) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{43, 3}
}

func (x *Condition_OPA) GetType() isCondition_OPA_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Condition_OPA) GetInline() string {
	if x != nil {
		if x, ok := x.Type.(*Condition_OPA_Inline); ok {
			return x.Inline
		}
	}
	return ""
}

type isCondition_OPA_Type interface {
	isCondition_OPA_Type()
}

type Condition_OPA_Inline struct {
	// Inline is the OPA Rego script directly provided as a string
	Inline string `protobuf:"bytes,1,opt,name=inline,proto3,oneof"`
}

func (*Condition_OPA_Inline) isCondition_OPA_Type() {}

type ClusterConfig_Spec struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Authorization *ClusterConfig_Spec_Authorization `protobuf:"bytes,1,opt,name=authorization,proto3" json:"authorization,omitempty"`
	// Ingress sets Ingress specific-options.
	Ingress *ClusterConfig_Spec_Ingress `protobuf:"bytes,2,opt,name=ingress,proto3" json:"ingress,omitempty"`
	// Session sets the Cluster Sessions' specific-options.
	Session *ClusterConfig_Spec_Session `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	// Device sets Device-specific options.
	Device *ClusterConfig_Spec_Device `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	// Gateway sets the Gateway-specific options.
	Gateway *ClusterConfig_Spec_Gateway `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// DNS sets the private Cluster's DNS service specific options.
	Dns           *ClusterConfig_Spec_DNS `protobuf:"bytes,6,opt,name=dns,proto3" json:"dns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec) Reset() {
	*x = ClusterConfig_Spec{}
	mi := &file_corev1_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec) ProtoMessage() {}

func (x *ClusterConfig_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0}
}

func (x *ClusterConfig_Spec) GetAuthorization() *ClusterConfig_Spec_Authorization {
	if x != nil {
		return x.Authorization
	}
	return nil
}

func (x *ClusterConfig_Spec) GetIngress() *ClusterConfig_Spec_Ingress {
	if x != nil {
		return x.Ingress
	}
	return nil
}

func (x *ClusterConfig_Spec) GetSession() *ClusterConfig_Spec_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *ClusterConfig_Spec) GetDevice() *ClusterConfig_Spec_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *ClusterConfig_Spec) GetGateway() *ClusterConfig_Spec_Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *ClusterConfig_Spec) GetDns() *ClusterConfig_Spec_DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

type ClusterConfig_Status struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Domain        string                              `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Network       *ClusterConfig_Status_Network       `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	NetworkConfig *ClusterConfig_Status_NetworkConfig `protobuf:"bytes,3,opt,name=networkConfig,proto3" json:"networkConfig,omitempty"`
	SecretManager *ClusterConfig_Status_SecretManager `protobuf:"bytes,4,opt,name=secretManager,proto3" json:"secretManager,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Status) Reset() {
	*x = ClusterConfig_Status{}
	mi := &file_corev1_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status) ProtoMessage() {}

func (x *ClusterConfig_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1}
}

func (x *ClusterConfig_Status) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ClusterConfig_Status) GetNetwork() *ClusterConfig_Status_Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *ClusterConfig_Status) GetNetworkConfig() *ClusterConfig_Status_NetworkConfig {
	if x != nil {
		return x.NetworkConfig
	}
	return nil
}

func (x *ClusterConfig_Status) GetSecretManager() *ClusterConfig_Status_SecretManager {
	if x != nil {
		return x.SecretManager
	}
	return nil
}

type ClusterConfig_Spec_Ingress struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UseForwardedForHeader enables the usage of the X-Forwarded-For header
	// by the Cluster to obtain the downstream's public IP address.
	UseForwardedForHeader bool `protobuf:"varint,1,opt,name=useForwardedForHeader,proto3" json:"useForwardedForHeader,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Ingress) Reset() {
	*x = ClusterConfig_Spec_Ingress{}
	mi := &file_corev1_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Ingress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Ingress) ProtoMessage() {}

func (x *ClusterConfig_Spec_Ingress) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Ingress.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Ingress) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 0}
}

func (x *ClusterConfig_Spec_Ingress) GetUseForwardedForHeader() bool {
	if x != nil {
		return x.UseForwardedForHeader
	}
	return false
}

type ClusterConfig_Spec_Session struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Human sets Session options for HUMAN Users
	Human *ClusterConfig_Spec_Session_Human `protobuf:"bytes,1,opt,name=human,proto3" json:"human,omitempty"`
	// Workload sets Session options for WORKLOAD Users
	Workload      *ClusterConfig_Spec_Session_Workload `protobuf:"bytes,2,opt,name=workload,proto3" json:"workload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Session) Reset() {
	*x = ClusterConfig_Spec_Session{}
	mi := &file_corev1_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Session) ProtoMessage() {}

func (x *ClusterConfig_Spec_Session) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Session.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Session) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 1}
}

func (x *ClusterConfig_Spec_Session) GetHuman() *ClusterConfig_Spec_Session_Human {
	if x != nil {
		return x.Human
	}
	return nil
}

func (x *ClusterConfig_Spec_Session) GetWorkload() *ClusterConfig_Spec_Session_Workload {
	if x != nil {
		return x.Workload
	}
	return nil
}

type ClusterConfig_Spec_Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Human sets Device options for HUMAN Users
	Human *ClusterConfig_Spec_Device_Human `protobuf:"bytes,1,opt,name=human,proto3" json:"human,omitempty"`
	// Workload sets Device options for WORKLOAD Users
	Workload      *ClusterConfig_Spec_Device_Workload `protobuf:"bytes,2,opt,name=workload,proto3" json:"workload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Device) Reset() {
	*x = ClusterConfig_Spec_Device{}
	mi := &file_corev1_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Device) ProtoMessage() {}

func (x *ClusterConfig_Spec_Device) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Device.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Device) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 2}
}

func (x *ClusterConfig_Spec_Device) GetHuman() *ClusterConfig_Spec_Device_Human {
	if x != nil {
		return x.Human
	}
	return nil
}

func (x *ClusterConfig_Spec_Device) GetWorkload() *ClusterConfig_Spec_Device_Workload {
	if x != nil {
		return x.Workload
	}
	return nil
}

type ClusterConfig_Spec_Gateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// WireguardKeyRotationDuration is the duration after which the Gateway's
	// key is rotated
	WireguardKeyRotationDuration *metav1.Duration `protobuf:"bytes,1,opt,name=wireguardKeyRotationDuration,proto3" json:"wireguardKeyRotationDuration,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Gateway) Reset() {
	*x = ClusterConfig_Spec_Gateway{}
	mi := &file_corev1_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Gateway) ProtoMessage() {}

func (x *ClusterConfig_Spec_Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Gateway.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Gateway) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 3}
}

func (x *ClusterConfig_Spec_Gateway) GetWireguardKeyRotationDuration() *metav1.Duration {
	if x != nil {
		return x.WireguardKeyRotationDuration
	}
	return nil
}

type ClusterConfig_Spec_DNS struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	FallbackZone  *ClusterConfig_Spec_DNS_Zone `protobuf:"bytes,1,opt,name=fallbackZone,proto3" json:"fallbackZone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_DNS) Reset() {
	*x = ClusterConfig_Spec_DNS{}
	mi := &file_corev1_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_DNS) ProtoMessage() {}

func (x *ClusterConfig_Spec_DNS) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_DNS.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_DNS) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 4}
}

func (x *ClusterConfig_Spec_DNS) GetFallbackZone() *ClusterConfig_Spec_DNS_Zone {
	if x != nil {
		return x.FallbackZone
	}
	return nil
}

type ClusterConfig_Spec_Authorization struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,2,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Authorization) Reset() {
	*x = ClusterConfig_Spec_Authorization{}
	mi := &file_corev1_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Authorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Authorization) ProtoMessage() {}

func (x *ClusterConfig_Spec_Authorization) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Authorization.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Authorization) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 5}
}

func (x *ClusterConfig_Spec_Authorization) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ClusterConfig_Spec_Authorization) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

type ClusterConfig_Spec_Session_Human struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientDuration sets the Session duration used by clients after which
	// the Session is deemed expired and automatically deleted by the
	// Cluster.
	ClientDuration *metav1.Duration `protobuf:"bytes,1,opt,name=clientDuration,proto3" json:"clientDuration,omitempty"`
	// ClientlessDuration sets the Session duration for the
	// client-less/BeyondCorp mode after which the Session is deemed expired
	// and automatically deleted by the Cluster.
	ClientlessDuration *metav1.Duration `protobuf:"bytes,2,opt,name=clientlessDuration,proto3" json:"clientlessDuration,omitempty"`
	// AccessTokenDuration sets the access token duration
	AccessTokenDuration *metav1.Duration `protobuf:"bytes,3,opt,name=accessTokenDuration,proto3" json:"accessTokenDuration,omitempty"`
	// RefreshTokenDuration sets the refresh token duration
	RefreshTokenDuration *metav1.Duration `protobuf:"bytes,4,opt,name=refreshTokenDuration,proto3" json:"refreshTokenDuration,omitempty"`
	// MaxPerUser sets the max number of of Sessions per User
	MaxPerUser uint32 `protobuf:"varint,5,opt,name=maxPerUser,proto3" json:"maxPerUser,omitempty"`
	// DefaultState is the default state of a newly created Session
	DefaultState  Session_Spec_State `protobuf:"varint,6,opt,name=defaultState,proto3,enum=octelium.api.main.core.v1.Session_Spec_State" json:"defaultState,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Session_Human) Reset() {
	*x = ClusterConfig_Spec_Session_Human{}
	mi := &file_corev1_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Session_Human) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Session_Human) ProtoMessage() {}

func (x *ClusterConfig_Spec_Session_Human) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Session_Human.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Session_Human) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 1, 0}
}

func (x *ClusterConfig_Spec_Session_Human) GetClientDuration() *metav1.Duration {
	if x != nil {
		return x.ClientDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Human) GetClientlessDuration() *metav1.Duration {
	if x != nil {
		return x.ClientlessDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Human) GetAccessTokenDuration() *metav1.Duration {
	if x != nil {
		return x.AccessTokenDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Human) GetRefreshTokenDuration() *metav1.Duration {
	if x != nil {
		return x.RefreshTokenDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Human) GetMaxPerUser() uint32 {
	if x != nil {
		return x.MaxPerUser
	}
	return 0
}

func (x *ClusterConfig_Spec_Session_Human) GetDefaultState() Session_Spec_State {
	if x != nil {
		return x.DefaultState
	}
	return Session_Spec_STATE_UNKNOWN
}

type ClusterConfig_Spec_Session_Workload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClientDuration sets the Session duration used by clients after which
	// the Session is deemed expired and automatically deleted by the
	// Cluster.
	ClientDuration *metav1.Duration `protobuf:"bytes,1,opt,name=clientDuration,proto3" json:"clientDuration,omitempty"`
	// ClientlessDuration sets the Session duration for the
	// client-less/BeyondCorp mode after which the Session is deemed expired
	// and automatically deleted by the Cluster.
	ClientlessDuration *metav1.Duration `protobuf:"bytes,2,opt,name=clientlessDuration,proto3" json:"clientlessDuration,omitempty"`
	// AccessTokenDuration sets the access token duration
	AccessTokenDuration *metav1.Duration `protobuf:"bytes,3,opt,name=accessTokenDuration,proto3" json:"accessTokenDuration,omitempty"`
	// RefreshTokenDuration sets the refresh token duration
	RefreshTokenDuration *metav1.Duration `protobuf:"bytes,4,opt,name=refreshTokenDuration,proto3" json:"refreshTokenDuration,omitempty"`
	// MaxPerUser sets the max number of of Sessions per User
	MaxPerUser uint32 `protobuf:"varint,5,opt,name=maxPerUser,proto3" json:"maxPerUser,omitempty"`
	// DefaultState is the default state of a newly created Session
	DefaultState  Session_Spec_State `protobuf:"varint,6,opt,name=defaultState,proto3,enum=octelium.api.main.core.v1.Session_Spec_State" json:"defaultState,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Session_Workload) Reset() {
	*x = ClusterConfig_Spec_Session_Workload{}
	mi := &file_corev1_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Session_Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Session_Workload) ProtoMessage() {}

func (x *ClusterConfig_Spec_Session_Workload) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Session_Workload.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Session_Workload) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 1, 1}
}

func (x *ClusterConfig_Spec_Session_Workload) GetClientDuration() *metav1.Duration {
	if x != nil {
		return x.ClientDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Workload) GetClientlessDuration() *metav1.Duration {
	if x != nil {
		return x.ClientlessDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Workload) GetAccessTokenDuration() *metav1.Duration {
	if x != nil {
		return x.AccessTokenDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Workload) GetRefreshTokenDuration() *metav1.Duration {
	if x != nil {
		return x.RefreshTokenDuration
	}
	return nil
}

func (x *ClusterConfig_Spec_Session_Workload) GetMaxPerUser() uint32 {
	if x != nil {
		return x.MaxPerUser
	}
	return 0
}

func (x *ClusterConfig_Spec_Session_Workload) GetDefaultState() Session_Spec_State {
	if x != nil {
		return x.DefaultState
	}
	return Session_Spec_STATE_UNKNOWN
}

type ClusterConfig_Spec_Device_Human struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DefaultState is the default state of a newly registered Device
	DefaultState Device_Spec_State `protobuf:"varint,1,opt,name=defaultState,proto3,enum=octelium.api.main.core.v1.Device_Spec_State" json:"defaultState,omitempty"`
	// MaxPerUser sets the max number of of Devices per User
	MaxPerUser    uint32 `protobuf:"varint,2,opt,name=maxPerUser,proto3" json:"maxPerUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Device_Human) Reset() {
	*x = ClusterConfig_Spec_Device_Human{}
	mi := &file_corev1_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Device_Human) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Device_Human) ProtoMessage() {}

func (x *ClusterConfig_Spec_Device_Human) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Device_Human.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Device_Human) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 2, 0}
}

func (x *ClusterConfig_Spec_Device_Human) GetDefaultState() Device_Spec_State {
	if x != nil {
		return x.DefaultState
	}
	return Device_Spec_STATE_UNKNOWN
}

func (x *ClusterConfig_Spec_Device_Human) GetMaxPerUser() uint32 {
	if x != nil {
		return x.MaxPerUser
	}
	return 0
}

type ClusterConfig_Spec_Device_Workload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DefaultState is the default state of a newly registered Device
	DefaultState Device_Spec_State `protobuf:"varint,1,opt,name=defaultState,proto3,enum=octelium.api.main.core.v1.Device_Spec_State" json:"defaultState,omitempty"`
	// MaxPerUser sets the max number of of Devices per User
	MaxPerUser    uint32 `protobuf:"varint,2,opt,name=maxPerUser,proto3" json:"maxPerUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_Device_Workload) Reset() {
	*x = ClusterConfig_Spec_Device_Workload{}
	mi := &file_corev1_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_Device_Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_Device_Workload) ProtoMessage() {}

func (x *ClusterConfig_Spec_Device_Workload) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_Device_Workload.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_Device_Workload) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 2, 1}
}

func (x *ClusterConfig_Spec_Device_Workload) GetDefaultState() Device_Spec_State {
	if x != nil {
		return x.DefaultState
	}
	return Device_Spec_STATE_UNKNOWN
}

func (x *ClusterConfig_Spec_Device_Workload) GetMaxPerUser() uint32 {
	if x != nil {
		return x.MaxPerUser
	}
	return 0
}

type ClusterConfig_Spec_DNS_Zone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []string               `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	CacheDuration *metav1.Duration       `protobuf:"bytes,2,opt,name=cacheDuration,proto3" json:"cacheDuration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Spec_DNS_Zone) Reset() {
	*x = ClusterConfig_Spec_DNS_Zone{}
	mi := &file_corev1_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Spec_DNS_Zone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Spec_DNS_Zone) ProtoMessage() {}

func (x *ClusterConfig_Spec_DNS_Zone) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Spec_DNS_Zone.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Spec_DNS_Zone) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 0, 4, 0}
}

func (x *ClusterConfig_Spec_DNS_Zone) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ClusterConfig_Spec_DNS_Zone) GetCacheDuration() *metav1.Duration {
	if x != nil {
		return x.CacheDuration
	}
	return nil
}

type ClusterConfig_Status_NetworkConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Mode sets the networking mode (DualStack, IPv4Only or IPv6Only) for
	// the Cluster's Networks. This can only be effective when set prior to
	// the Cluster installation or upgrade.
	Mode ClusterConfig_Status_NetworkConfig_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=octelium.api.main.core.v1.ClusterConfig_Status_NetworkConfig_Mode" json:"mode,omitempty"`
	// V4 sets IPv4 Network configurations.
	V4 *ClusterConfig_Status_NetworkConfig_V4 `protobuf:"bytes,2,opt,name=v4,proto3" json:"v4,omitempty"`
	// V6 sets IPv6 Network configurations.
	V6 *ClusterConfig_Status_NetworkConfig_V6 `protobuf:"bytes,3,opt,name=v6,proto3" json:"v6,omitempty"`
	// Wireguard sets the Wireguard-specific configuration
	Wireguard *ClusterConfig_Status_NetworkConfig_Wireguard `protobuf:"bytes,4,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	// QUICV0 (EXPERIMENTAL) sets the QUICv0-specific configuration
	Quicv0        *ClusterConfig_Status_NetworkConfig_QUICV0 `protobuf:"bytes,5,opt,name=quicv0,proto3" json:"quicv0,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Status_NetworkConfig) Reset() {
	*x = ClusterConfig_Status_NetworkConfig{}
	mi := &file_corev1_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_NetworkConfig) ProtoMessage() {}

func (x *ClusterConfig_Status_NetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_NetworkConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_NetworkConfig) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 0}
}

func (x *ClusterConfig_Status_NetworkConfig) GetMode() ClusterConfig_Status_NetworkConfig_Mode {
	if x != nil {
		return x.Mode
	}
	return ClusterConfig_Status_NetworkConfig_MODE_DEFAULT
}

func (x *ClusterConfig_Status_NetworkConfig) GetV4() *ClusterConfig_Status_NetworkConfig_V4 {
	if x != nil {
		return x.V4
	}
	return nil
}

func (x *ClusterConfig_Status_NetworkConfig) GetV6() *ClusterConfig_Status_NetworkConfig_V6 {
	if x != nil {
		return x.V6
	}
	return nil
}

func (x *ClusterConfig_Status_NetworkConfig) GetWireguard() *ClusterConfig_Status_NetworkConfig_Wireguard {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

func (x *ClusterConfig_Status_NetworkConfig) GetQuicv0() *ClusterConfig_Status_NetworkConfig_QUICV0 {
	if x != nil {
		return x.Quicv0
	}
	return nil
}

type ClusterConfig_Status_Network struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	ClusterNetwork *metav1.DualStackNetwork `protobuf:"bytes,1,opt,name=clusterNetwork,proto3" json:"clusterNetwork,omitempty"`
	WgConnSubnet   *metav1.DualStackNetwork `protobuf:"bytes,2,opt,name=wgConnSubnet,proto3" json:"wgConnSubnet,omitempty"`
	V6RangePrefix  []byte                   `protobuf:"bytes,3,opt,name=v6RangePrefix,proto3" json:"v6RangePrefix,omitempty"`
	ServiceSubnet  *metav1.DualStackNetwork `protobuf:"bytes,4,opt,name=serviceSubnet,proto3" json:"serviceSubnet,omitempty"`
	QuicConnSubnet *metav1.DualStackNetwork `protobuf:"bytes,5,opt,name=quicConnSubnet,proto3" json:"quicConnSubnet,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClusterConfig_Status_Network) Reset() {
	*x = ClusterConfig_Status_Network{}
	mi := &file_corev1_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_Network) ProtoMessage() {}

func (x *ClusterConfig_Status_Network) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_Network.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_Network) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 1}
}

func (x *ClusterConfig_Status_Network) GetClusterNetwork() *metav1.DualStackNetwork {
	if x != nil {
		return x.ClusterNetwork
	}
	return nil
}

func (x *ClusterConfig_Status_Network) GetWgConnSubnet() *metav1.DualStackNetwork {
	if x != nil {
		return x.WgConnSubnet
	}
	return nil
}

func (x *ClusterConfig_Status_Network) GetV6RangePrefix() []byte {
	if x != nil {
		return x.V6RangePrefix
	}
	return nil
}

func (x *ClusterConfig_Status_Network) GetServiceSubnet() *metav1.DualStackNetwork {
	if x != nil {
		return x.ServiceSubnet
	}
	return nil
}

func (x *ClusterConfig_Status_Network) GetQuicConnSubnet() *metav1.DualStackNetwork {
	if x != nil {
		return x.QuicConnSubnet
	}
	return nil
}

type ClusterConfig_Status_SecretManager struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Address       string                                  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Tls           *ClusterConfig_Status_SecretManager_TLS `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Status_SecretManager) Reset() {
	*x = ClusterConfig_Status_SecretManager{}
	mi := &file_corev1_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_SecretManager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_SecretManager) ProtoMessage() {}

func (x *ClusterConfig_Status_SecretManager) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_SecretManager.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_SecretManager) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 2}
}

func (x *ClusterConfig_Status_SecretManager) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ClusterConfig_Status_SecretManager) GetTls() *ClusterConfig_Status_SecretManager_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

type ClusterConfig_Status_NetworkConfig_V4 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClusterNetwork is the Cluster network range. Currently
	// `100.64.0.0/10` is used by default.
	ClusterNetwork string `protobuf:"bytes,1,opt,name=clusterNetwork,proto3" json:"clusterNetwork,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClusterConfig_Status_NetworkConfig_V4) Reset() {
	*x = ClusterConfig_Status_NetworkConfig_V4{}
	mi := &file_corev1_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_NetworkConfig_V4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_NetworkConfig_V4) ProtoMessage() {}

func (x *ClusterConfig_Status_NetworkConfig_V4) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_NetworkConfig_V4.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_NetworkConfig_V4) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 0, 0}
}

func (x *ClusterConfig_Status_NetworkConfig_V4) GetClusterNetwork() string {
	if x != nil {
		return x.ClusterNetwork
	}
	return ""
}

type ClusterConfig_Status_NetworkConfig_V6 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ClusterNetwork is the Cluster network range. Currently not enforced
	// as the Cluster automatically chooses the Network ranges.
	ClusterNetwork string `protobuf:"bytes,1,opt,name=clusterNetwork,proto3" json:"clusterNetwork,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClusterConfig_Status_NetworkConfig_V6) Reset() {
	*x = ClusterConfig_Status_NetworkConfig_V6{}
	mi := &file_corev1_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_NetworkConfig_V6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_NetworkConfig_V6) ProtoMessage() {}

func (x *ClusterConfig_Status_NetworkConfig_V6) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_NetworkConfig_V6.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_NetworkConfig_V6) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 0, 1}
}

func (x *ClusterConfig_Status_NetworkConfig_V6) GetClusterNetwork() string {
	if x != nil {
		return x.ClusterNetwork
	}
	return ""
}

type ClusterConfig_Status_NetworkConfig_Wireguard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GatewayPort sets the Gateway port. By default it is set to 53820
	GatewayPort uint32 `protobuf:"varint,1,opt,name=gatewayPort,proto3" json:"gatewayPort,omitempty"`
	// MTU overrides the default value used for the Gateway interface's MTU.
	Mtu           uint32 `protobuf:"varint,2,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Status_NetworkConfig_Wireguard) Reset() {
	*x = ClusterConfig_Status_NetworkConfig_Wireguard{}
	mi := &file_corev1_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_NetworkConfig_Wireguard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_NetworkConfig_Wireguard) ProtoMessage() {}

func (x *ClusterConfig_Status_NetworkConfig_Wireguard) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_NetworkConfig_Wireguard.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_NetworkConfig_Wireguard) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 0, 2}
}

func (x *ClusterConfig_Status_NetworkConfig_Wireguard) GetGatewayPort() uint32 {
	if x != nil {
		return x.GatewayPort
	}
	return 0
}

func (x *ClusterConfig_Status_NetworkConfig_Wireguard) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type ClusterConfig_Status_NetworkConfig_QUICV0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enable enables QUICv0 gateways. By default this mode is not enabled.
	Enable bool `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	// GatewayPort sets the Gateway port. By default it is set to 8443
	GatewayPort uint32 `protobuf:"varint,2,opt,name=gatewayPort,proto3" json:"gatewayPort,omitempty"`
	// MTU overrides the default value used for the Gateway interface's MTU.
	Mtu           uint32 `protobuf:"varint,3,opt,name=mtu,proto3" json:"mtu,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Status_NetworkConfig_QUICV0) Reset() {
	*x = ClusterConfig_Status_NetworkConfig_QUICV0{}
	mi := &file_corev1_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_NetworkConfig_QUICV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_NetworkConfig_QUICV0) ProtoMessage() {}

func (x *ClusterConfig_Status_NetworkConfig_QUICV0) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_NetworkConfig_QUICV0.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_NetworkConfig_QUICV0) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 0, 3}
}

func (x *ClusterConfig_Status_NetworkConfig_QUICV0) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ClusterConfig_Status_NetworkConfig_QUICV0) GetGatewayPort() uint32 {
	if x != nil {
		return x.GatewayPort
	}
	return 0
}

func (x *ClusterConfig_Status_NetworkConfig_QUICV0) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type ClusterConfig_Status_SecretManager_TLS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig_Status_SecretManager_TLS) Reset() {
	*x = ClusterConfig_Status_SecretManager_TLS{}
	mi := &file_corev1_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig_Status_SecretManager_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig_Status_SecretManager_TLS) ProtoMessage() {}

func (x *ClusterConfig_Status_SecretManager_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig_Status_SecretManager_TLS.ProtoReflect.Descriptor instead.
func (*ClusterConfig_Status_SecretManager_TLS) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{45, 1, 2, 0}
}

type RequestContext_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RequestContext_Request_Http
	//	*RequestContext_Request_Ssh
	//	*RequestContext_Request_Kubernetes_
	//	*RequestContext_Request_Grpc
	//	*RequestContext_Request_Postgres_
	//	*RequestContext_Request_Dns
	Type          isRequestContext_Request_Type `protobuf_oneof:"Type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request) Reset() {
	*x = RequestContext_Request{}
	mi := &file_corev1_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request) ProtoMessage() {}

func (x *RequestContext_Request) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request.ProtoReflect.Descriptor instead.
func (*RequestContext_Request) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0}
}

func (x *RequestContext_Request) GetType() isRequestContext_Request_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RequestContext_Request) GetHttp() *RequestContext_Request_HTTP {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Http); ok {
			return x.Http
		}
	}
	return nil
}

func (x *RequestContext_Request) GetSsh() *RequestContext_Request_SSH {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Ssh); ok {
			return x.Ssh
		}
	}
	return nil
}

func (x *RequestContext_Request) GetKubernetes() *RequestContext_Request_Kubernetes {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Kubernetes_); ok {
			return x.Kubernetes
		}
	}
	return nil
}

func (x *RequestContext_Request) GetGrpc() *RequestContext_Request_GRPC {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Grpc); ok {
			return x.Grpc
		}
	}
	return nil
}

func (x *RequestContext_Request) GetPostgres() *RequestContext_Request_Postgres {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

func (x *RequestContext_Request) GetDns() *RequestContext_Request_DNS {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Dns); ok {
			return x.Dns
		}
	}
	return nil
}

type isRequestContext_Request_Type interface {
	isRequestContext_Request_Type()
}

type RequestContext_Request_Http struct {
	// HTTP is the HTTP specific details.
	Http *RequestContext_Request_HTTP `protobuf:"bytes,1,opt,name=http,proto3,oneof"`
}

type RequestContext_Request_Ssh struct {
	Ssh *RequestContext_Request_SSH `protobuf:"bytes,2,opt,name=ssh,proto3,oneof"`
}

type RequestContext_Request_Kubernetes_ struct {
	Kubernetes *RequestContext_Request_Kubernetes `protobuf:"bytes,3,opt,name=kubernetes,proto3,oneof"`
}

type RequestContext_Request_Grpc struct {
	Grpc *RequestContext_Request_GRPC `protobuf:"bytes,4,opt,name=grpc,proto3,oneof"`
}

type RequestContext_Request_Postgres_ struct {
	Postgres *RequestContext_Request_Postgres `protobuf:"bytes,5,opt,name=postgres,proto3,oneof"`
}

type RequestContext_Request_Dns struct {
	Dns *RequestContext_Request_DNS `protobuf:"bytes,6,opt,name=dns,proto3,oneof"`
}

func (*RequestContext_Request_Http) isRequestContext_Request_Type() {}

func (*RequestContext_Request_Ssh) isRequestContext_Request_Type() {}

func (*RequestContext_Request_Kubernetes_) isRequestContext_Request_Type() {}

func (*RequestContext_Request_Grpc) isRequestContext_Request_Type() {}

func (*RequestContext_Request_Postgres_) isRequestContext_Request_Type() {}

func (*RequestContext_Request_Dns) isRequestContext_Request_Type() {}

type RequestContext_Request_HTTP struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Headers is the map of HTTP request headers.
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Method is the HTTP method (e.g. `GET`, `POST`).
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// Path is the HTTP path without query params.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Host is the HTTP request `Host` or 'Authority` header value.
	Host string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	// Protocol is the HTTP protocol (i.e. `HTTP/1.0`, `HTTP/1.1` or
	// `HTTP/2`)
	Protocol string `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Size is the HTTP request size in bytes. If unknown, it must be -1.
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Scheme is the request scheme
	Scheme string `protobuf:"bytes,7,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Body is the request body
	Body []byte `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	// BodyMap is the serialized request body. Currently used with JSON.
	BodyMap *structpb.Struct `protobuf:"bytes,9,opt,name=bodyMap,proto3" json:"bodyMap,omitempty"`
	// URI is the request path including the query
	Uri string `protobuf:"bytes,10,opt,name=uri,proto3" json:"uri,omitempty"`
	// QueryParams is the map of HTTP request query params. Params only
	// assumes single-valued query params. If you want to check multi-valued
	// params then you need to instead parse the URI field.
	QueryParams   map[string]string `protobuf:"bytes,11,rep,name=queryParams,proto3" json:"queryParams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_HTTP) Reset() {
	*x = RequestContext_Request_HTTP{}
	mi := &file_corev1_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_HTTP) ProtoMessage() {}

func (x *RequestContext_Request_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_HTTP.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_HTTP) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 0}
}

func (x *RequestContext_Request_HTTP) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RequestContext_Request_HTTP) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RequestContext_Request_HTTP) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RequestContext_Request_HTTP) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RequestContext_Request_HTTP) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *RequestContext_Request_HTTP) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *RequestContext_Request_HTTP) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *RequestContext_Request_HTTP) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RequestContext_Request_HTTP) GetBodyMap() *structpb.Struct {
	if x != nil {
		return x.BodyMap
	}
	return nil
}

func (x *RequestContext_Request_HTTP) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *RequestContext_Request_HTTP) GetQueryParams() map[string]string {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type RequestContext_Request_SSH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RequestContext_Request_SSH_Connect_
	Type          isRequestContext_Request_SSH_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_SSH) Reset() {
	*x = RequestContext_Request_SSH{}
	mi := &file_corev1_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_SSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_SSH) ProtoMessage() {}

func (x *RequestContext_Request_SSH) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_SSH.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_SSH) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 1}
}

func (x *RequestContext_Request_SSH) GetType() isRequestContext_Request_SSH_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RequestContext_Request_SSH) GetConnect() *RequestContext_Request_SSH_Connect {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_SSH_Connect_); ok {
			return x.Connect
		}
	}
	return nil
}

type isRequestContext_Request_SSH_Type interface {
	isRequestContext_Request_SSH_Type()
}

type RequestContext_Request_SSH_Connect_ struct {
	Connect *RequestContext_Request_SSH_Connect `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

func (*RequestContext_Request_SSH_Connect_) isRequestContext_Request_SSH_Type() {}

type RequestContext_Request_Kubernetes struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Http          *RequestContext_Request_HTTP `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Verb          string                       `protobuf:"bytes,2,opt,name=verb,proto3" json:"verb,omitempty"`
	ApiPrefix     string                       `protobuf:"bytes,3,opt,name=apiPrefix,proto3" json:"apiPrefix,omitempty"`
	ApiGroup      string                       `protobuf:"bytes,4,opt,name=apiGroup,proto3" json:"apiGroup,omitempty"`
	ApiVersion    string                       `protobuf:"bytes,5,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Namespace     string                       `protobuf:"bytes,6,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Resource      string                       `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	Subresource   string                       `protobuf:"bytes,8,opt,name=subresource,proto3" json:"subresource,omitempty"`
	Name          string                       `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_Kubernetes) Reset() {
	*x = RequestContext_Request_Kubernetes{}
	mi := &file_corev1_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_Kubernetes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_Kubernetes) ProtoMessage() {}

func (x *RequestContext_Request_Kubernetes) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_Kubernetes.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_Kubernetes) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 2}
}

func (x *RequestContext_Request_Kubernetes) GetHttp() *RequestContext_Request_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *RequestContext_Request_Kubernetes) GetVerb() string {
	if x != nil {
		return x.Verb
	}
	return ""
}

func (x *RequestContext_Request_Kubernetes) GetApiPrefix() string {
	if x != nil {
		return x.ApiPrefix
	}
	return ""
}

func (x *RequestContext_Request_Kubernetes) GetApiGroup() string {
	if x != nil {
		return x.ApiGroup
	}
	return ""
}

func (x *RequestContext_Request_Kubernetes) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *RequestContext_Request_Kubernetes) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RequestContext_Request_Kubernetes) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *RequestContext_Request_Kubernetes) GetSubresource() string {
	if x != nil {
		return x.Subresource
	}
	return ""
}

func (x *RequestContext_Request_Kubernetes) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RequestContext_Request_GRPC struct {
	state           protoimpl.MessageState       `protogen:"open.v1"`
	Http            *RequestContext_Request_HTTP `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	Method          string                       `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Service         string                       `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty"`
	ServiceFullName string                       `protobuf:"bytes,4,opt,name=serviceFullName,proto3" json:"serviceFullName,omitempty"`
	Package         string                       `protobuf:"bytes,5,opt,name=package,proto3" json:"package,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RequestContext_Request_GRPC) Reset() {
	*x = RequestContext_Request_GRPC{}
	mi := &file_corev1_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_GRPC) ProtoMessage() {}

func (x *RequestContext_Request_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_GRPC.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_GRPC) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 3}
}

func (x *RequestContext_Request_GRPC) GetHttp() *RequestContext_Request_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *RequestContext_Request_GRPC) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RequestContext_Request_GRPC) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *RequestContext_Request_GRPC) GetServiceFullName() string {
	if x != nil {
		return x.ServiceFullName
	}
	return ""
}

func (x *RequestContext_Request_GRPC) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

type RequestContext_Request_Postgres struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RequestContext_Request_Postgres_Connect_
	//	*RequestContext_Request_Postgres_Query_
	//	*RequestContext_Request_Postgres_Parse_
	Type          isRequestContext_Request_Postgres_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_Postgres) Reset() {
	*x = RequestContext_Request_Postgres{}
	mi := &file_corev1_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_Postgres) ProtoMessage() {}

func (x *RequestContext_Request_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_Postgres.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_Postgres) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 4}
}

func (x *RequestContext_Request_Postgres) GetType() isRequestContext_Request_Postgres_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RequestContext_Request_Postgres) GetConnect() *RequestContext_Request_Postgres_Connect {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Postgres_Connect_); ok {
			return x.Connect
		}
	}
	return nil
}

func (x *RequestContext_Request_Postgres) GetQuery() *RequestContext_Request_Postgres_Query {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Postgres_Query_); ok {
			return x.Query
		}
	}
	return nil
}

func (x *RequestContext_Request_Postgres) GetParse() *RequestContext_Request_Postgres_Parse {
	if x != nil {
		if x, ok := x.Type.(*RequestContext_Request_Postgres_Parse_); ok {
			return x.Parse
		}
	}
	return nil
}

type isRequestContext_Request_Postgres_Type interface {
	isRequestContext_Request_Postgres_Type()
}

type RequestContext_Request_Postgres_Connect_ struct {
	Connect *RequestContext_Request_Postgres_Connect `protobuf:"bytes,1,opt,name=connect,proto3,oneof"`
}

type RequestContext_Request_Postgres_Query_ struct {
	Query *RequestContext_Request_Postgres_Query `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

type RequestContext_Request_Postgres_Parse_ struct {
	Parse *RequestContext_Request_Postgres_Parse `protobuf:"bytes,3,opt,name=parse,proto3,oneof"`
}

func (*RequestContext_Request_Postgres_Connect_) isRequestContext_Request_Postgres_Type() {}

func (*RequestContext_Request_Postgres_Query_) isRequestContext_Request_Postgres_Type() {}

func (*RequestContext_Request_Postgres_Parse_) isRequestContext_Request_Postgres_Type() {}

type RequestContext_Request_DNS struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TypeID        int32                  `protobuf:"varint,2,opt,name=typeID,proto3" json:"typeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_DNS) Reset() {
	*x = RequestContext_Request_DNS{}
	mi := &file_corev1_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_DNS) ProtoMessage() {}

func (x *RequestContext_Request_DNS) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_DNS.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_DNS) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 5}
}

func (x *RequestContext_Request_DNS) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestContext_Request_DNS) GetTypeID() int32 {
	if x != nil {
		return x.TypeID
	}
	return 0
}

type RequestContext_Request_SSH_Connect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_SSH_Connect) Reset() {
	*x = RequestContext_Request_SSH_Connect{}
	mi := &file_corev1_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_SSH_Connect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_SSH_Connect) ProtoMessage() {}

func (x *RequestContext_Request_SSH_Connect) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_SSH_Connect.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_SSH_Connect) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 1, 0}
}

func (x *RequestContext_Request_SSH_Connect) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type RequestContext_Request_Postgres_Connect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Database      string                 `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_Postgres_Connect) Reset() {
	*x = RequestContext_Request_Postgres_Connect{}
	mi := &file_corev1_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_Postgres_Connect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_Postgres_Connect) ProtoMessage() {}

func (x *RequestContext_Request_Postgres_Connect) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_Postgres_Connect.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_Postgres_Connect) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 4, 0}
}

func (x *RequestContext_Request_Postgres_Connect) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RequestContext_Request_Postgres_Connect) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type RequestContext_Request_Postgres_Query struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_Postgres_Query) Reset() {
	*x = RequestContext_Request_Postgres_Query{}
	mi := &file_corev1_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_Postgres_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_Postgres_Query) ProtoMessage() {}

func (x *RequestContext_Request_Postgres_Query) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_Postgres_Query.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_Postgres_Query) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 4, 1}
}

func (x *RequestContext_Request_Postgres_Query) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type RequestContext_Request_Postgres_Parse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RequestContext_Request_Postgres_Parse) Reset() {
	*x = RequestContext_Request_Postgres_Parse{}
	mi := &file_corev1_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestContext_Request_Postgres_Parse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestContext_Request_Postgres_Parse) ProtoMessage() {}

func (x *RequestContext_Request_Postgres_Parse) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestContext_Request_Postgres_Parse.ProtoReflect.Descriptor instead.
func (*RequestContext_Request_Postgres_Parse) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{46, 0, 4, 2}
}

func (x *RequestContext_Request_Postgres_Parse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RequestContext_Request_Postgres_Parse) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type PolicyTrigger_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTrigger_Spec) Reset() {
	*x = PolicyTrigger_Spec{}
	mi := &file_corev1_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTrigger_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTrigger_Spec) ProtoMessage() {}

func (x *PolicyTrigger_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTrigger_Spec.ProtoReflect.Descriptor instead.
func (*PolicyTrigger_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{47, 0}
}

type PolicyTrigger_Status struct {
	state        protoimpl.MessageState             `protogen:"open.v1"`
	OwnerRef     *metav1.ObjectReference            `protobuf:"bytes,1,opt,name=ownerRef,proto3" json:"ownerRef,omitempty"`
	PreCondition *PolicyTrigger_Status_PreCondition `protobuf:"bytes,2,opt,name=preCondition,proto3" json:"preCondition,omitempty"`
	// Policies is the list of standalone Policies
	Policies []string `protobuf:"bytes,3,rep,name=policies,proto3" json:"policies,omitempty"`
	// InlinePolicies is the list of inline Policies
	InlinePolicies []*InlinePolicy `protobuf:"bytes,4,rep,name=inlinePolicies,proto3" json:"inlinePolicies,omitempty"`
	IsDisabled     bool            `protobuf:"varint,5,opt,name=isDisabled,proto3" json:"isDisabled,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PolicyTrigger_Status) Reset() {
	*x = PolicyTrigger_Status{}
	mi := &file_corev1_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTrigger_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTrigger_Status) ProtoMessage() {}

func (x *PolicyTrigger_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTrigger_Status.ProtoReflect.Descriptor instead.
func (*PolicyTrigger_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{47, 1}
}

func (x *PolicyTrigger_Status) GetOwnerRef() *metav1.ObjectReference {
	if x != nil {
		return x.OwnerRef
	}
	return nil
}

func (x *PolicyTrigger_Status) GetPreCondition() *PolicyTrigger_Status_PreCondition {
	if x != nil {
		return x.PreCondition
	}
	return nil
}

func (x *PolicyTrigger_Status) GetPolicies() []string {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *PolicyTrigger_Status) GetInlinePolicies() []*InlinePolicy {
	if x != nil {
		return x.InlinePolicies
	}
	return nil
}

func (x *PolicyTrigger_Status) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

type PolicyTrigger_Status_PreCondition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*PolicyTrigger_Status_PreCondition_NotBefore
	//	*PolicyTrigger_Status_PreCondition_NotAfter
	//	*PolicyTrigger_Status_PreCondition_SessionRef
	//	*PolicyTrigger_Status_PreCondition_UserRef
	//	*PolicyTrigger_Status_PreCondition_MatchAny
	//	*PolicyTrigger_Status_PreCondition_Condition
	//	*PolicyTrigger_Status_PreCondition_Any_
	//	*PolicyTrigger_Status_PreCondition_All_
	Type          isPolicyTrigger_Status_PreCondition_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTrigger_Status_PreCondition) Reset() {
	*x = PolicyTrigger_Status_PreCondition{}
	mi := &file_corev1_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTrigger_Status_PreCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTrigger_Status_PreCondition) ProtoMessage() {}

func (x *PolicyTrigger_Status_PreCondition) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTrigger_Status_PreCondition.ProtoReflect.Descriptor instead.
func (*PolicyTrigger_Status_PreCondition) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{47, 1, 0}
}

func (x *PolicyTrigger_Status_PreCondition) GetType() isPolicyTrigger_Status_PreCondition_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PolicyTrigger_Status_PreCondition) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_NotBefore); ok {
			return x.NotBefore
		}
	}
	return nil
}

func (x *PolicyTrigger_Status_PreCondition) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_NotAfter); ok {
			return x.NotAfter
		}
	}
	return nil
}

func (x *PolicyTrigger_Status_PreCondition) GetSessionRef() *metav1.ObjectReference {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_SessionRef); ok {
			return x.SessionRef
		}
	}
	return nil
}

func (x *PolicyTrigger_Status_PreCondition) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_UserRef); ok {
			return x.UserRef
		}
	}
	return nil
}

func (x *PolicyTrigger_Status_PreCondition) GetMatchAny() bool {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_MatchAny); ok {
			return x.MatchAny
		}
	}
	return false
}

func (x *PolicyTrigger_Status_PreCondition) GetCondition() *Condition {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_Condition); ok {
			return x.Condition
		}
	}
	return nil
}

func (x *PolicyTrigger_Status_PreCondition) GetAny() *PolicyTrigger_Status_PreCondition_Any {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_Any_); ok {
			return x.Any
		}
	}
	return nil
}

func (x *PolicyTrigger_Status_PreCondition) GetAll() *PolicyTrigger_Status_PreCondition_All {
	if x != nil {
		if x, ok := x.Type.(*PolicyTrigger_Status_PreCondition_All_); ok {
			return x.All
		}
	}
	return nil
}

type isPolicyTrigger_Status_PreCondition_Type interface {
	isPolicyTrigger_Status_PreCondition_Type()
}

type PolicyTrigger_Status_PreCondition_NotBefore struct {
	NotBefore *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=notBefore,proto3,oneof"`
}

type PolicyTrigger_Status_PreCondition_NotAfter struct {
	NotAfter *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=notAfter,proto3,oneof"`
}

type PolicyTrigger_Status_PreCondition_SessionRef struct {
	SessionRef *metav1.ObjectReference `protobuf:"bytes,3,opt,name=sessionRef,proto3,oneof"`
}

type PolicyTrigger_Status_PreCondition_UserRef struct {
	UserRef *metav1.ObjectReference `protobuf:"bytes,4,opt,name=userRef,proto3,oneof"`
}

type PolicyTrigger_Status_PreCondition_MatchAny struct {
	MatchAny bool `protobuf:"varint,5,opt,name=matchAny,proto3,oneof"`
}

type PolicyTrigger_Status_PreCondition_Condition struct {
	Condition *Condition `protobuf:"bytes,6,opt,name=condition,proto3,oneof"`
}

type PolicyTrigger_Status_PreCondition_Any_ struct {
	Any *PolicyTrigger_Status_PreCondition_Any `protobuf:"bytes,7,opt,name=any,proto3,oneof"`
}

type PolicyTrigger_Status_PreCondition_All_ struct {
	All *PolicyTrigger_Status_PreCondition_All `protobuf:"bytes,8,opt,name=all,proto3,oneof"`
}

func (*PolicyTrigger_Status_PreCondition_NotBefore) isPolicyTrigger_Status_PreCondition_Type() {}

func (*PolicyTrigger_Status_PreCondition_NotAfter) isPolicyTrigger_Status_PreCondition_Type() {}

func (*PolicyTrigger_Status_PreCondition_SessionRef) isPolicyTrigger_Status_PreCondition_Type() {}

func (*PolicyTrigger_Status_PreCondition_UserRef) isPolicyTrigger_Status_PreCondition_Type() {}

func (*PolicyTrigger_Status_PreCondition_MatchAny) isPolicyTrigger_Status_PreCondition_Type() {}

func (*PolicyTrigger_Status_PreCondition_Condition) isPolicyTrigger_Status_PreCondition_Type() {}

func (*PolicyTrigger_Status_PreCondition_Any_) isPolicyTrigger_Status_PreCondition_Type() {}

func (*PolicyTrigger_Status_PreCondition_All_) isPolicyTrigger_Status_PreCondition_Type() {}

type PolicyTrigger_Status_PreCondition_Any struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Of            []*PolicyTrigger_Status_PreCondition `protobuf:"bytes,1,rep,name=of,proto3" json:"of,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTrigger_Status_PreCondition_Any) Reset() {
	*x = PolicyTrigger_Status_PreCondition_Any{}
	mi := &file_corev1_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTrigger_Status_PreCondition_Any) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTrigger_Status_PreCondition_Any) ProtoMessage() {}

func (x *PolicyTrigger_Status_PreCondition_Any) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTrigger_Status_PreCondition_Any.ProtoReflect.Descriptor instead.
func (*PolicyTrigger_Status_PreCondition_Any) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{47, 1, 0, 0}
}

func (x *PolicyTrigger_Status_PreCondition_Any) GetOf() []*PolicyTrigger_Status_PreCondition {
	if x != nil {
		return x.Of
	}
	return nil
}

type PolicyTrigger_Status_PreCondition_All struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Of            []*PolicyTrigger_Status_PreCondition `protobuf:"bytes,1,rep,name=of,proto3" json:"of,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PolicyTrigger_Status_PreCondition_All) Reset() {
	*x = PolicyTrigger_Status_PreCondition_All{}
	mi := &file_corev1_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyTrigger_Status_PreCondition_All) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyTrigger_Status_PreCondition_All) ProtoMessage() {}

func (x *PolicyTrigger_Status_PreCondition_All) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyTrigger_Status_PreCondition_All.ProtoReflect.Descriptor instead.
func (*PolicyTrigger_Status_PreCondition_All) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{47, 1, 0, 1}
}

func (x *PolicyTrigger_Status_PreCondition_All) GetOf() []*PolicyTrigger_Status_PreCondition {
	if x != nil {
		return x.Of
	}
	return nil
}

type ComponentLog_Entry struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Message       string                        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Level         ComponentLog_Entry_Level      `protobuf:"varint,2,opt,name=level,proto3,enum=octelium.api.main.core.v1.ComponentLog_Entry_Level" json:"level,omitempty"`
	Component     *ComponentLog_Entry_Component `protobuf:"bytes,3,opt,name=component,proto3" json:"component,omitempty"`
	Fields        *structpb.Struct              `protobuf:"bytes,4,opt,name=fields,proto3" json:"fields,omitempty"`
	Function      string                        `protobuf:"bytes,5,opt,name=function,proto3" json:"function,omitempty"`
	File          string                        `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
	Line          int32                         `protobuf:"varint,7,opt,name=line,proto3" json:"line,omitempty"`
	Time          *timestamppb.Timestamp        `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentLog_Entry) Reset() {
	*x = ComponentLog_Entry{}
	mi := &file_corev1_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentLog_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentLog_Entry) ProtoMessage() {}

func (x *ComponentLog_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentLog_Entry.ProtoReflect.Descriptor instead.
func (*ComponentLog_Entry) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{49, 0}
}

func (x *ComponentLog_Entry) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ComponentLog_Entry) GetLevel() ComponentLog_Entry_Level {
	if x != nil {
		return x.Level
	}
	return ComponentLog_Entry_LEVEL_UNSET
}

func (x *ComponentLog_Entry) GetComponent() *ComponentLog_Entry_Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentLog_Entry) GetFields() *structpb.Struct {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ComponentLog_Entry) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

func (x *ComponentLog_Entry) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ComponentLog_Entry) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *ComponentLog_Entry) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type ComponentLog_Entry_Component struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Uid           string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Type          string                 `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ComponentLog_Entry_Component) Reset() {
	*x = ComponentLog_Entry_Component{}
	mi := &file_corev1_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentLog_Entry_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentLog_Entry_Component) ProtoMessage() {}

func (x *ComponentLog_Entry_Component) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentLog_Entry_Component.ProtoReflect.Descriptor instead.
func (*ComponentLog_Entry_Component) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{49, 0, 0}
}

func (x *ComponentLog_Entry_Component) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ComponentLog_Entry_Component) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ComponentLog_Entry_Component) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Authenticator_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   string                 `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator_Spec) Reset() {
	*x = Authenticator_Spec{}
	mi := &file_corev1_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Spec) ProtoMessage() {}

func (x *Authenticator_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Spec.ProtoReflect.Descriptor instead.
func (*Authenticator_Spec) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 0}
}

func (x *Authenticator_Spec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type Authenticator_Status struct {
	state                       protoimpl.MessageState                        `protogen:"open.v1"`
	UserRef                     *metav1.ObjectReference                       `protobuf:"bytes,1,opt,name=userRef,proto3" json:"userRef,omitempty"`
	DeviceRef                   *metav1.ObjectReference                       `protobuf:"bytes,2,opt,name=deviceRef,proto3" json:"deviceRef,omitempty"`
	Type                        Authenticator_Status_Type                     `protobuf:"varint,3,opt,name=type,proto3,enum=octelium.api.main.core.v1.Authenticator_Status_Type" json:"type,omitempty"`
	Info                        *Authenticator_Status_Info                    `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
	AuthenticationAttempt       *Authenticator_Status_AuthenticationAttempt   `protobuf:"bytes,5,opt,name=authenticationAttempt,proto3" json:"authenticationAttempt,omitempty"`
	LastAuthenticationAttempts  []*Authenticator_Status_AuthenticationAttempt `protobuf:"bytes,6,rep,name=lastAuthenticationAttempts,proto3" json:"lastAuthenticationAttempts,omitempty"`
	SuccessfulAuthentications   uint32                                        `protobuf:"varint,7,opt,name=successfulAuthentications,proto3" json:"successfulAuthentications,omitempty"`
	FailedAuthentications       uint32                                        `protobuf:"varint,8,opt,name=failedAuthentications,proto3" json:"failedAuthentications,omitempty"`
	TotalAuthenticationAttempts uint32                                        `protobuf:"varint,9,opt,name=totalAuthenticationAttempts,proto3" json:"totalAuthenticationAttempts,omitempty"`
	Ext                         map[string]*structpb.Struct                   `protobuf:"bytes,10,rep,name=ext,proto3" json:"ext,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsRegistered                bool                                          `protobuf:"varint,11,opt,name=isRegistered,proto3" json:"isRegistered,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Authenticator_Status) Reset() {
	*x = Authenticator_Status{}
	mi := &file_corev1_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status) ProtoMessage() {}

func (x *Authenticator_Status) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status.ProtoReflect.Descriptor instead.
func (*Authenticator_Status) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1}
}

func (x *Authenticator_Status) GetUserRef() *metav1.ObjectReference {
	if x != nil {
		return x.UserRef
	}
	return nil
}

func (x *Authenticator_Status) GetDeviceRef() *metav1.ObjectReference {
	if x != nil {
		return x.DeviceRef
	}
	return nil
}

func (x *Authenticator_Status) GetType() Authenticator_Status_Type {
	if x != nil {
		return x.Type
	}
	return Authenticator_Status_TYPE_UNKNOWN
}

func (x *Authenticator_Status) GetInfo() *Authenticator_Status_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Authenticator_Status) GetAuthenticationAttempt() *Authenticator_Status_AuthenticationAttempt {
	if x != nil {
		return x.AuthenticationAttempt
	}
	return nil
}

func (x *Authenticator_Status) GetLastAuthenticationAttempts() []*Authenticator_Status_AuthenticationAttempt {
	if x != nil {
		return x.LastAuthenticationAttempts
	}
	return nil
}

func (x *Authenticator_Status) GetSuccessfulAuthentications() uint32 {
	if x != nil {
		return x.SuccessfulAuthentications
	}
	return 0
}

func (x *Authenticator_Status) GetFailedAuthentications() uint32 {
	if x != nil {
		return x.FailedAuthentications
	}
	return 0
}

func (x *Authenticator_Status) GetTotalAuthenticationAttempts() uint32 {
	if x != nil {
		return x.TotalAuthenticationAttempts
	}
	return 0
}

func (x *Authenticator_Status) GetExt() map[string]*structpb.Struct {
	if x != nil {
		return x.Ext
	}
	return nil
}

func (x *Authenticator_Status) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

type Authenticator_Status_EncryptedData struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Ciphertext    []byte                  `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Nonce         []byte                  `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	KeySecretRef  *metav1.ObjectReference `protobuf:"bytes,3,opt,name=keySecretRef,proto3" json:"keySecretRef,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator_Status_EncryptedData) Reset() {
	*x = Authenticator_Status_EncryptedData{}
	mi := &file_corev1_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status_EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status_EncryptedData) ProtoMessage() {}

func (x *Authenticator_Status_EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status_EncryptedData.ProtoReflect.Descriptor instead.
func (*Authenticator_Status_EncryptedData) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 0}
}

func (x *Authenticator_Status_EncryptedData) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *Authenticator_Status_EncryptedData) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Authenticator_Status_EncryptedData) GetKeySecretRef() *metav1.ObjectReference {
	if x != nil {
		return x.KeySecretRef
	}
	return nil
}

type Authenticator_Status_Info struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*Authenticator_Status_Info_Fido
	//	*Authenticator_Status_Info_Totp
	//	*Authenticator_Status_Info_Tpm
	Type          isAuthenticator_Status_Info_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator_Status_Info) Reset() {
	*x = Authenticator_Status_Info{}
	mi := &file_corev1_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status_Info) ProtoMessage() {}

func (x *Authenticator_Status_Info) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status_Info.ProtoReflect.Descriptor instead.
func (*Authenticator_Status_Info) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 1}
}

func (x *Authenticator_Status_Info) GetType() isAuthenticator_Status_Info_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Authenticator_Status_Info) GetFido() *Authenticator_Status_Info_FIDO {
	if x != nil {
		if x, ok := x.Type.(*Authenticator_Status_Info_Fido); ok {
			return x.Fido
		}
	}
	return nil
}

func (x *Authenticator_Status_Info) GetTotp() *Authenticator_Status_Info_TOTP {
	if x != nil {
		if x, ok := x.Type.(*Authenticator_Status_Info_Totp); ok {
			return x.Totp
		}
	}
	return nil
}

func (x *Authenticator_Status_Info) GetTpm() *Authenticator_Status_Info_TPM {
	if x != nil {
		if x, ok := x.Type.(*Authenticator_Status_Info_Tpm); ok {
			return x.Tpm
		}
	}
	return nil
}

type isAuthenticator_Status_Info_Type interface {
	isAuthenticator_Status_Info_Type()
}

type Authenticator_Status_Info_Fido struct {
	Fido *Authenticator_Status_Info_FIDO `protobuf:"bytes,1,opt,name=fido,proto3,oneof"`
}

type Authenticator_Status_Info_Totp struct {
	Totp *Authenticator_Status_Info_TOTP `protobuf:"bytes,2,opt,name=totp,proto3,oneof"`
}

type Authenticator_Status_Info_Tpm struct {
	Tpm *Authenticator_Status_Info_TPM `protobuf:"bytes,3,opt,name=tpm,proto3,oneof"`
}

func (*Authenticator_Status_Info_Fido) isAuthenticator_Status_Info_Type() {}

func (*Authenticator_Status_Info_Totp) isAuthenticator_Status_Info_Type() {}

func (*Authenticator_Status_Info_Tpm) isAuthenticator_Status_Info_Type() {}

type Authenticator_Status_AuthenticationAttempt struct {
	state                     protoimpl.MessageState                         `protogen:"open.v1"`
	CreatedAt                 *timestamppb.Timestamp                         `protobuf:"bytes,1,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	EncryptedChallengeRequest *Authenticator_Status_EncryptedData            `protobuf:"bytes,2,opt,name=encryptedChallengeRequest,proto3" json:"encryptedChallengeRequest,omitempty"`
	EncryptedDataMap          map[string]*Authenticator_Status_EncryptedData `protobuf:"bytes,3,rep,name=encryptedDataMap,proto3" json:"encryptedDataMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DataMap                   map[string][]byte                              `protobuf:"bytes,4,rep,name=dataMap,proto3" json:"dataMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SessionRef                *metav1.ObjectReference                        `protobuf:"bytes,5,opt,name=sessionRef,proto3" json:"sessionRef,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Authenticator_Status_AuthenticationAttempt) Reset() {
	*x = Authenticator_Status_AuthenticationAttempt{}
	mi := &file_corev1_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status_AuthenticationAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status_AuthenticationAttempt) ProtoMessage() {}

func (x *Authenticator_Status_AuthenticationAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status_AuthenticationAttempt.ProtoReflect.Descriptor instead.
func (*Authenticator_Status_AuthenticationAttempt) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 2}
}

func (x *Authenticator_Status_AuthenticationAttempt) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Authenticator_Status_AuthenticationAttempt) GetEncryptedChallengeRequest() *Authenticator_Status_EncryptedData {
	if x != nil {
		return x.EncryptedChallengeRequest
	}
	return nil
}

func (x *Authenticator_Status_AuthenticationAttempt) GetEncryptedDataMap() map[string]*Authenticator_Status_EncryptedData {
	if x != nil {
		return x.EncryptedDataMap
	}
	return nil
}

func (x *Authenticator_Status_AuthenticationAttempt) GetDataMap() map[string][]byte {
	if x != nil {
		return x.DataMap
	}
	return nil
}

func (x *Authenticator_Status_AuthenticationAttempt) GetSessionRef() *metav1.ObjectReference {
	if x != nil {
		return x.SessionRef
	}
	return nil
}

type Authenticator_Status_Info_FIDO struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Id            []byte                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PublicKey     []byte                              `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Type          Authenticator_Status_Info_FIDO_Type `protobuf:"varint,3,opt,name=type,proto3,enum=octelium.api.main.core.v1.Authenticator_Status_Info_FIDO_Type" json:"type,omitempty"`
	Aaguid        string                              `protobuf:"bytes,4,opt,name=aaguid,proto3" json:"aaguid,omitempty"`
	IsPasskey     bool                                `protobuf:"varint,5,opt,name=isPasskey,proto3" json:"isPasskey,omitempty"`
	IdHash        []byte                              `protobuf:"bytes,6,opt,name=idHash,proto3" json:"idHash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator_Status_Info_FIDO) Reset() {
	*x = Authenticator_Status_Info_FIDO{}
	mi := &file_corev1_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status_Info_FIDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status_Info_FIDO) ProtoMessage() {}

func (x *Authenticator_Status_Info_FIDO) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status_Info_FIDO.ProtoReflect.Descriptor instead.
func (*Authenticator_Status_Info_FIDO) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 1, 0}
}

func (x *Authenticator_Status_Info_FIDO) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Authenticator_Status_Info_FIDO) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *Authenticator_Status_Info_FIDO) GetType() Authenticator_Status_Info_FIDO_Type {
	if x != nil {
		return x.Type
	}
	return Authenticator_Status_Info_FIDO_TYPE_UNKNOWN
}

func (x *Authenticator_Status_Info_FIDO) GetAaguid() string {
	if x != nil {
		return x.Aaguid
	}
	return ""
}

func (x *Authenticator_Status_Info_FIDO) GetIsPasskey() bool {
	if x != nil {
		return x.IsPasskey
	}
	return false
}

func (x *Authenticator_Status_Info_FIDO) GetIdHash() []byte {
	if x != nil {
		return x.IdHash
	}
	return nil
}

type Authenticator_Status_Info_TOTP struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	SharedSecret  *Authenticator_Status_EncryptedData `protobuf:"bytes,1,opt,name=sharedSecret,proto3" json:"sharedSecret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator_Status_Info_TOTP) Reset() {
	*x = Authenticator_Status_Info_TOTP{}
	mi := &file_corev1_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status_Info_TOTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status_Info_TOTP) ProtoMessage() {}

func (x *Authenticator_Status_Info_TOTP) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status_Info_TOTP.ProtoReflect.Descriptor instead.
func (*Authenticator_Status_Info_TOTP) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 1, 1}
}

func (x *Authenticator_Status_Info_TOTP) GetSharedSecret() *Authenticator_Status_EncryptedData {
	if x != nil {
		return x.SharedSecret
	}
	return nil
}

type Authenticator_Status_Info_TPM struct {
	state                 protoimpl.MessageState                               `protogen:"open.v1"`
	AkBytes               []byte                                               `protobuf:"bytes,1,opt,name=akBytes,proto3" json:"akBytes,omitempty"`
	AttestationParameters *Authenticator_Status_Info_TPM_AttestationParameters `protobuf:"bytes,2,opt,name=attestationParameters,proto3" json:"attestationParameters,omitempty"`
	EkPublicKey           []byte                                               `protobuf:"bytes,3,opt,name=ekPublicKey,proto3" json:"ekPublicKey,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Authenticator_Status_Info_TPM) Reset() {
	*x = Authenticator_Status_Info_TPM{}
	mi := &file_corev1_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status_Info_TPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status_Info_TPM) ProtoMessage() {}

func (x *Authenticator_Status_Info_TPM) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status_Info_TPM.ProtoReflect.Descriptor instead.
func (*Authenticator_Status_Info_TPM) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 1, 2}
}

func (x *Authenticator_Status_Info_TPM) GetAkBytes() []byte {
	if x != nil {
		return x.AkBytes
	}
	return nil
}

func (x *Authenticator_Status_Info_TPM) GetAttestationParameters() *Authenticator_Status_Info_TPM_AttestationParameters {
	if x != nil {
		return x.AttestationParameters
	}
	return nil
}

func (x *Authenticator_Status_Info_TPM) GetEkPublicKey() []byte {
	if x != nil {
		return x.EkPublicKey
	}
	return nil
}

type Authenticator_Status_Info_TPM_AttestationParameters struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Public            []byte                 `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	CreateData        []byte                 `protobuf:"bytes,2,opt,name=createData,proto3" json:"createData,omitempty"`
	CreateAttestation []byte                 `protobuf:"bytes,3,opt,name=createAttestation,proto3" json:"createAttestation,omitempty"`
	CreateSignature   []byte                 `protobuf:"bytes,4,opt,name=createSignature,proto3" json:"createSignature,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Authenticator_Status_Info_TPM_AttestationParameters) Reset() {
	*x = Authenticator_Status_Info_TPM_AttestationParameters{}
	mi := &file_corev1_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status_Info_TPM_AttestationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status_Info_TPM_AttestationParameters) ProtoMessage() {}

func (x *Authenticator_Status_Info_TPM_AttestationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_corev1_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status_Info_TPM_AttestationParameters.ProtoReflect.Descriptor instead.
func (*Authenticator_Status_Info_TPM_AttestationParameters) Descriptor() ([]byte, []int) {
	return file_corev1_proto_rawDescGZIP(), []int{50, 1, 1, 2, 0}
}

func (x *Authenticator_Status_Info_TPM_AttestationParameters) GetPublic() []byte {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *Authenticator_Status_Info_TPM_AttestationParameters) GetCreateData() []byte {
	if x != nil {
		return x.CreateData
	}
	return nil
}

func (x *Authenticator_Status_Info_TPM_AttestationParameters) GetCreateAttestation() []byte {
	if x != nil {
		return x.CreateAttestation
	}
	return nil
}

func (x *Authenticator_Status_Info_TPM_AttestationParameters) GetCreateSignature() []byte {
	if x != nil {
		return x.CreateSignature
	}
	return nil
}

var File_corev1_proto protoreflect.FileDescriptor

var file_corev1_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa3, 0x04, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x92, 0x02, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x5d, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x7c,
	0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x08, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x22, 0x5e, 0x0a, 0x0c, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x22, 0xa1, 0x10, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x38, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x90, 0x0c, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x3d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x2d, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12,
	0x5b, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7c, 0x0a, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0xc6, 0x01, 0x0a, 0x0e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x56, 0x0a, 0x08, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x1a, 0xce, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x12,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x1a, 0xc2, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x1a, 0x96, 0x02, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x5c, 0x0a, 0x13, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x1a, 0x4f, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x01, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xbc, 0x93, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xb3, 0x84, 0x01, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5b, 0x0a,
	0x0d, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x54, 0x4c, 0x53, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x4c, 0x53,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x52,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x7c, 0x0a, 0x0d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x9e, 0x7b, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x00, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x12, 0x46, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73, 0x68, 0x12, 0x55, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79, 0x73, 0x71,
	0x6c, 0x12, 0x5b, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x1a, 0xc0,
	0x40, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x4c, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x52, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x43, 0x4f, 0x52, 0x53, 0x52,
	0x04, 0x63, 0x6f, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x48, 0x54, 0x54, 0x50, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x54, 0x54, 0x50, 0x32, 0x12,
	0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x48, 0x54, 0x54, 0x50, 0x32, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x48, 0x54, 0x54, 0x50,
	0x32, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4c, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x54, 0x0a, 0x07, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x07,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x1a, 0xf0, 0x01, 0x0a, 0x04, 0x43, 0x4f, 0x52,
	0x53, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x41, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x1a, 0xea, 0x0b, 0x0a, 0x04,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x59, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48, 0x00,
	0x52, 0x05, 0x62, 0x61, 0x73, 0x69, 0x63, 0x12, 0x59, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x12, 0x8c, 0x01, 0x0a, 0x17, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x76, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x76, 0x34,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x69, 0x67, 0x76, 0x34, 0x1a, 0x32, 0x0a, 0x06, 0x42, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xbe, 0x01,
	0x0a, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb0,
	0x01, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x5b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x31,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66,
	0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xa7, 0x02, 0x0a, 0x17, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68,
	0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x1a, 0x38, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x92, 0x02, 0x0a, 0x05,
	0x53, 0x69, 0x67, 0x76, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x78, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x53, 0x69, 0x67, 0x76, 0x34,
	0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x3b, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x48, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x1a, 0xc1, 0x03, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x51, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xb6, 0x01, 0x0a, 0x0a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x0a, 0x6a, 0x73,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x48, 0x00,
	0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x2e, 0x0a, 0x0a,
	0x4a, 0x53, 0x4f, 0x4e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x20, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x1a, 0xdc, 0x04, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x71, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x61, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x73, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x61, 0x64, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x1a, 0x4a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x22,
	0x44, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x42, 0x46, 0x55, 0x53, 0x43, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x41, 0x52,
	0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x84, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x1a, 0x90, 0x01, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xfe, 0x02, 0x0a,
	0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x45, 0x6c,
	0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x74, 0x72, 0x79, 0x4f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xc4, 0x19,
	0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x05,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x48, 0x00, 0x52,
	0x07, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x52, 0x0a, 0x03, 0x6c, 0x75, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x4c, 0x75, 0x61, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x75, 0x61, 0x12, 0x5b, 0x0a, 0x06,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x64, 0x0a, 0x09, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54,
	0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x58, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x1a, 0xed, 0x08, 0x0a, 0x07, 0x45, 0x78,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x6c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x45, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x79, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x35, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0xd0,
	0x05, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x8e, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x60, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54,
	0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x90, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x60, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x5e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x5e, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x40, 0x0a,
	0x0e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x02, 0x22,
	0x40, 0x0a, 0x0c, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x27, 0x0a, 0x03, 0x4c, 0x75, 0x61,
	0x12, 0x18, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0xf8, 0x02, 0x0a, 0x06, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5a, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x68, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x1a, 0x4c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x06, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x93, 0x05,
	0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x5a, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x6b, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x4c, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18,
	0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0x61, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x65,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x76, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xaf, 0x02, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x56, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x58, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x58, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x1a, 0x23, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x76, 0x61, 0x6c, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x50, 0x52, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0xaa, 0x04, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x34, 0x0a, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x1a, 0xee, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x4b, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x53, 0x48, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x6c, 0x0a, 0x0f, 0x75, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x53, 0x53, 0x48, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x65, 0x53, 0x53, 0x48, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5d, 0x0a, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x53, 0x48, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a, 0xc2, 0x02, 0x0a, 0x04,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x5e, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x36, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x65, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x6f, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x49,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x15, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x49, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x0a, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x64, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x1a, 0xd6, 0x05, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x12, 0x59, 0x0a, 0x07, 0x73, 0x73, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x53, 0x4c, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x73, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa9, 0x01, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x63, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x02, 0x22, 0x37, 0x0a, 0x07, 0x53, 0x53, 0x4c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x53, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x10, 0x02, 0x1a, 0xc5, 0x02, 0x0a, 0x05,
	0x4d, 0x79, 0x53, 0x51, 0x4c, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x54, 0x4c, 0x53, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54, 0x4c, 0x53, 0x1a, 0xa6, 0x01, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x5d, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x41, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x73, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0xb8, 0x02, 0x0a, 0x03, 0x54, 0x4c, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x70,
	0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x54, 0x6f,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x72, 0x0a, 0x11, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x4c, 0x53, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x3d,
	0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x84, 0x04,
	0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x70, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x1a, 0x57, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x41, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x41, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x50, 0x0a, 0x0a, 0x4b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0xc9, 0x1d, 0x0a, 0x08, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x67, 0x0a, 0x0b, 0x6c, 0x6f, 0x61,
	0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x61, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0xab, 0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x1a, 0x30, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x1a, 0x92, 0x1a, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x57, 0x0a, 0x03, 0x65, 0x6e, 0x76,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x6f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x75, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x7b, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x51, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x62, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x07,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x0d, 0x6c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0d, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x6f, 0x0a, 0x0e, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x03, 0x45,
	0x6e, 0x76, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x8d, 0x01, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x59,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x76, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x13, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x1a, 0x3b, 0x0a, 0x13, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa9, 0x03, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x5e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x48, 0x00, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x1a, 0x82, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x67, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xd9, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x65, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x53, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x6e, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x6a, 0x0a, 0x03, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x25, 0x0a, 0x03, 0x43, 0x50, 0x55, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x26, 0x0a,
	0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x67, 0x61, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x67, 0x61,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a,
	0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x6f, 0x6f, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x41,
	0x73, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x75, 0x6e,
	0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x1a, 0xea, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x15, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x1a, 0x2b,
	0x0a, 0x15, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x75, 0x0a, 0x0b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x1a, 0x9b, 0x05, 0x0a, 0x05, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x12, 0x6b, 0x0a, 0x07, 0x68, 0x74, 0x74, 0x70, 0x47, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x47, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x68, 0x74, 0x74, 0x70, 0x47, 0x65,
	0x74, 0x12, 0x71, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x54, 0x43,
	0x50, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x74, 0x63, 0x70, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x62, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x2e, 0x47, 0x52, 0x50, 0x43,
	0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x1a, 0x31, 0x0a, 0x07, 0x48, 0x54, 0x54, 0x50, 0x47, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x1a, 0x1f, 0x0a, 0x09, 0x54, 0x43, 0x50, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x1a, 0x1a, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x28, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x1a, 0x97, 0x02, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x48, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x50,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x1a, 0x6a, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x55,
	0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f,
	0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x59, 0x53, 0x51,
	0x4c, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x10, 0x08, 0x12, 0x07, 0x0a,
	0x03, 0x57, 0x45, 0x42, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10, 0x0a, 0x1a,
	0x84, 0x0d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x60, 0x0a, 0x0e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a,
	0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x0b, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x49, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x50,
	0x52, 0x0b, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x50, 0x12, 0x42, 0x0a,
	0x06, 0x70, 0x6f, 0x64, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x52, 0x65,
	0x66, 0x1a, 0xa2, 0x08, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x75, 0x62, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x48, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x09, 0x6b, 0x38, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x38, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6b, 0x38, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x75, 0x6c,
	0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x6c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x92, 0x01,
	0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x5f, 0x0a,
	0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1a,
	0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x1a, 0xa3, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x5c, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x43, 0x50, 0x55, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x65, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x1a, 0x25, 0x0a, 0x03, 0x43, 0x50, 0x55,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x1a, 0x26, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65,
	0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d,
	0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4b, 0x38, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x72, 0x0a,
	0x1e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x66, 0x22, 0xa6, 0x04, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x72, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x6c, 0x0a, 0x11, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x2e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x1a, 0x47, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x53, 0x0a, 0x11,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x1a, 0x2f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x83, 0x33, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xa3, 0x03, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x43,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x7c, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x41,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x1a, 0xdc, 0x2d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x42, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x60,
	0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x15,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x54,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x44, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0xad, 0x10, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x5b, 0x0a, 0x09, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x09, 0x75,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x33, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x06, 0x6c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x78, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x78, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x10, 0x65, 0x64, 0x32, 0x35, 0x35, 0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x64, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x53, 0x53, 0x48, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x65, 0x53, 0x53, 0x48, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x53, 0x53, 0x48, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x53, 0x53, 0x48, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x80, 0x03, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x1a, 0xae, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x4e, 0x0a, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x1a, 0xdf, 0x04, 0x0a,
	0x08, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5c, 0x0a,
	0x06, 0x6c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4c, 0x34, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x4e, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x5f, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55,
	0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52,
	0x07, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x1a, 0x31, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x2a, 0x0a, 0x06, 0x4c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x34, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x22,
	0x2d, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x53, 0x53, 0x48, 0x10, 0x02, 0x1a, 0x8c,
	0x01, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x22, 0x0a,
	0x06, 0x4c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x36, 0x10,
	0x02, 0x22, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57,
	0x49, 0x52, 0x45, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55,
	0x49, 0x43, 0x56, 0x30, 0x10, 0x02, 0x1a, 0xbd, 0x12, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x65, 0x74, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x65, 0x74, 0x41, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x57, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xdb, 0x0f, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x56, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x08, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12,
	0x7c, 0x0a, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x6a, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x73, 0x0a, 0x0d, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53,
	0x0a, 0x03, 0x61, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x41, 0x4c, 0x52, 0x03,
	0x61, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0xfa, 0x02,
	0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x5c, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x12, 0x67, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63,
	0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x63, 0x55, 0x52,
	0x4c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x51, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x4f, 0x49, 0x44, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x4d, 0x4c, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x1a, 0x91, 0x02, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x61, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x10, 0x02, 0x1a, 0x81,
	0x01, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x6e, 0x0a, 0x0a, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x06, 0x22, 0x32, 0x0a, 0x03, 0x41, 0x41, 0x4c, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x41, 0x41, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x41, 0x4c, 0x32, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x41, 0x4c, 0x33, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x80, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x4f, 0x0a, 0x08, 0x45, 0x78, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57,
	0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xb6, 0x05, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x91, 0x01, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x48, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x9e, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x43, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x03, 0x65, 0x78, 0x74, 0x1a, 0x4f, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xc2, 0x09, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x81, 0x05, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x7c, 0x0a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x5f, 0x54, 0x4f,
	0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x32, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x10, 0x03, 0x1a, 0xb4, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x42,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x3b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57,
	0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xa9, 0x05, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x8e, 0x02, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x59, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05,
	0x61, 0x74, 0x74, 0x72, 0x73, 0x1a, 0x7c, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x1a, 0x9d, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42,
	0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65,
	0x78, 0x74, 0x1a, 0x4f, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd0, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xfb, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x1a, 0xe7, 0x02, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7c, 0x0a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0e, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x93,
	0x04, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x44,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4f,
	0x53, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x4f, 0x0a,
	0x08, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54,
	0x0a, 0x06, 0x4f, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x53, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4f, 0x53, 0x10, 0x05, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x57, 0x0a, 0x0f, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x22, 0xf4, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a,
	0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x59, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0xa3, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0x58, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x22, 0xa0, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x06, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x1a, 0xd4, 0x02, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x61, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61, 0x74,
	0x74, 0x72, 0x73, 0x1a, 0x8c, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12,
	0x49, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a, 0x36, 0x0a, 0x08, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22,
	0xef, 0x04, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x38, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x41,
	0x50, 0x49, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x69, 0x1a, 0xe5, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x05, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x1a, 0x3e, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xf5, 0x01, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x3c, 0x0a, 0x03, 0x61, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x41, 0x6c, 0x6c,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x45, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x41, 0x50, 0x49, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x05,
	0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x1a, 0x5a, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xbc, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0xde, 0x05, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x10, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x10, 0x65,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xf9,
	0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x31, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x1a, 0xe3, 0x01, 0x0a, 0x0f, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x45, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x35, 0x0a, 0x06, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x02,
	0x1a, 0x5e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66,
	0x22, 0xd2, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x22, 0x8a, 0x43, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x1a, 0xc2, 0x41, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f,
	0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x1a, 0xf2, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x03, 0x74,
	0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x43, 0x50, 0x48, 0x00, 0x52,
	0x03, 0x74, 0x63, 0x70, 0x12, 0x4a, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x12, 0x47, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x53, 0x48, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x03, 0x75, 0x64, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x44, 0x50, 0x48, 0x00, 0x52, 0x03, 0x75,
	0x64, 0x70, 0x12, 0x56, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x04,
	0x67, 0x72, 0x70, 0x63, 0x12, 0x4d, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x79,
	0x73, 0x71, 0x6c, 0x12, 0x47, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x44, 0x4e, 0x53, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x1a, 0x9c, 0x09, 0x0a,
	0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x56, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x68, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xdb, 0x03, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x48,
	0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x31,
	0x0a, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x63, 0x0a, 0x07, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc7, 0x02, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x62, 0x6f, 0x64, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a,
	0x07, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x70,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x64, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x48, 0x54, 0x54, 0x50, 0x31, 0x30, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x54, 0x54,
	0x50, 0x31, 0x31, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x32, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x33, 0x10, 0x04, 0x1a, 0xc5, 0x01, 0x0a, 0x03,
	0x54, 0x43, 0x50, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x54, 0x43, 0x50, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e,
	0x44, 0x10, 0x02, 0x1a, 0xa0, 0x0a, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x12, 0x4c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x72, 0x0a, 0x10,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x43, 0x50, 0x49, 0x50, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x54, 0x43, 0x50, 0x49, 0x50, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x43, 0x50, 0x49, 0x50, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x72, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67,
	0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x53, 0x48, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x78, 0x0a, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x12, 0x87,
	0x01, 0x0a, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x53, 0x48, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52,
	0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x1a, 0x41, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0xb6, 0x01, 0x0a, 0x10,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x5d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x49,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x53, 0x53, 0x48, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x54, 0x44, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f,
	0x55, 0x54, 0x10, 0x02, 0x1a, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x2d, 0x0a, 0x17, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x10, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x43, 0x50,
	0x49, 0x50, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0xe9, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x43, 0x50, 0x49, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x5f, 0x54, 0x43, 0x50, 0x49, 0x50, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0a, 0x42, 0x09, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x12, 0x4c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x55, 0x44,
	0x50, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0xda, 0x05, 0x0a, 0x08, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x1a, 0x8b, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x1a, 0x1d, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x31, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x49, 0x4e, 0x44, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x08, 0x42, 0x09, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xfe, 0x07, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51,
	0x4c, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x53, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x56, 0x0a, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x42,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x44, 0x42, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x42, 0x12, 0x5c,
	0x0a, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42,
	0x48, 0x00, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42, 0x12, 0x56, 0x0a, 0x06,
	0x64, 0x72, 0x6f, 0x70, 0x44, 0x42, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c,
	0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x79,
	0x53, 0x51, 0x4c, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x44, 0x42, 0x48, 0x00, 0x52, 0x06, 0x64, 0x72,
	0x6f, 0x70, 0x44, 0x42, 0x12, 0x74, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4d, 0x79, 0x53, 0x51, 0x4c, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x24, 0x0a, 0x06, 0x49, 0x6e, 0x69,
	0x74, 0x44, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a,
	0x26, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x24, 0x0a, 0x06, 0x44, 0x72, 0x6f, 0x70, 0x44,
	0x42, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x28, 0x0a,
	0x10, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x83, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x42, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x42, 0x10, 0x05, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x42, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x51, 0x55,
	0x49, 0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x0c, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0e, 0x42, 0x09, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xb4, 0x02, 0x0a, 0x0a, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x04, 0x68, 0x74, 0x74,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0xf8, 0x01, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x48, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x04, 0x68, 0x74,
	0x74, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x82, 0x02, 0x0a, 0x03, 0x44,
	0x4e, 0x53, 0x12, 0x4c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x44, 0x4e, 0x53, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x53, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x41, 0x41,
	0x41, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x58, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x43, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x58, 0x10, 0x05, 0x12,
	0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x06, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb3, 0x10, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x66, 0x12, 0x44, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x4e, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d,
	0x6f, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x1a, 0xbf, 0x08, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x1a, 0x89, 0x05, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x70, 0x0a, 0x0b,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x83,
	0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x6d,
	0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x7f, 0x0a,
	0x0c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x1a, 0x70, 0x0a, 0x0c, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x52, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x66, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf9, 0x01, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x07,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x45, 0x44, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x0a, 0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x02, 0x22, 0x63, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x22, 0xc3, 0x14, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xe0,
	0x10, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x61, 0x61, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x41,
	0x4c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x17, 0x70, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x06, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x47, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x48, 0x00, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x4b,
	0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f,
	0x49, 0x44, 0x43, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x12, 0x4b, 0x0a, 0x04, 0x73,
	0x61, 0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x41, 0x4d, 0x4c,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x61, 0x6d, 0x6c, 0x12, 0x72, 0x0a, 0x11, 0x6f, 0x69, 0x64, 0x63,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x69, 0x64, 0x63, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xc8, 0x01, 0x0a,
	0x06, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x68, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x47, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x38, 0x0a,
	0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x86, 0x03, 0x0a, 0x04, 0x4f, 0x49, 0x44, 0x43,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x66, 0x0a, 0x0c,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x49, 0x44, 0x43, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55,
	0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0xc6, 0x01, 0x0a, 0x04, 0x53, 0x41, 0x4d, 0x4c, 0x12, 0x22, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x11, 0x4f, 0x49,
	0x44, 0x43, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1e, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12,
	0x1a, 0x0a, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x52, 0x4c, 0x12, 0x22, 0x0a, 0x0b, 0x6a,
	0x77, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x6a, 0x77, 0x6b, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xd1, 0x01, 0x0a, 0x07,
	0x41, 0x41, 0x4c, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x03, 0x61,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x41, 0x4c, 0x52, 0x75,
	0x6c, 0x65, 0x2e, 0x41, 0x41, 0x4c, 0x52, 0x03, 0x61, 0x61, 0x6c, 0x22, 0x32, 0x0a, 0x03, 0x41,
	0x41, 0x4c, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x41, 0x4c, 0x31, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x41, 0x4c, 0x32, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x41, 0x4c, 0x33, 0x10, 0x03, 0x1a,
	0xf7, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x66,
	0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x22, 0x31, 0x0a, 0x06, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x51, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f,
	0x49, 0x44, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x41, 0x4d, 0x4c, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x49, 0x44, 0x43, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x22, 0xa8, 0x04, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a,
	0x06, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x1a, 0xa2, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x03,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x4f, 0x0a, 0x08, 0x45,
	0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd2, 0x01, 0x0a,
	0x0a, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x22, 0xe6, 0x06, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x06, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x1a, 0xdd, 0x04, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12,
	0x44, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x52, 0x09,
	0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x71, 0x75, 0x69,
	0x63, 0x76, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x52, 0x06, 0x71, 0x75, 0x69,
	0x63, 0x76, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x50,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x7d, 0x0a,
	0x09, 0x57, 0x69, 0x72, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0c,
	0x6b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x6b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x1a, 0x1c, 0x0a, 0x06,
	0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x38,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x22, 0x59, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x22, 0xb9, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x12,
	0x16, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x3c, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x03,
	0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x3c, 0x0a, 0x03, 0x6f, 0x70, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x50, 0x41, 0x48,
	0x00, 0x52, 0x03, 0x6f, 0x70, 0x61, 0x1a, 0x3b, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x34, 0x0a,
	0x02, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x02, 0x6f, 0x66, 0x1a, 0x3b, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x66,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x66,
	0x1a, 0x3c, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x02, 0x6f, 0x66, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x66, 0x1a, 0x27,
	0x0a, 0x03, 0x4f, 0x50, 0x41, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe5, 0x22, 0x0a, 0x0d, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x80, 0x14,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x61, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x07, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x43, 0x0a, 0x03, 0x64, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x1a,
	0x3f, 0x0a, 0x07, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x73,
	0x65, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x1a, 0xd9, 0x08, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x05,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12,
	0x5a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x1a, 0xcc, 0x03, 0x0a, 0x05,
	0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x73, 0x73,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x73, 0x73, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57,
	0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xcf, 0x03, 0x0a, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x65,
	0x73, 0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x6c, 0x65, 0x73,
	0x73, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xae, 0x03, 0x0a,
	0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x79, 0x0a, 0x05, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x50, 0x0a,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x7c, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x50, 0x0a, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x72, 0x0a,
	0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x67, 0x0a, 0x1c, 0x77, 0x69, 0x72, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x1c, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4b, 0x65,
	0x79, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xce, 0x01, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x5a, 0x0a, 0x0c, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x44,
	0x4e, 0x53, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5a, 0x6f, 0x6e, 0x65, 0x1a, 0x6b, 0x0a, 0x04, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x7c, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x1a, 0xcf, 0x0c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x63, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x63, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x1a, 0x87, 0x06, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x56, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x02, 0x76, 0x34,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x34, 0x52, 0x02, 0x76, 0x34, 0x12, 0x50, 0x0a, 0x02,
	0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x36, 0x52, 0x02, 0x76, 0x36, 0x12, 0x65,
	0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x06, 0x71, 0x75, 0x69, 0x63, 0x76, 0x30, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x52, 0x06, 0x71, 0x75, 0x69,
	0x63, 0x76, 0x30, 0x1a, 0x2c, 0x0a, 0x02, 0x56, 0x34, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x1a, 0x2c, 0x0a, 0x02, 0x56, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a,
	0x3f, 0x0a, 0x09, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75,
	0x1a, 0x54, 0x0a, 0x06, 0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x42, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x56, 0x36, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x56, 0x34, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x1a, 0xfd, 0x02, 0x0a, 0x07, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x4f, 0x0a, 0x0c, 0x77,
	0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0c,
	0x77, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x76, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x12, 0x51, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x71, 0x75, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x6e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0e, 0x71, 0x75, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x6e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x1a, 0x85, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x54, 0x4c, 0x53, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x1a, 0x05, 0x0a, 0x03, 0x54,
	0x4c, 0x53, 0x22, 0xee, 0x14, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x39, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0xa4, 0x11, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x49, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73,
	0x68, 0x12, 0x5e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x12, 0x4c, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x48, 0x00, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12,
	0x58, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x03, 0x64, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x4e, 0x53, 0x48, 0x00, 0x52,
	0x03, 0x64, 0x6e, 0x73, 0x1a, 0xad, 0x04, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x5d, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x6f, 0x64, 0x79,
	0x4d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x07, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x69, 0x0a,
	0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x87, 0x01, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x12, 0x59, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x53, 0x48, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x1d, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb6,
	0x02, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x65, 0x72,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x65, 0x72, 0x62, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x70, 0x69, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xc8, 0x01, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43,
	0x12, 0x4a, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x1a, 0xb3, 0x03, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12,
	0x5e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12,
	0x58, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x1a, 0x39, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x1a, 0x1d,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x31, 0x0a,
	0x05, 0x50, 0x61, 0x72, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x31, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x06, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xb9, 0x0a, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x06, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x9e,
	0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x60, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x1a, 0xdc, 0x05, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x6e, 0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6e,
	0x6f, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x46, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a,
	0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x41, 0x6e, 0x79, 0x12, 0x44, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x79,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x54, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x1a, 0x53, 0x0a,
	0x03, 0x41, 0x6e, 0x79, 0x12, 0x4c, 0x0a, 0x02, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x6f, 0x66, 0x1a, 0x53, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x4c, 0x0a, 0x02, 0x6f, 0x66, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x66, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xe0, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x22, 0xe1, 0x05, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x43, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x1a, 0x93, 0x04, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x55, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x4f, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x22, 0xf9, 0x18, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x28, 0x0a, 0x04, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0xbc, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x48, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x48,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x7b, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12,
	0x85, 0x01, 0x0a, 0x1a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x52, 0x1a, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x1a, 0x95, 0x01,
	0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x1a, 0xec, 0x07, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f,
	0x0a, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x46, 0x49, 0x44, 0x4f, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x12,
	0x4f, 0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x4f, 0x54, 0x50, 0x48, 0x00, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70,
	0x12, 0x4c, 0x0a, 0x03, 0x74, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x50, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x74, 0x70, 0x6d, 0x1a, 0x8b,
	0x02, 0x0a, 0x04, 0x46, 0x49, 0x44, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x49, 0x44, 0x4f, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x61, 0x67,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x61, 0x67, 0x75, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x69, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22, 0x33, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x02, 0x1a, 0x69, 0x0a, 0x04,
	0x54, 0x4f, 0x54, 0x50, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0xf2, 0x02, 0x0a, 0x03, 0x54, 0x50, 0x4d, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x15, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x50, 0x4d, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x65, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x1a, 0xa7, 0x01, 0x0a, 0x15, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x1a, 0xd3, 0x05, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x7b, 0x0a, 0x19, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x5b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12,
	0x6c, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x52, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x12, 0x4a, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x1a, 0x82, 0x01, 0x0a, 0x15, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x08, 0x45, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x44, 0x4f, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x4f, 0x54, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x50, 0x4d,
	0x10, 0x03, 0x22, 0xe0, 0x01, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x32, 0xae, 0x2d, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2c, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x25, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1f, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x64, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x28,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x24,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x1a, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2f,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x22, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x26,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x22, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x22, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a,
	0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x20, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x20, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x20, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x25, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x25, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x30, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x29, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x2b,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2b, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x36, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2f, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x21, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x25, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x13, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x28, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x28, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x61,
	0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_corev1_proto_rawDescOnce sync.Once
	file_corev1_proto_rawDescData = file_corev1_proto_rawDesc
)

func file_corev1_proto_rawDescGZIP() []byte {
	file_corev1_proto_rawDescOnce.Do(func() {
		file_corev1_proto_rawDescData = protoimpl.X.CompressGZIP(file_corev1_proto_rawDescData)
	})
	return file_corev1_proto_rawDescData
}

var file_corev1_proto_enumTypes = make([]protoimpl.EnumInfo, 41)
var file_corev1_proto_msgTypes = make([]protoimpl.MessageInfo, 315)
var file_corev1_proto_goTypes = []any{
	(User_Spec_Type)(0),                                                        // 0: octelium.api.main.core.v1.User.Spec.Type
	(Service_Spec_Mode)(0),                                                     // 1: octelium.api.main.core.v1.Service.Spec.Mode
	(Service_Spec_Config_HTTP_Body_Mode)(0),                                    // 2: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.Mode
	(Service_Spec_Config_HTTP_Header_ForwardedMode)(0),                         // 3: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.ForwardedMode
	(Service_Spec_Config_HTTP_Plugin_Phase)(0),                                 // 4: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Phase
	(Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_HeaderSendMode)(0), // 5: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.HeaderSendMode
	(Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode_BodySendMode)(0),   // 6: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.BodySendMode
	(Service_Spec_Config_Postgres_SSLMode)(0),                                  // 7: octelium.api.main.core.v1.Service.Spec.Config.Postgres.SSLMode
	(Service_Spec_Config_Postgres_Authorization_Mode)(0),                       // 8: octelium.api.main.core.v1.Service.Spec.Config.Postgres.Authorization.Mode
	(Session_Spec_State)(0),                                                    // 9: octelium.api.main.core.v1.Session.Spec.State
	(Session_Status_Type)(0),                                                   // 10: octelium.api.main.core.v1.Session.Status.Type
	(Session_Status_Connection_L3Mode)(0),                                      // 11: octelium.api.main.core.v1.Session.Status.Connection.L3Mode
	(Session_Status_Connection_Type)(0),                                        // 12: octelium.api.main.core.v1.Session.Status.Connection.Type
	(Session_Status_Connection_Upstream_L4Type)(0),                             // 13: octelium.api.main.core.v1.Session.Status.Connection.Upstream.L4Type
	(Session_Status_Connection_Upstream_Mode)(0),                               // 14: octelium.api.main.core.v1.Session.Status.Connection.Upstream.Mode
	(Session_Status_Authentication_Info_Type)(0),                               // 15: octelium.api.main.core.v1.Session.Status.Authentication.Info.Type
	(Session_Status_Authentication_Info_AAL)(0),                                // 16: octelium.api.main.core.v1.Session.Status.Authentication.Info.AAL
	(Session_Status_Authentication_Info_IdentityProvider_Type)(0),              // 17: octelium.api.main.core.v1.Session.Status.Authentication.Info.IdentityProvider.Type
	(Session_Status_Authentication_Info_Credential_Type)(0),                    // 18: octelium.api.main.core.v1.Session.Status.Authentication.Info.Credential.Type
	(Credential_Spec_Type)(0),                                                  // 19: octelium.api.main.core.v1.Credential.Spec.Type
	(Device_Spec_State)(0),                                                     // 20: octelium.api.main.core.v1.Device.Spec.State
	(Device_Status_OSType)(0),                                                  // 21: octelium.api.main.core.v1.Device.Status.OSType
	(Policy_Spec_Rule_Effect)(0),                                               // 22: octelium.api.main.core.v1.Policy.Spec.Rule.Effect
	(Policy_Spec_EnforcementRule_Effect)(0),                                    // 23: octelium.api.main.core.v1.Policy.Spec.EnforcementRule.Effect
	(AccessLog_Entry_Info_HTTP_HTTPVersion)(0),                                 // 24: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.HTTPVersion
	(AccessLog_Entry_Info_TCP_Type)(0),                                         // 25: octelium.api.main.core.v1.AccessLog.Entry.Info.TCP.Type
	(AccessLog_Entry_Info_SSH_Type)(0),                                         // 26: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.Type
	(AccessLog_Entry_Info_SSH_SessionRecording_Type)(0),                        // 27: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRecording.Type
	(AccessLog_Entry_Info_UDP_Type)(0),                                         // 28: octelium.api.main.core.v1.AccessLog.Entry.Info.UDP.Type
	(AccessLog_Entry_Info_Postgres_Type)(0),                                    // 29: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Type
	(AccessLog_Entry_Info_MySQL_Type)(0),                                       // 30: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.Type
	(AccessLog_Entry_Info_DNS_Type)(0),                                         // 31: octelium.api.main.core.v1.AccessLog.Entry.Info.DNS.Type
	(AccessLog_Entry_Common_Status)(0),                                         // 32: octelium.api.main.core.v1.AccessLog.Entry.Common.Status
	(AccessLog_Entry_Common_Reason_Type)(0),                                    // 33: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Type
	(IdentityProvider_Spec_AALRule_AAL)(0),                                     // 34: octelium.api.main.core.v1.IdentityProvider.Spec.AALRule.AAL
	(IdentityProvider_Spec_PostAuthenticationRule_Effect)(0),                   // 35: octelium.api.main.core.v1.IdentityProvider.Spec.PostAuthenticationRule.Effect
	(IdentityProvider_Status_Type)(0),                                          // 36: octelium.api.main.core.v1.IdentityProvider.Status.Type
	(ClusterConfig_Status_NetworkConfig_Mode)(0),                               // 37: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.Mode
	(ComponentLog_Entry_Level)(0),                                              // 38: octelium.api.main.core.v1.ComponentLog.Entry.Level
	(Authenticator_Status_Type)(0),                                             // 39: octelium.api.main.core.v1.Authenticator.Status.Type
	(Authenticator_Status_Info_FIDO_Type)(0),                                   // 40: octelium.api.main.core.v1.Authenticator.Status.Info.FIDO.Type
	(*Namespace)(nil),                                                          // 41: octelium.api.main.core.v1.Namespace
	(*NamespaceList)(nil),                                                      // 42: octelium.api.main.core.v1.NamespaceList
	(*InlinePolicy)(nil),                                                       // 43: octelium.api.main.core.v1.InlinePolicy
	(*User)(nil),                                                               // 44: octelium.api.main.core.v1.User
	(*UserList)(nil),                                                           // 45: octelium.api.main.core.v1.UserList
	(*Service)(nil),                                                            // 46: octelium.api.main.core.v1.Service
	(*ServiceList)(nil),                                                        // 47: octelium.api.main.core.v1.ServiceList
	(*GenerateCredentialTokenRequest)(nil),                                     // 48: octelium.api.main.core.v1.GenerateCredentialTokenRequest
	(*CredentialToken)(nil),                                                    // 49: octelium.api.main.core.v1.CredentialToken
	(*Session)(nil),                                                            // 50: octelium.api.main.core.v1.Session
	(*SessionList)(nil),                                                        // 51: octelium.api.main.core.v1.SessionList
	(*Secret)(nil),                                                             // 52: octelium.api.main.core.v1.Secret
	(*SecretList)(nil),                                                         // 53: octelium.api.main.core.v1.SecretList
	(*Credential)(nil),                                                         // 54: octelium.api.main.core.v1.Credential
	(*CredentialList)(nil),                                                     // 55: octelium.api.main.core.v1.CredentialList
	(*Group)(nil),                                                              // 56: octelium.api.main.core.v1.Group
	(*GroupList)(nil),                                                          // 57: octelium.api.main.core.v1.GroupList
	(*Device)(nil),                                                             // 58: octelium.api.main.core.v1.Device
	(*DeviceList)(nil),                                                         // 59: octelium.api.main.core.v1.DeviceList
	(*ListUserOptions)(nil),                                                    // 60: octelium.api.main.core.v1.ListUserOptions
	(*ListNamespaceOptions)(nil),                                               // 61: octelium.api.main.core.v1.ListNamespaceOptions
	(*ListServiceOptions)(nil),                                                 // 62: octelium.api.main.core.v1.ListServiceOptions
	(*ListSessionOptions)(nil),                                                 // 63: octelium.api.main.core.v1.ListSessionOptions
	(*ListSecretOptions)(nil),                                                  // 64: octelium.api.main.core.v1.ListSecretOptions
	(*ListCredentialOptions)(nil),                                              // 65: octelium.api.main.core.v1.ListCredentialOptions
	(*ListGroupOptions)(nil),                                                   // 66: octelium.api.main.core.v1.ListGroupOptions
	(*ListDeviceOptions)(nil),                                                  // 67: octelium.api.main.core.v1.ListDeviceOptions
	(*Config)(nil),                                                             // 68: octelium.api.main.core.v1.Config
	(*ConfigList)(nil),                                                         // 69: octelium.api.main.core.v1.ConfigList
	(*Scope)(nil),                                                              // 70: octelium.api.main.core.v1.Scope
	(*Policy)(nil),                                                             // 71: octelium.api.main.core.v1.Policy
	(*PolicyList)(nil),                                                         // 72: octelium.api.main.core.v1.PolicyList
	(*ListPolicyOptions)(nil),                                                  // 73: octelium.api.main.core.v1.ListPolicyOptions
	(*AccessLog)(nil),                                                          // 74: octelium.api.main.core.v1.AccessLog
	(*ListIdentityProviderOptions)(nil),                                        // 75: octelium.api.main.core.v1.ListIdentityProviderOptions
	(*IdentityProvider)(nil),                                                   // 76: octelium.api.main.core.v1.IdentityProvider
	(*IdentityProviderList)(nil),                                               // 77: octelium.api.main.core.v1.IdentityProviderList
	(*Region)(nil),                                                             // 78: octelium.api.main.core.v1.Region
	(*RegionList)(nil),                                                         // 79: octelium.api.main.core.v1.RegionList
	(*Gateway)(nil),                                                            // 80: octelium.api.main.core.v1.Gateway
	(*GatewayList)(nil),                                                        // 81: octelium.api.main.core.v1.GatewayList
	(*ListGatewayOptions)(nil),                                                 // 82: octelium.api.main.core.v1.ListGatewayOptions
	(*ListRegionOptions)(nil),                                                  // 83: octelium.api.main.core.v1.ListRegionOptions
	(*Condition)(nil),                                                          // 84: octelium.api.main.core.v1.Condition
	(*GetClusterConfigRequest)(nil),                                            // 85: octelium.api.main.core.v1.GetClusterConfigRequest
	(*ClusterConfig)(nil),                                                      // 86: octelium.api.main.core.v1.ClusterConfig
	(*RequestContext)(nil),                                                     // 87: octelium.api.main.core.v1.RequestContext
	(*PolicyTrigger)(nil),                                                      // 88: octelium.api.main.core.v1.PolicyTrigger
	(*PolicyTriggerList)(nil),                                                  // 89: octelium.api.main.core.v1.PolicyTriggerList
	(*ComponentLog)(nil),                                                       // 90: octelium.api.main.core.v1.ComponentLog
	(*Authenticator)(nil),                                                      // 91: octelium.api.main.core.v1.Authenticator
	(*AuthenticatorList)(nil),                                                  // 92: octelium.api.main.core.v1.AuthenticatorList
	(*ListAuthenticatorOptions)(nil),                                           // 93: octelium.api.main.core.v1.ListAuthenticatorOptions
	(*Namespace_Spec)(nil),                                                     // 94: octelium.api.main.core.v1.Namespace.Spec
	(*Namespace_Status)(nil),                                                   // 95: octelium.api.main.core.v1.Namespace.Status
	(*Namespace_Spec_Authorization)(nil),                                       // 96: octelium.api.main.core.v1.Namespace.Spec.Authorization
	(*User_Spec)(nil),                                                          // 97: octelium.api.main.core.v1.User.Spec
	(*User_Status)(nil),                                                        // 98: octelium.api.main.core.v1.User.Status
	(*User_Spec_Authorization)(nil),                                            // 99: octelium.api.main.core.v1.User.Spec.Authorization
	(*User_Spec_Authentication)(nil),                                           // 100: octelium.api.main.core.v1.User.Spec.Authentication
	(*User_Spec_Session)(nil),                                                  // 101: octelium.api.main.core.v1.User.Spec.Session
	(*User_Spec_Info)(nil),                                                     // 102: octelium.api.main.core.v1.User.Spec.Info
	(*User_Spec_Authentication_Identity)(nil),                                  // 103: octelium.api.main.core.v1.User.Spec.Authentication.Identity
	nil,                                                                        // 104: octelium.api.main.core.v1.User.Status.ExtEntry
	(*Service_Spec)(nil),                                                       // 105: octelium.api.main.core.v1.Service.Spec
	(*Service_Status)(nil),                                                     // 106: octelium.api.main.core.v1.Service.Status
	(*Service_Spec_Authorization)(nil),                                         // 107: octelium.api.main.core.v1.Service.Spec.Authorization
	(*Service_Spec_Config)(nil),                                                // 108: octelium.api.main.core.v1.Service.Spec.Config
	(*Service_Spec_Deployment)(nil),                                            // 109: octelium.api.main.core.v1.Service.Spec.Deployment
	(*Service_Spec_DynamicConfig)(nil),                                         // 110: octelium.api.main.core.v1.Service.Spec.DynamicConfig
	(*Service_Spec_Config_HTTP)(nil),                                           // 111: octelium.api.main.core.v1.Service.Spec.Config.HTTP
	(*Service_Spec_Config_SSH)(nil),                                            // 112: octelium.api.main.core.v1.Service.Spec.Config.SSH
	(*Service_Spec_Config_Postgres)(nil),                                       // 113: octelium.api.main.core.v1.Service.Spec.Config.Postgres
	(*Service_Spec_Config_MySQL)(nil),                                          // 114: octelium.api.main.core.v1.Service.Spec.Config.MySQL
	(*Service_Spec_Config_ClientCertificate)(nil),                              // 115: octelium.api.main.core.v1.Service.Spec.Config.ClientCertificate
	(*Service_Spec_Config_TLS)(nil),                                            // 116: octelium.api.main.core.v1.Service.Spec.Config.TLS
	(*Service_Spec_Config_Kubernetes)(nil),                                     // 117: octelium.api.main.core.v1.Service.Spec.Config.Kubernetes
	(*Service_Spec_Config_Upstream)(nil),                                       // 118: octelium.api.main.core.v1.Service.Spec.Config.Upstream
	(*Service_Spec_Config_HTTP_CORS)(nil),                                      // 119: octelium.api.main.core.v1.Service.Spec.Config.HTTP.CORS
	(*Service_Spec_Config_HTTP_Auth)(nil),                                      // 120: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth
	(*Service_Spec_Config_HTTP_Path)(nil),                                      // 121: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Path
	(*Service_Spec_Config_HTTP_Body)(nil),                                      // 122: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body
	(*Service_Spec_Config_HTTP_Header)(nil),                                    // 123: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header
	(*Service_Spec_Config_HTTP_Response)(nil),                                  // 124: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Response
	(*Service_Spec_Config_HTTP_Retry)(nil),                                     // 125: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Retry
	(*Service_Spec_Config_HTTP_Plugin)(nil),                                    // 126: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin
	(*Service_Spec_Config_HTTP_Visibility)(nil),                                // 127: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Visibility
	(*Service_Spec_Config_HTTP_Auth_Bearer)(nil),                               // 128: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Bearer
	(*Service_Spec_Config_HTTP_Auth_Basic)(nil),                                // 129: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Basic
	(*Service_Spec_Config_HTTP_Auth_Custom)(nil),                               // 130: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Custom
	(*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials)(nil),              // 131: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.OAuth2ClientCredentials
	(*Service_Spec_Config_HTTP_Auth_Sigv4)(nil),                                // 132: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Sigv4
	(*Service_Spec_Config_HTTP_Auth_Basic_Password)(nil),                       // 133: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Basic.Password
	(*Service_Spec_Config_HTTP_Auth_Custom_Value)(nil),                         // 134: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Custom.Value
	(*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret)(nil), // 135: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.OAuth2ClientCredentials.ClientSecret
	(*Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey)(nil),                // 136: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Sigv4.SecretAccessKey
	(*Service_Spec_Config_HTTP_Body_Validation)(nil),                           // 137: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.Validation
	(*Service_Spec_Config_HTTP_Body_Validation_JSONSchema)(nil),                // 138: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.Validation.JSONSchema
	(*Service_Spec_Config_HTTP_Header_KeyValue)(nil),                           // 139: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.KeyValue
	(*Service_Spec_Config_HTTP_Response_Direct)(nil),                           // 140: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Response.Direct
	(*Service_Spec_Config_HTTP_Plugin_ExtProc)(nil),                            // 141: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc
	(*Service_Spec_Config_HTTP_Plugin_Lua)(nil),                                // 142: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Lua
	(*Service_Spec_Config_HTTP_Plugin_Direct)(nil),                             // 143: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct
	(*Service_Spec_Config_HTTP_Plugin_RateLimit)(nil),                          // 144: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit
	(*Service_Spec_Config_HTTP_Plugin_Cache)(nil),                              // 145: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Cache
	(*Service_Spec_Config_HTTP_Plugin_ExtProc_Container)(nil),                  // 146: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.Container
	(*Service_Spec_Config_HTTP_Plugin_ExtProc_ProcessingMode)(nil),             // 147: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode
	(*Service_Spec_Config_HTTP_Plugin_Direct_Body)(nil),                        // 148: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct.Body
	nil, // 149: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct.HeadersEntry
	(*Service_Spec_Config_HTTP_Plugin_RateLimit_Body)(nil), // 150: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.Body
	(*Service_Spec_Config_HTTP_Plugin_RateLimit_Key)(nil),  // 151: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.Key
	nil, // 152: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.HeadersEntry
	(*Service_Spec_Config_HTTP_Plugin_Cache_Key)(nil),                                    // 153: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Cache.Key
	(*Service_Spec_Config_SSH_Auth)(nil),                                                 // 154: octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth
	(*Service_Spec_Config_SSH_UpstreamHostKey)(nil),                                      // 155: octelium.api.main.core.v1.Service.Spec.Config.SSH.UpstreamHostKey
	(*Service_Spec_Config_SSH_Visibility)(nil),                                           // 156: octelium.api.main.core.v1.Service.Spec.Config.SSH.Visibility
	(*Service_Spec_Config_SSH_Auth_Password)(nil),                                        // 157: octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth.Password
	(*Service_Spec_Config_SSH_Auth_PrivateKey)(nil),                                      // 158: octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth.PrivateKey
	(*Service_Spec_Config_Postgres_Auth)(nil),                                            // 159: octelium.api.main.core.v1.Service.Spec.Config.Postgres.Auth
	(*Service_Spec_Config_Postgres_Authorization)(nil),                                   // 160: octelium.api.main.core.v1.Service.Spec.Config.Postgres.Authorization
	(*Service_Spec_Config_Postgres_Auth_Password)(nil),                                   // 161: octelium.api.main.core.v1.Service.Spec.Config.Postgres.Auth.Password
	(*Service_Spec_Config_MySQL_Auth)(nil),                                               // 162: octelium.api.main.core.v1.Service.Spec.Config.MySQL.Auth
	(*Service_Spec_Config_MySQL_Auth_Password)(nil),                                      // 163: octelium.api.main.core.v1.Service.Spec.Config.MySQL.Auth.Password
	(*Service_Spec_Config_TLS_ClientCertificate)(nil),                                    // 164: octelium.api.main.core.v1.Service.Spec.Config.TLS.ClientCertificate
	(*Service_Spec_Config_Kubernetes_BearerToken)(nil),                                   // 165: octelium.api.main.core.v1.Service.Spec.Config.Kubernetes.BearerToken
	(*Service_Spec_Config_Kubernetes_Kubeconfig)(nil),                                    // 166: octelium.api.main.core.v1.Service.Spec.Config.Kubernetes.Kubeconfig
	(*Service_Spec_Config_Upstream_Loadbalance)(nil),                                     // 167: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Loadbalance
	(*Service_Spec_Config_Upstream_Container)(nil),                                       // 168: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container
	(*Service_Spec_Config_Upstream_Loadbalance_Endpoint)(nil),                            // 169: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Loadbalance.Endpoint
	(*Service_Spec_Config_Upstream_Container_Env)(nil),                                   // 170: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Env
	(*Service_Spec_Config_Upstream_Container_Credentials)(nil),                           // 171: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials
	(*Service_Spec_Config_Upstream_Container_ResourceLimit)(nil),                         // 172: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit
	(*Service_Spec_Config_Upstream_Container_SecurityContext)(nil),                       // 173: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.SecurityContext
	(*Service_Spec_Config_Upstream_Container_Volume)(nil),                                // 174: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Volume
	(*Service_Spec_Config_Upstream_Container_VolumeMount)(nil),                           // 175: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.VolumeMount
	(*Service_Spec_Config_Upstream_Container_Probe)(nil),                                 // 176: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe
	(*Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef)(nil),               // 177: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Env.KubernetesSecretRef
	(*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword)(nil),          // 178: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials.UsernamePassword
	(*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password)(nil), // 179: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials.UsernamePassword.Password
	(*Service_Spec_Config_Upstream_Container_ResourceLimit_CPU)(nil),                     // 180: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.CPU
	(*Service_Spec_Config_Upstream_Container_ResourceLimit_Memory)(nil),                  // 181: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.Memory
	nil, // 182: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.ExtEntry
	(*Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim)(nil), // 183: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Volume.PersistentVolumeClaim
	(*Service_Spec_Config_Upstream_Container_Probe_HTTPGet)(nil),                // 184: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.HTTPGet
	(*Service_Spec_Config_Upstream_Container_Probe_TCPSocket)(nil),              // 185: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.TCPSocket
	(*Service_Spec_Config_Upstream_Container_Probe_GRPC)(nil),                   // 186: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.GRPC
	(*Service_Spec_DynamicConfig_Rule)(nil),                                     // 187: octelium.api.main.core.v1.Service.Spec.DynamicConfig.Rule
	(*Service_Status_Address)(nil),                                              // 188: octelium.api.main.core.v1.Service.Status.Address
	(*Service_Status_ManagedService)(nil),                                       // 189: octelium.api.main.core.v1.Service.Status.ManagedService
	(*Service_Status_ManagedService_HealthCheck)(nil),                           // 190: octelium.api.main.core.v1.Service.Status.ManagedService.HealthCheck
	(*Service_Status_ManagedService_ResourceLimit)(nil),                         // 191: octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit
	nil, // 192: octelium.api.main.core.v1.Service.Status.ManagedService.K8sLabelsEntry
	(*Service_Status_ManagedService_HealthCheck_GRPC)(nil),            // 193: octelium.api.main.core.v1.Service.Status.ManagedService.HealthCheck.GRPC
	(*Service_Status_ManagedService_ResourceLimit_CPU)(nil),           // 194: octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit.CPU
	(*Service_Status_ManagedService_ResourceLimit_Memory)(nil),        // 195: octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit.Memory
	(*CredentialToken_AuthenticationToken)(nil),                       // 196: octelium.api.main.core.v1.CredentialToken.AuthenticationToken
	(*CredentialToken_OAuth2Credentials)(nil),                         // 197: octelium.api.main.core.v1.CredentialToken.OAuth2Credentials
	(*CredentialToken_AccessToken)(nil),                               // 198: octelium.api.main.core.v1.CredentialToken.AccessToken
	(*Session_Spec)(nil),                                              // 199: octelium.api.main.core.v1.Session.Spec
	(*Session_Status)(nil),                                            // 200: octelium.api.main.core.v1.Session.Status
	(*Session_Spec_Authorization)(nil),                                // 201: octelium.api.main.core.v1.Session.Spec.Authorization
	(*Session_Status_Connection)(nil),                                 // 202: octelium.api.main.core.v1.Session.Status.Connection
	(*Session_Status_Authentication)(nil),                             // 203: octelium.api.main.core.v1.Session.Status.Authentication
	(*Session_Status_LastConnection)(nil),                             // 204: octelium.api.main.core.v1.Session.Status.LastConnection
	nil,                                                               // 205: octelium.api.main.core.v1.Session.Status.ExtEntry
	(*Session_Status_Connection_ServiceOptions)(nil),                  // 206: octelium.api.main.core.v1.Session.Status.Connection.ServiceOptions
	(*Session_Status_Connection_Upstream)(nil),                        // 207: octelium.api.main.core.v1.Session.Status.Connection.Upstream
	(*Session_Status_Connection_PublishedService)(nil),                // 208: octelium.api.main.core.v1.Session.Status.Connection.PublishedService
	(*Session_Status_Connection_ServiceOptions_RequestedService)(nil), // 209: octelium.api.main.core.v1.Session.Status.Connection.ServiceOptions.RequestedService
	(*Session_Status_Connection_Upstream_Backend)(nil),                // 210: octelium.api.main.core.v1.Session.Status.Connection.Upstream.Backend
	(*Session_Status_Authentication_Info)(nil),                        // 211: octelium.api.main.core.v1.Session.Status.Authentication.Info
	(*Session_Status_Authentication_Info_IdentityProvider)(nil),       // 212: octelium.api.main.core.v1.Session.Status.Authentication.Info.IdentityProvider
	(*Session_Status_Authentication_Info_Credential)(nil),             // 213: octelium.api.main.core.v1.Session.Status.Authentication.Info.Credential
	(*Session_Status_Authentication_Info_External)(nil),               // 214: octelium.api.main.core.v1.Session.Status.Authentication.Info.External
	(*Session_Status_Authentication_Info_Authenticator)(nil),          // 215: octelium.api.main.core.v1.Session.Status.Authentication.Info.Authenticator
	(*Session_Status_Authentication_Info_Downstream)(nil),             // 216: octelium.api.main.core.v1.Session.Status.Authentication.Info.Downstream
	(*Secret_Spec)(nil),                                               // 217: octelium.api.main.core.v1.Secret.Spec
	(*Secret_Status)(nil),                                             // 218: octelium.api.main.core.v1.Secret.Status
	(*Secret_Data)(nil),                                               // 219: octelium.api.main.core.v1.Secret.Data
	(*Secret_Spec_Data)(nil),                                          // 220: octelium.api.main.core.v1.Secret.Spec.Data
	nil,                                                               // 221: octelium.api.main.core.v1.Secret.Status.ExtEntry
	(*Credential_Spec)(nil),                                           // 222: octelium.api.main.core.v1.Credential.Spec
	(*Credential_Status)(nil),                                         // 223: octelium.api.main.core.v1.Credential.Status
	(*Credential_Spec_Authorization)(nil),                             // 224: octelium.api.main.core.v1.Credential.Spec.Authorization
	(*Group_Spec)(nil),                                                // 225: octelium.api.main.core.v1.Group.Spec
	(*Group_Status)(nil),                                              // 226: octelium.api.main.core.v1.Group.Status
	(*Group_Spec_Authorization)(nil),                                  // 227: octelium.api.main.core.v1.Group.Spec.Authorization
	nil,                                                               // 228: octelium.api.main.core.v1.Group.Status.ExtEntry
	(*Device_Spec)(nil),                                               // 229: octelium.api.main.core.v1.Device.Spec
	(*Device_Status)(nil),                                             // 230: octelium.api.main.core.v1.Device.Status
	(*Device_Spec_Authorization)(nil),                                 // 231: octelium.api.main.core.v1.Device.Spec.Authorization
	nil,                                                               // 232: octelium.api.main.core.v1.Device.Status.ExtEntry
	(*Config_Spec)(nil),                                               // 233: octelium.api.main.core.v1.Config.Spec
	(*Config_Status)(nil),                                             // 234: octelium.api.main.core.v1.Config.Status
	(*Config_Data)(nil),                                               // 235: octelium.api.main.core.v1.Config.Data
	(*Config_Data_DataMap)(nil),                                       // 236: octelium.api.main.core.v1.Config.Data.DataMap
	nil,                                                               // 237: octelium.api.main.core.v1.Config.Data.DataMap.MapEntry
	(*Scope_Service)(nil),                                             // 238: octelium.api.main.core.v1.Scope.Service
	(*Scope_API)(nil),                                                 // 239: octelium.api.main.core.v1.Scope.API
	(*Scope_Service_All)(nil),                                         // 240: octelium.api.main.core.v1.Scope.Service.All
	(*Scope_Service_Filter)(nil),                                      // 241: octelium.api.main.core.v1.Scope.Service.Filter
	(*Scope_API_All)(nil),                                             // 242: octelium.api.main.core.v1.Scope.API.All
	(*Scope_API_Filter)(nil),                                          // 243: octelium.api.main.core.v1.Scope.API.Filter
	(*Policy_Spec)(nil),                                               // 244: octelium.api.main.core.v1.Policy.Spec
	(*Policy_Status)(nil),                                             // 245: octelium.api.main.core.v1.Policy.Status
	(*Policy_Spec_Rule)(nil),                                          // 246: octelium.api.main.core.v1.Policy.Spec.Rule
	(*Policy_Spec_EnforcementRule)(nil),                               // 247: octelium.api.main.core.v1.Policy.Spec.EnforcementRule
	(*AccessLog_Entry)(nil),                                           // 248: octelium.api.main.core.v1.AccessLog.Entry
	(*AccessLog_Entry_Info)(nil),                                      // 249: octelium.api.main.core.v1.AccessLog.Entry.Info
	(*AccessLog_Entry_Common)(nil),                                    // 250: octelium.api.main.core.v1.AccessLog.Entry.Common
	(*AccessLog_Entry_Info_HTTP)(nil),                                 // 251: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP
	(*AccessLog_Entry_Info_TCP)(nil),                                  // 252: octelium.api.main.core.v1.AccessLog.Entry.Info.TCP
	(*AccessLog_Entry_Info_SSH)(nil),                                  // 253: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH
	(*AccessLog_Entry_Info_UDP)(nil),                                  // 254: octelium.api.main.core.v1.AccessLog.Entry.Info.UDP
	(*AccessLog_Entry_Info_Postgres)(nil),                             // 255: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres
	(*AccessLog_Entry_Info_MySQL)(nil),                                // 256: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL
	(*AccessLog_Entry_Info_Kubernetes)(nil),                           // 257: octelium.api.main.core.v1.AccessLog.Entry.Info.Kubernetes
	(*AccessLog_Entry_Info_GRPC)(nil),                                 // 258: octelium.api.main.core.v1.AccessLog.Entry.Info.GRPC
	(*AccessLog_Entry_Info_DNS)(nil),                                  // 259: octelium.api.main.core.v1.AccessLog.Entry.Info.DNS
	(*AccessLog_Entry_Info_HTTP_Request)(nil),                         // 260: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Request
	(*AccessLog_Entry_Info_HTTP_Response)(nil),                        // 261: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Response
	nil,                                    // 262: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Request.HeadersEntry
	nil,                                    // 263: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Response.HeadersEntry
	(*AccessLog_Entry_Info_SSH_Start)(nil), // 264: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.Start
	(*AccessLog_Entry_Info_SSH_SessionRecording)(nil),                      // 265: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRecording
	(*AccessLog_Entry_Info_SSH_SessionRequestExec)(nil),                    // 266: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRequestExec
	(*AccessLog_Entry_Info_SSH_SessionRequestSubsystem)(nil),               // 267: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRequestSubsystem
	(*AccessLog_Entry_Info_SSH_DirectTCPIPStart)(nil),                      // 268: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.DirectTCPIPStart
	(*AccessLog_Entry_Info_Postgres_Start)(nil),                            // 269: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Start
	(*AccessLog_Entry_Info_Postgres_Query)(nil),                            // 270: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Query
	(*AccessLog_Entry_Info_Postgres_Parse)(nil),                            // 271: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Parse
	(*AccessLog_Entry_Info_MySQL_Query)(nil),                               // 272: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.Query
	(*AccessLog_Entry_Info_MySQL_InitDB)(nil),                              // 273: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.InitDB
	(*AccessLog_Entry_Info_MySQL_CreateDB)(nil),                            // 274: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.CreateDB
	(*AccessLog_Entry_Info_MySQL_DropDB)(nil),                              // 275: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.DropDB
	(*AccessLog_Entry_Info_MySQL_PrepareStatement)(nil),                    // 276: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.PrepareStatement
	(*AccessLog_Entry_Common_Reason)(nil),                                  // 277: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason
	(*AccessLog_Entry_Common_Reason_Details)(nil),                          // 278: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details
	(*AccessLog_Entry_Common_Reason_Details_PolicyMatch)(nil),              // 279: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch
	(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy)(nil), // 280: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.InlinePolicy
	(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy)(nil),       // 281: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.Policy
	(*IdentityProvider_Spec)(nil),                                          // 282: octelium.api.main.core.v1.IdentityProvider.Spec
	(*IdentityProvider_Status)(nil),                                        // 283: octelium.api.main.core.v1.IdentityProvider.Status
	(*IdentityProvider_Spec_Github)(nil),                                   // 284: octelium.api.main.core.v1.IdentityProvider.Spec.Github
	(*IdentityProvider_Spec_OIDC)(nil),                                     // 285: octelium.api.main.core.v1.IdentityProvider.Spec.OIDC
	(*IdentityProvider_Spec_SAML)(nil),                                     // 286: octelium.api.main.core.v1.IdentityProvider.Spec.SAML
	(*IdentityProvider_Spec_OIDCIdentityToken)(nil),                        // 287: octelium.api.main.core.v1.IdentityProvider.Spec.OIDCIdentityToken
	(*IdentityProvider_Spec_AALRule)(nil),                                  // 288: octelium.api.main.core.v1.IdentityProvider.Spec.AALRule
	(*IdentityProvider_Spec_PostAuthenticationRule)(nil),                   // 289: octelium.api.main.core.v1.IdentityProvider.Spec.PostAuthenticationRule
	(*IdentityProvider_Spec_Github_ClientSecret)(nil),                      // 290: octelium.api.main.core.v1.IdentityProvider.Spec.Github.ClientSecret
	(*IdentityProvider_Spec_OIDC_ClientSecret)(nil),                        // 291: octelium.api.main.core.v1.IdentityProvider.Spec.OIDC.ClientSecret
	(*Region_Spec)(nil),                                                    // 292: octelium.api.main.core.v1.Region.Spec
	(*Region_Status)(nil),                                                  // 293: octelium.api.main.core.v1.Region.Status
	nil,                                                                    // 294: octelium.api.main.core.v1.Region.Status.ExtEntry
	(*Gateway_Spec)(nil),                                                   // 295: octelium.api.main.core.v1.Gateway.Spec
	(*Gateway_Status)(nil),                                                 // 296: octelium.api.main.core.v1.Gateway.Status
	(*Gateway_Status_WireGuard)(nil),                                       // 297: octelium.api.main.core.v1.Gateway.Status.WireGuard
	(*Gateway_Status_QUICV0)(nil),                                          // 298: octelium.api.main.core.v1.Gateway.Status.QUICV0
	(*Condition_All)(nil),                                                  // 299: octelium.api.main.core.v1.Condition.All
	(*Condition_Any)(nil),                                                  // 300: octelium.api.main.core.v1.Condition.Any
	(*Condition_None)(nil),                                                 // 301: octelium.api.main.core.v1.Condition.None
	(*Condition_OPA)(nil),                                                  // 302: octelium.api.main.core.v1.Condition.OPA
	(*ClusterConfig_Spec)(nil),                                             // 303: octelium.api.main.core.v1.ClusterConfig.Spec
	(*ClusterConfig_Status)(nil),                                           // 304: octelium.api.main.core.v1.ClusterConfig.Status
	(*ClusterConfig_Spec_Ingress)(nil),                                     // 305: octelium.api.main.core.v1.ClusterConfig.Spec.Ingress
	(*ClusterConfig_Spec_Session)(nil),                                     // 306: octelium.api.main.core.v1.ClusterConfig.Spec.Session
	(*ClusterConfig_Spec_Device)(nil),                                      // 307: octelium.api.main.core.v1.ClusterConfig.Spec.Device
	(*ClusterConfig_Spec_Gateway)(nil),                                     // 308: octelium.api.main.core.v1.ClusterConfig.Spec.Gateway
	(*ClusterConfig_Spec_DNS)(nil),                                         // 309: octelium.api.main.core.v1.ClusterConfig.Spec.DNS
	(*ClusterConfig_Spec_Authorization)(nil),                               // 310: octelium.api.main.core.v1.ClusterConfig.Spec.Authorization
	(*ClusterConfig_Spec_Session_Human)(nil),                               // 311: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Human
	(*ClusterConfig_Spec_Session_Workload)(nil),                            // 312: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Workload
	(*ClusterConfig_Spec_Device_Human)(nil),                                // 313: octelium.api.main.core.v1.ClusterConfig.Spec.Device.Human
	(*ClusterConfig_Spec_Device_Workload)(nil),                             // 314: octelium.api.main.core.v1.ClusterConfig.Spec.Device.Workload
	(*ClusterConfig_Spec_DNS_Zone)(nil),                                    // 315: octelium.api.main.core.v1.ClusterConfig.Spec.DNS.Zone
	(*ClusterConfig_Status_NetworkConfig)(nil),                             // 316: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig
	(*ClusterConfig_Status_Network)(nil),                                   // 317: octelium.api.main.core.v1.ClusterConfig.Status.Network
	(*ClusterConfig_Status_SecretManager)(nil),                             // 318: octelium.api.main.core.v1.ClusterConfig.Status.SecretManager
	(*ClusterConfig_Status_NetworkConfig_V4)(nil),                          // 319: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.V4
	(*ClusterConfig_Status_NetworkConfig_V6)(nil),                          // 320: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.V6
	(*ClusterConfig_Status_NetworkConfig_Wireguard)(nil),                   // 321: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.Wireguard
	(*ClusterConfig_Status_NetworkConfig_QUICV0)(nil),                      // 322: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.QUICV0
	(*ClusterConfig_Status_SecretManager_TLS)(nil),                         // 323: octelium.api.main.core.v1.ClusterConfig.Status.SecretManager.TLS
	(*RequestContext_Request)(nil),                                         // 324: octelium.api.main.core.v1.RequestContext.Request
	(*RequestContext_Request_HTTP)(nil),                                    // 325: octelium.api.main.core.v1.RequestContext.Request.HTTP
	(*RequestContext_Request_SSH)(nil),                                     // 326: octelium.api.main.core.v1.RequestContext.Request.SSH
	(*RequestContext_Request_Kubernetes)(nil),                              // 327: octelium.api.main.core.v1.RequestContext.Request.Kubernetes
	(*RequestContext_Request_GRPC)(nil),                                    // 328: octelium.api.main.core.v1.RequestContext.Request.GRPC
	(*RequestContext_Request_Postgres)(nil),                                // 329: octelium.api.main.core.v1.RequestContext.Request.Postgres
	(*RequestContext_Request_DNS)(nil),                                     // 330: octelium.api.main.core.v1.RequestContext.Request.DNS
	nil,                                                                    // 331: octelium.api.main.core.v1.RequestContext.Request.HTTP.HeadersEntry
	nil,                                                                    // 332: octelium.api.main.core.v1.RequestContext.Request.HTTP.QueryParamsEntry
	(*RequestContext_Request_SSH_Connect)(nil),                             // 333: octelium.api.main.core.v1.RequestContext.Request.SSH.Connect
	(*RequestContext_Request_Postgres_Connect)(nil),                        // 334: octelium.api.main.core.v1.RequestContext.Request.Postgres.Connect
	(*RequestContext_Request_Postgres_Query)(nil),                          // 335: octelium.api.main.core.v1.RequestContext.Request.Postgres.Query
	(*RequestContext_Request_Postgres_Parse)(nil),                          // 336: octelium.api.main.core.v1.RequestContext.Request.Postgres.Parse
	(*PolicyTrigger_Spec)(nil),                                             // 337: octelium.api.main.core.v1.PolicyTrigger.Spec
	(*PolicyTrigger_Status)(nil),                                           // 338: octelium.api.main.core.v1.PolicyTrigger.Status
	(*PolicyTrigger_Status_PreCondition)(nil),                              // 339: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition
	(*PolicyTrigger_Status_PreCondition_Any)(nil),                          // 340: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.Any
	(*PolicyTrigger_Status_PreCondition_All)(nil),                          // 341: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.All
	(*ComponentLog_Entry)(nil),                                             // 342: octelium.api.main.core.v1.ComponentLog.Entry
	(*ComponentLog_Entry_Component)(nil),                                   // 343: octelium.api.main.core.v1.ComponentLog.Entry.Component
	(*Authenticator_Spec)(nil),                                             // 344: octelium.api.main.core.v1.Authenticator.Spec
	(*Authenticator_Status)(nil),                                           // 345: octelium.api.main.core.v1.Authenticator.Status
	(*Authenticator_Status_EncryptedData)(nil),                             // 346: octelium.api.main.core.v1.Authenticator.Status.EncryptedData
	(*Authenticator_Status_Info)(nil),                                      // 347: octelium.api.main.core.v1.Authenticator.Status.Info
	(*Authenticator_Status_AuthenticationAttempt)(nil),                     // 348: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt
	nil,                                    // 349: octelium.api.main.core.v1.Authenticator.Status.ExtEntry
	(*Authenticator_Status_Info_FIDO)(nil), // 350: octelium.api.main.core.v1.Authenticator.Status.Info.FIDO
	(*Authenticator_Status_Info_TOTP)(nil), // 351: octelium.api.main.core.v1.Authenticator.Status.Info.TOTP
	(*Authenticator_Status_Info_TPM)(nil),  // 352: octelium.api.main.core.v1.Authenticator.Status.Info.TPM
	(*Authenticator_Status_Info_TPM_AttestationParameters)(nil), // 353: octelium.api.main.core.v1.Authenticator.Status.Info.TPM.AttestationParameters
	nil,                              // 354: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.EncryptedDataMapEntry
	nil,                              // 355: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.DataMapEntry
	(*metav1.Metadata)(nil),          // 356: octelium.api.main.meta.v1.Metadata
	(*metav1.ListResponseMeta)(nil),  // 357: octelium.api.main.meta.v1.ListResponseMeta
	(*metav1.ObjectReference)(nil),   // 358: octelium.api.main.meta.v1.ObjectReference
	(*metav1.CommonListOptions)(nil), // 359: octelium.api.main.meta.v1.CommonListOptions
	(*metav1.LogMetadata)(nil),       // 360: octelium.api.main.meta.v1.LogMetadata
	(*structpb.Struct)(nil),          // 361: google.protobuf.Struct
	(*metav1.Duration)(nil),          // 362: octelium.api.main.meta.v1.Duration
	(*metav1.DualStackIP)(nil),       // 363: octelium.api.main.meta.v1.DualStackIP
	(*timestamppb.Timestamp)(nil),    // 364: google.protobuf.Timestamp
	(*metav1.DualStackNetwork)(nil),  // 365: octelium.api.main.meta.v1.DualStackNetwork
	(*metav1.DeleteOptions)(nil),     // 366: octelium.api.main.meta.v1.DeleteOptions
	(*metav1.GetOptions)(nil),        // 367: octelium.api.main.meta.v1.GetOptions
	(*metav1.OperationResult)(nil),   // 368: octelium.api.main.meta.v1.OperationResult
}
var file_corev1_proto_depIdxs = []int32{
	356, // 0: octelium.api.main.core.v1.Namespace.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	94,  // 1: octelium.api.main.core.v1.Namespace.spec:type_name -> octelium.api.main.core.v1.Namespace.Spec
	95,  // 2: octelium.api.main.core.v1.Namespace.status:type_name -> octelium.api.main.core.v1.Namespace.Status
	41,  // 3: octelium.api.main.core.v1.NamespaceList.items:type_name -> octelium.api.main.core.v1.Namespace
	357, // 4: octelium.api.main.core.v1.NamespaceList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	244, // 5: octelium.api.main.core.v1.InlinePolicy.spec:type_name -> octelium.api.main.core.v1.Policy.Spec
	356, // 6: octelium.api.main.core.v1.User.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	97,  // 7: octelium.api.main.core.v1.User.spec:type_name -> octelium.api.main.core.v1.User.Spec
	98,  // 8: octelium.api.main.core.v1.User.status:type_name -> octelium.api.main.core.v1.User.Status
	44,  // 9: octelium.api.main.core.v1.UserList.items:type_name -> octelium.api.main.core.v1.User
	357, // 10: octelium.api.main.core.v1.UserList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	356, // 11: octelium.api.main.core.v1.Service.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	105, // 12: octelium.api.main.core.v1.Service.spec:type_name -> octelium.api.main.core.v1.Service.Spec
	106, // 13: octelium.api.main.core.v1.Service.status:type_name -> octelium.api.main.core.v1.Service.Status
	46,  // 14: octelium.api.main.core.v1.ServiceList.items:type_name -> octelium.api.main.core.v1.Service
	357, // 15: octelium.api.main.core.v1.ServiceList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	358, // 16: octelium.api.main.core.v1.GenerateCredentialTokenRequest.credentialRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	196, // 17: octelium.api.main.core.v1.CredentialToken.authenticationToken:type_name -> octelium.api.main.core.v1.CredentialToken.AuthenticationToken
	197, // 18: octelium.api.main.core.v1.CredentialToken.oauth2Credentials:type_name -> octelium.api.main.core.v1.CredentialToken.OAuth2Credentials
	198, // 19: octelium.api.main.core.v1.CredentialToken.accessToken:type_name -> octelium.api.main.core.v1.CredentialToken.AccessToken
	356, // 20: octelium.api.main.core.v1.Session.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	199, // 21: octelium.api.main.core.v1.Session.spec:type_name -> octelium.api.main.core.v1.Session.Spec
	200, // 22: octelium.api.main.core.v1.Session.status:type_name -> octelium.api.main.core.v1.Session.Status
	50,  // 23: octelium.api.main.core.v1.SessionList.items:type_name -> octelium.api.main.core.v1.Session
	357, // 24: octelium.api.main.core.v1.SessionList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	356, // 25: octelium.api.main.core.v1.Secret.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	217, // 26: octelium.api.main.core.v1.Secret.spec:type_name -> octelium.api.main.core.v1.Secret.Spec
	218, // 27: octelium.api.main.core.v1.Secret.status:type_name -> octelium.api.main.core.v1.Secret.Status
	219, // 28: octelium.api.main.core.v1.Secret.data:type_name -> octelium.api.main.core.v1.Secret.Data
	52,  // 29: octelium.api.main.core.v1.SecretList.items:type_name -> octelium.api.main.core.v1.Secret
	357, // 30: octelium.api.main.core.v1.SecretList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	356, // 31: octelium.api.main.core.v1.Credential.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	222, // 32: octelium.api.main.core.v1.Credential.spec:type_name -> octelium.api.main.core.v1.Credential.Spec
	223, // 33: octelium.api.main.core.v1.Credential.status:type_name -> octelium.api.main.core.v1.Credential.Status
	54,  // 34: octelium.api.main.core.v1.CredentialList.items:type_name -> octelium.api.main.core.v1.Credential
	357, // 35: octelium.api.main.core.v1.CredentialList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	356, // 36: octelium.api.main.core.v1.Group.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	225, // 37: octelium.api.main.core.v1.Group.spec:type_name -> octelium.api.main.core.v1.Group.Spec
	226, // 38: octelium.api.main.core.v1.Group.status:type_name -> octelium.api.main.core.v1.Group.Status
	56,  // 39: octelium.api.main.core.v1.GroupList.items:type_name -> octelium.api.main.core.v1.Group
	357, // 40: octelium.api.main.core.v1.GroupList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	356, // 41: octelium.api.main.core.v1.Device.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	229, // 42: octelium.api.main.core.v1.Device.spec:type_name -> octelium.api.main.core.v1.Device.Spec
	230, // 43: octelium.api.main.core.v1.Device.status:type_name -> octelium.api.main.core.v1.Device.Status
	58,  // 44: octelium.api.main.core.v1.DeviceList.items:type_name -> octelium.api.main.core.v1.Device
	357, // 45: octelium.api.main.core.v1.DeviceList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	359, // 46: octelium.api.main.core.v1.ListUserOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	359, // 47: octelium.api.main.core.v1.ListNamespaceOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	359, // 48: octelium.api.main.core.v1.ListServiceOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	358, // 49: octelium.api.main.core.v1.ListServiceOptions.namespaceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 50: octelium.api.main.core.v1.ListServiceOptions.regionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	359, // 51: octelium.api.main.core.v1.ListSessionOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	358, // 52: octelium.api.main.core.v1.ListSessionOptions.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	359, // 53: octelium.api.main.core.v1.ListSecretOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	359, // 54: octelium.api.main.core.v1.ListCredentialOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	358, // 55: octelium.api.main.core.v1.ListCredentialOptions.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	359, // 56: octelium.api.main.core.v1.ListGroupOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	359, // 57: octelium.api.main.core.v1.ListDeviceOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	358, // 58: octelium.api.main.core.v1.ListDeviceOptions.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	356, // 59: octelium.api.main.core.v1.Config.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	233, // 60: octelium.api.main.core.v1.Config.spec:type_name -> octelium.api.main.core.v1.Config.Spec
	234, // 61: octelium.api.main.core.v1.Config.status:type_name -> octelium.api.main.core.v1.Config.Status
	235, // 62: octelium.api.main.core.v1.Config.data:type_name -> octelium.api.main.core.v1.Config.Data
	68,  // 63: octelium.api.main.core.v1.ConfigList.items:type_name -> octelium.api.main.core.v1.Config
	357, // 64: octelium.api.main.core.v1.ConfigList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	238, // 65: octelium.api.main.core.v1.Scope.service:type_name -> octelium.api.main.core.v1.Scope.Service
	239, // 66: octelium.api.main.core.v1.Scope.api:type_name -> octelium.api.main.core.v1.Scope.API
	356, // 67: octelium.api.main.core.v1.Policy.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	244, // 68: octelium.api.main.core.v1.Policy.spec:type_name -> octelium.api.main.core.v1.Policy.Spec
	245, // 69: octelium.api.main.core.v1.Policy.status:type_name -> octelium.api.main.core.v1.Policy.Status
	71,  // 70: octelium.api.main.core.v1.PolicyList.items:type_name -> octelium.api.main.core.v1.Policy
	357, // 71: octelium.api.main.core.v1.PolicyList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	359, // 72: octelium.api.main.core.v1.ListPolicyOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	360, // 73: octelium.api.main.core.v1.AccessLog.metadata:type_name -> octelium.api.main.meta.v1.LogMetadata
	248, // 74: octelium.api.main.core.v1.AccessLog.entry:type_name -> octelium.api.main.core.v1.AccessLog.Entry
	359, // 75: octelium.api.main.core.v1.ListIdentityProviderOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	356, // 76: octelium.api.main.core.v1.IdentityProvider.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	282, // 77: octelium.api.main.core.v1.IdentityProvider.spec:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec
	283, // 78: octelium.api.main.core.v1.IdentityProvider.status:type_name -> octelium.api.main.core.v1.IdentityProvider.Status
	76,  // 79: octelium.api.main.core.v1.IdentityProviderList.items:type_name -> octelium.api.main.core.v1.IdentityProvider
	357, // 80: octelium.api.main.core.v1.IdentityProviderList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	356, // 81: octelium.api.main.core.v1.Region.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	292, // 82: octelium.api.main.core.v1.Region.spec:type_name -> octelium.api.main.core.v1.Region.Spec
	293, // 83: octelium.api.main.core.v1.Region.status:type_name -> octelium.api.main.core.v1.Region.Status
	78,  // 84: octelium.api.main.core.v1.RegionList.items:type_name -> octelium.api.main.core.v1.Region
	357, // 85: octelium.api.main.core.v1.RegionList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	356, // 86: octelium.api.main.core.v1.Gateway.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	295, // 87: octelium.api.main.core.v1.Gateway.spec:type_name -> octelium.api.main.core.v1.Gateway.Spec
	296, // 88: octelium.api.main.core.v1.Gateway.status:type_name -> octelium.api.main.core.v1.Gateway.Status
	80,  // 89: octelium.api.main.core.v1.GatewayList.items:type_name -> octelium.api.main.core.v1.Gateway
	357, // 90: octelium.api.main.core.v1.GatewayList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	359, // 91: octelium.api.main.core.v1.ListGatewayOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	358, // 92: octelium.api.main.core.v1.ListGatewayOptions.regionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	359, // 93: octelium.api.main.core.v1.ListRegionOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	299, // 94: octelium.api.main.core.v1.Condition.all:type_name -> octelium.api.main.core.v1.Condition.All
	300, // 95: octelium.api.main.core.v1.Condition.any:type_name -> octelium.api.main.core.v1.Condition.Any
	301, // 96: octelium.api.main.core.v1.Condition.none:type_name -> octelium.api.main.core.v1.Condition.None
	302, // 97: octelium.api.main.core.v1.Condition.opa:type_name -> octelium.api.main.core.v1.Condition.OPA
	356, // 98: octelium.api.main.core.v1.ClusterConfig.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	303, // 99: octelium.api.main.core.v1.ClusterConfig.spec:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec
	304, // 100: octelium.api.main.core.v1.ClusterConfig.status:type_name -> octelium.api.main.core.v1.ClusterConfig.Status
	324, // 101: octelium.api.main.core.v1.RequestContext.request:type_name -> octelium.api.main.core.v1.RequestContext.Request
	50,  // 102: octelium.api.main.core.v1.RequestContext.session:type_name -> octelium.api.main.core.v1.Session
	44,  // 103: octelium.api.main.core.v1.RequestContext.user:type_name -> octelium.api.main.core.v1.User
	56,  // 104: octelium.api.main.core.v1.RequestContext.groups:type_name -> octelium.api.main.core.v1.Group
	58,  // 105: octelium.api.main.core.v1.RequestContext.device:type_name -> octelium.api.main.core.v1.Device
	46,  // 106: octelium.api.main.core.v1.RequestContext.service:type_name -> octelium.api.main.core.v1.Service
	41,  // 107: octelium.api.main.core.v1.RequestContext.namespace:type_name -> octelium.api.main.core.v1.Namespace
	356, // 108: octelium.api.main.core.v1.PolicyTrigger.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	337, // 109: octelium.api.main.core.v1.PolicyTrigger.spec:type_name -> octelium.api.main.core.v1.PolicyTrigger.Spec
	338, // 110: octelium.api.main.core.v1.PolicyTrigger.status:type_name -> octelium.api.main.core.v1.PolicyTrigger.Status
	88,  // 111: octelium.api.main.core.v1.PolicyTriggerList.items:type_name -> octelium.api.main.core.v1.PolicyTrigger
	357, // 112: octelium.api.main.core.v1.PolicyTriggerList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	360, // 113: octelium.api.main.core.v1.ComponentLog.metadata:type_name -> octelium.api.main.meta.v1.LogMetadata
	342, // 114: octelium.api.main.core.v1.ComponentLog.entry:type_name -> octelium.api.main.core.v1.ComponentLog.Entry
	356, // 115: octelium.api.main.core.v1.Authenticator.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	344, // 116: octelium.api.main.core.v1.Authenticator.spec:type_name -> octelium.api.main.core.v1.Authenticator.Spec
	345, // 117: octelium.api.main.core.v1.Authenticator.status:type_name -> octelium.api.main.core.v1.Authenticator.Status
	91,  // 118: octelium.api.main.core.v1.AuthenticatorList.items:type_name -> octelium.api.main.core.v1.Authenticator
	357, // 119: octelium.api.main.core.v1.AuthenticatorList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	359, // 120: octelium.api.main.core.v1.ListAuthenticatorOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	96,  // 121: octelium.api.main.core.v1.Namespace.Spec.authorization:type_name -> octelium.api.main.core.v1.Namespace.Spec.Authorization
	361, // 122: octelium.api.main.core.v1.Namespace.Spec.attrs:type_name -> google.protobuf.Struct
	43,  // 123: octelium.api.main.core.v1.Namespace.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	0,   // 124: octelium.api.main.core.v1.User.Spec.type:type_name -> octelium.api.main.core.v1.User.Spec.Type
	102, // 125: octelium.api.main.core.v1.User.Spec.info:type_name -> octelium.api.main.core.v1.User.Spec.Info
	101, // 126: octelium.api.main.core.v1.User.Spec.session:type_name -> octelium.api.main.core.v1.User.Spec.Session
	99,  // 127: octelium.api.main.core.v1.User.Spec.authorization:type_name -> octelium.api.main.core.v1.User.Spec.Authorization
	361, // 128: octelium.api.main.core.v1.User.Spec.attrs:type_name -> google.protobuf.Struct
	100, // 129: octelium.api.main.core.v1.User.Spec.authentication:type_name -> octelium.api.main.core.v1.User.Spec.Authentication
	104, // 130: octelium.api.main.core.v1.User.Status.ext:type_name -> octelium.api.main.core.v1.User.Status.ExtEntry
	358, // 131: octelium.api.main.core.v1.User.Status.identityProviderRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	43,  // 132: octelium.api.main.core.v1.User.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	103, // 133: octelium.api.main.core.v1.User.Spec.Authentication.identities:type_name -> octelium.api.main.core.v1.User.Spec.Authentication.Identity
	362, // 134: octelium.api.main.core.v1.User.Spec.Session.clientDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 135: octelium.api.main.core.v1.User.Spec.Session.clientlessDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 136: octelium.api.main.core.v1.User.Spec.Session.accessTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 137: octelium.api.main.core.v1.User.Spec.Session.refreshTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	9,   // 138: octelium.api.main.core.v1.User.Spec.Session.defaultState:type_name -> octelium.api.main.core.v1.Session.Spec.State
	361, // 139: octelium.api.main.core.v1.User.Status.ExtEntry.value:type_name -> google.protobuf.Struct
	1,   // 140: octelium.api.main.core.v1.Service.Spec.mode:type_name -> octelium.api.main.core.v1.Service.Spec.Mode
	107, // 141: octelium.api.main.core.v1.Service.Spec.authorization:type_name -> octelium.api.main.core.v1.Service.Spec.Authorization
	108, // 142: octelium.api.main.core.v1.Service.Spec.config:type_name -> octelium.api.main.core.v1.Service.Spec.Config
	110, // 143: octelium.api.main.core.v1.Service.Spec.dynamicConfig:type_name -> octelium.api.main.core.v1.Service.Spec.DynamicConfig
	109, // 144: octelium.api.main.core.v1.Service.Spec.deployment:type_name -> octelium.api.main.core.v1.Service.Spec.Deployment
	361, // 145: octelium.api.main.core.v1.Service.Spec.attrs:type_name -> google.protobuf.Struct
	188, // 146: octelium.api.main.core.v1.Service.Status.addresses:type_name -> octelium.api.main.core.v1.Service.Status.Address
	358, // 147: octelium.api.main.core.v1.Service.Status.namespaceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	189, // 148: octelium.api.main.core.v1.Service.Status.managedService:type_name -> octelium.api.main.core.v1.Service.Status.ManagedService
	358, // 149: octelium.api.main.core.v1.Service.Status.regionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	43,  // 150: octelium.api.main.core.v1.Service.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	115, // 151: octelium.api.main.core.v1.Service.Spec.Config.clientCertificate:type_name -> octelium.api.main.core.v1.Service.Spec.Config.ClientCertificate
	118, // 152: octelium.api.main.core.v1.Service.Spec.Config.upstream:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream
	116, // 153: octelium.api.main.core.v1.Service.Spec.Config.tls:type_name -> octelium.api.main.core.v1.Service.Spec.Config.TLS
	111, // 154: octelium.api.main.core.v1.Service.Spec.Config.http:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP
	112, // 155: octelium.api.main.core.v1.Service.Spec.Config.ssh:type_name -> octelium.api.main.core.v1.Service.Spec.Config.SSH
	113, // 156: octelium.api.main.core.v1.Service.Spec.Config.postgres:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Postgres
	114, // 157: octelium.api.main.core.v1.Service.Spec.Config.mysql:type_name -> octelium.api.main.core.v1.Service.Spec.Config.MySQL
	117, // 158: octelium.api.main.core.v1.Service.Spec.Config.kubernetes:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Kubernetes
	108, // 159: octelium.api.main.core.v1.Service.Spec.DynamicConfig.configs:type_name -> octelium.api.main.core.v1.Service.Spec.Config
	187, // 160: octelium.api.main.core.v1.Service.Spec.DynamicConfig.rules:type_name -> octelium.api.main.core.v1.Service.Spec.DynamicConfig.Rule
	120, // 161: octelium.api.main.core.v1.Service.Spec.Config.HTTP.auth:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth
	123, // 162: octelium.api.main.core.v1.Service.Spec.Config.HTTP.header:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header
	121, // 163: octelium.api.main.core.v1.Service.Spec.Config.HTTP.path:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Path
	119, // 164: octelium.api.main.core.v1.Service.Spec.Config.HTTP.cors:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.CORS
	122, // 165: octelium.api.main.core.v1.Service.Spec.Config.HTTP.body:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body
	124, // 166: octelium.api.main.core.v1.Service.Spec.Config.HTTP.response:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Response
	126, // 167: octelium.api.main.core.v1.Service.Spec.Config.HTTP.plugins:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin
	127, // 168: octelium.api.main.core.v1.Service.Spec.Config.HTTP.visibility:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Visibility
	125, // 169: octelium.api.main.core.v1.Service.Spec.Config.HTTP.retry:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Retry
	154, // 170: octelium.api.main.core.v1.Service.Spec.Config.SSH.auth:type_name -> octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth
	155, // 171: octelium.api.main.core.v1.Service.Spec.Config.SSH.upstreamHostKey:type_name -> octelium.api.main.core.v1.Service.Spec.Config.SSH.UpstreamHostKey
	156, // 172: octelium.api.main.core.v1.Service.Spec.Config.SSH.visibility:type_name -> octelium.api.main.core.v1.Service.Spec.Config.SSH.Visibility
	159, // 173: octelium.api.main.core.v1.Service.Spec.Config.Postgres.auth:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Postgres.Auth
	7,   // 174: octelium.api.main.core.v1.Service.Spec.Config.Postgres.sslMode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Postgres.SSLMode
	160, // 175: octelium.api.main.core.v1.Service.Spec.Config.Postgres.authorization:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Postgres.Authorization
	162, // 176: octelium.api.main.core.v1.Service.Spec.Config.MySQL.auth:type_name -> octelium.api.main.core.v1.Service.Spec.Config.MySQL.Auth
	164, // 177: octelium.api.main.core.v1.Service.Spec.Config.TLS.clientCertificate:type_name -> octelium.api.main.core.v1.Service.Spec.Config.TLS.ClientCertificate
	166, // 178: octelium.api.main.core.v1.Service.Spec.Config.Kubernetes.kubeconfig:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Kubernetes.Kubeconfig
	165, // 179: octelium.api.main.core.v1.Service.Spec.Config.Kubernetes.bearerToken:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Kubernetes.BearerToken
	115, // 180: octelium.api.main.core.v1.Service.Spec.Config.Kubernetes.clientCertificate:type_name -> octelium.api.main.core.v1.Service.Spec.Config.ClientCertificate
	167, // 181: octelium.api.main.core.v1.Service.Spec.Config.Upstream.loadbalance:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Loadbalance
	168, // 182: octelium.api.main.core.v1.Service.Spec.Config.Upstream.container:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container
	128, // 183: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.bearer:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Bearer
	129, // 184: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.basic:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Basic
	130, // 185: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.custom:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Custom
	131, // 186: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.oauth2ClientCredentials:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.OAuth2ClientCredentials
	132, // 187: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.sigv4:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Sigv4
	2,   // 188: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.mode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.Mode
	137, // 189: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.validation:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.Validation
	139, // 190: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.addRequestHeaders:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.KeyValue
	139, // 191: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.addResponseHeaders:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.KeyValue
	3,   // 192: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.forwardedMode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Header.ForwardedMode
	140, // 193: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Response.direct:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Response.Direct
	362, // 194: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Retry.initialInterval:type_name -> octelium.api.main.meta.v1.Duration
	362, // 195: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Retry.maxInterval:type_name -> octelium.api.main.meta.v1.Duration
	362, // 196: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Retry.maxElapsedTime:type_name -> octelium.api.main.meta.v1.Duration
	4,   // 197: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.phase:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Phase
	84,  // 198: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.condition:type_name -> octelium.api.main.core.v1.Condition
	141, // 199: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.extProc:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc
	142, // 200: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.lua:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Lua
	143, // 201: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.direct:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct
	144, // 202: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.rateLimit:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit
	145, // 203: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.cache:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Cache
	133, // 204: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Basic.password:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Basic.Password
	134, // 205: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Custom.value:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Custom.Value
	135, // 206: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.OAuth2ClientCredentials.clientSecret:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.OAuth2ClientCredentials.ClientSecret
	136, // 207: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Sigv4.secretAccessKey:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Auth.Sigv4.SecretAccessKey
	138, // 208: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.Validation.jsonSchema:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Body.Validation.JSONSchema
	146, // 209: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.container:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.Container
	147, // 210: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.processingMode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode
	362, // 211: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.messageTimeout:type_name -> octelium.api.main.meta.v1.Duration
	148, // 212: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct.body:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct.Body
	149, // 213: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct.headers:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Direct.HeadersEntry
	150, // 214: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.body:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.Body
	151, // 215: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.key:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.Key
	362, // 216: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.window:type_name -> octelium.api.main.meta.v1.Duration
	152, // 217: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.headers:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.RateLimit.HeadersEntry
	153, // 218: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Cache.key:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Cache.Key
	362, // 219: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.Cache.ttl:type_name -> octelium.api.main.meta.v1.Duration
	5,   // 220: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.requestHeaderMode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.HeaderSendMode
	5,   // 221: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.responseHeaderMode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.HeaderSendMode
	6,   // 222: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.requestBodyMode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.BodySendMode
	6,   // 223: octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.responseBodyMode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.HTTP.Plugin.ExtProc.ProcessingMode.BodySendMode
	157, // 224: octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth.password:type_name -> octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth.Password
	158, // 225: octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth.privateKey:type_name -> octelium.api.main.core.v1.Service.Spec.Config.SSH.Auth.PrivateKey
	161, // 226: octelium.api.main.core.v1.Service.Spec.Config.Postgres.Auth.password:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Postgres.Auth.Password
	8,   // 227: octelium.api.main.core.v1.Service.Spec.Config.Postgres.Authorization.mode:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Postgres.Authorization.Mode
	163, // 228: octelium.api.main.core.v1.Service.Spec.Config.MySQL.Auth.password:type_name -> octelium.api.main.core.v1.Service.Spec.Config.MySQL.Auth.Password
	169, // 229: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Loadbalance.endpoints:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Loadbalance.Endpoint
	170, // 230: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.env:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Env
	171, // 231: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.credentials:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials
	172, // 232: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.resourceLimit:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit
	173, // 233: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.securityContext:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.SecurityContext
	174, // 234: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.volumes:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Volume
	175, // 235: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.volumeMounts:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.VolumeMount
	176, // 236: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.livenessProbe:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe
	176, // 237: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.readinessProbe:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe
	177, // 238: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Env.kubernetesSecretRef:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Env.KubernetesSecretRef
	178, // 239: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials.usernamePassword:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials.UsernamePassword
	180, // 240: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.cpu:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.CPU
	181, // 241: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.memory:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.Memory
	182, // 242: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.ext:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.ResourceLimit.ExtEntry
	183, // 243: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Volume.persistentVolumeClaim:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Volume.PersistentVolumeClaim
	184, // 244: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.httpGet:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.HTTPGet
	185, // 245: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.tcpSocket:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.TCPSocket
	186, // 246: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.grpc:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Probe.GRPC
	179, // 247: octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials.UsernamePassword.password:type_name -> octelium.api.main.core.v1.Service.Spec.Config.Upstream.Container.Credentials.UsernamePassword.Password
	84,  // 248: octelium.api.main.core.v1.Service.Spec.DynamicConfig.Rule.condition:type_name -> octelium.api.main.core.v1.Condition
	363, // 249: octelium.api.main.core.v1.Service.Status.Address.dualStackIP:type_name -> octelium.api.main.meta.v1.DualStackIP
	358, // 250: octelium.api.main.core.v1.Service.Status.Address.podRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	192, // 251: octelium.api.main.core.v1.Service.Status.ManagedService.k8sLabels:type_name -> octelium.api.main.core.v1.Service.Status.ManagedService.K8sLabelsEntry
	190, // 252: octelium.api.main.core.v1.Service.Status.ManagedService.healthCheck:type_name -> octelium.api.main.core.v1.Service.Status.ManagedService.HealthCheck
	191, // 253: octelium.api.main.core.v1.Service.Status.ManagedService.resourceLimit:type_name -> octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit
	193, // 254: octelium.api.main.core.v1.Service.Status.ManagedService.HealthCheck.grpc:type_name -> octelium.api.main.core.v1.Service.Status.ManagedService.HealthCheck.GRPC
	194, // 255: octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit.cpu:type_name -> octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit.CPU
	195, // 256: octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit.memory:type_name -> octelium.api.main.core.v1.Service.Status.ManagedService.ResourceLimit.Memory
	364, // 257: octelium.api.main.core.v1.Session.Spec.expiresAt:type_name -> google.protobuf.Timestamp
	9,   // 258: octelium.api.main.core.v1.Session.Spec.state:type_name -> octelium.api.main.core.v1.Session.Spec.State
	201, // 259: octelium.api.main.core.v1.Session.Spec.authorization:type_name -> octelium.api.main.core.v1.Session.Spec.Authorization
	358, // 260: octelium.api.main.core.v1.Session.Status.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 261: octelium.api.main.core.v1.Session.Status.deviceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	10,  // 262: octelium.api.main.core.v1.Session.Status.type:type_name -> octelium.api.main.core.v1.Session.Status.Type
	203, // 263: octelium.api.main.core.v1.Session.Status.authentication:type_name -> octelium.api.main.core.v1.Session.Status.Authentication
	203, // 264: octelium.api.main.core.v1.Session.Status.lastAuthentications:type_name -> octelium.api.main.core.v1.Session.Status.Authentication
	203, // 265: octelium.api.main.core.v1.Session.Status.initialAuthentication:type_name -> octelium.api.main.core.v1.Session.Status.Authentication
	202, // 266: octelium.api.main.core.v1.Session.Status.connection:type_name -> octelium.api.main.core.v1.Session.Status.Connection
	358, // 267: octelium.api.main.core.v1.Session.Status.credentialRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	205, // 268: octelium.api.main.core.v1.Session.Status.ext:type_name -> octelium.api.main.core.v1.Session.Status.ExtEntry
	70,  // 269: octelium.api.main.core.v1.Session.Status.scopes:type_name -> octelium.api.main.core.v1.Scope
	204, // 270: octelium.api.main.core.v1.Session.Status.lastConnections:type_name -> octelium.api.main.core.v1.Session.Status.LastConnection
	43,  // 271: octelium.api.main.core.v1.Session.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	364, // 272: octelium.api.main.core.v1.Session.Status.Connection.startedAt:type_name -> google.protobuf.Timestamp
	364, // 273: octelium.api.main.core.v1.Session.Status.Connection.lastSeenAt:type_name -> google.protobuf.Timestamp
	207, // 274: octelium.api.main.core.v1.Session.Status.Connection.upstreams:type_name -> octelium.api.main.core.v1.Session.Status.Connection.Upstream
	365, // 275: octelium.api.main.core.v1.Session.Status.Connection.addresses:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	11,  // 276: octelium.api.main.core.v1.Session.Status.Connection.l3Mode:type_name -> octelium.api.main.core.v1.Session.Status.Connection.L3Mode
	206, // 277: octelium.api.main.core.v1.Session.Status.Connection.serviceOptions:type_name -> octelium.api.main.core.v1.Session.Status.Connection.ServiceOptions
	12,  // 278: octelium.api.main.core.v1.Session.Status.Connection.type:type_name -> octelium.api.main.core.v1.Session.Status.Connection.Type
	208, // 279: octelium.api.main.core.v1.Session.Status.Connection.publishedServices:type_name -> octelium.api.main.core.v1.Session.Status.Connection.PublishedService
	211, // 280: octelium.api.main.core.v1.Session.Status.Authentication.info:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info
	364, // 281: octelium.api.main.core.v1.Session.Status.Authentication.setAt:type_name -> google.protobuf.Timestamp
	362, // 282: octelium.api.main.core.v1.Session.Status.Authentication.accessTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 283: octelium.api.main.core.v1.Session.Status.Authentication.refreshTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	364, // 284: octelium.api.main.core.v1.Session.Status.LastConnection.startedAt:type_name -> google.protobuf.Timestamp
	364, // 285: octelium.api.main.core.v1.Session.Status.LastConnection.endedAt:type_name -> google.protobuf.Timestamp
	361, // 286: octelium.api.main.core.v1.Session.Status.ExtEntry.value:type_name -> google.protobuf.Struct
	209, // 287: octelium.api.main.core.v1.Session.Status.Connection.ServiceOptions.requestedServices:type_name -> octelium.api.main.core.v1.Session.Status.Connection.ServiceOptions.RequestedService
	13,  // 288: octelium.api.main.core.v1.Session.Status.Connection.Upstream.l4Type:type_name -> octelium.api.main.core.v1.Session.Status.Connection.Upstream.L4Type
	358, // 289: octelium.api.main.core.v1.Session.Status.Connection.Upstream.serviceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 290: octelium.api.main.core.v1.Session.Status.Connection.Upstream.namespaceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	210, // 291: octelium.api.main.core.v1.Session.Status.Connection.Upstream.backend:type_name -> octelium.api.main.core.v1.Session.Status.Connection.Upstream.Backend
	14,  // 292: octelium.api.main.core.v1.Session.Status.Connection.Upstream.mode:type_name -> octelium.api.main.core.v1.Session.Status.Connection.Upstream.Mode
	358, // 293: octelium.api.main.core.v1.Session.Status.Connection.PublishedService.serviceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 294: octelium.api.main.core.v1.Session.Status.Connection.ServiceOptions.RequestedService.serviceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 295: octelium.api.main.core.v1.Session.Status.Connection.ServiceOptions.RequestedService.namespaceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	15,  // 296: octelium.api.main.core.v1.Session.Status.Authentication.Info.type:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.Type
	214, // 297: octelium.api.main.core.v1.Session.Status.Authentication.Info.external:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.External
	212, // 298: octelium.api.main.core.v1.Session.Status.Authentication.Info.identityProvider:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.IdentityProvider
	213, // 299: octelium.api.main.core.v1.Session.Status.Authentication.Info.credential:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.Credential
	215, // 300: octelium.api.main.core.v1.Session.Status.Authentication.Info.authenticator:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.Authenticator
	16,  // 301: octelium.api.main.core.v1.Session.Status.Authentication.Info.aal:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.AAL
	216, // 302: octelium.api.main.core.v1.Session.Status.Authentication.Info.downstream:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.Downstream
	358, // 303: octelium.api.main.core.v1.Session.Status.Authentication.Info.IdentityProvider.identityProviderRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	17,  // 304: octelium.api.main.core.v1.Session.Status.Authentication.Info.IdentityProvider.type:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.IdentityProvider.Type
	358, // 305: octelium.api.main.core.v1.Session.Status.Authentication.Info.Credential.credentialRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	18,  // 306: octelium.api.main.core.v1.Session.Status.Authentication.Info.Credential.type:type_name -> octelium.api.main.core.v1.Session.Status.Authentication.Info.Credential.Type
	358, // 307: octelium.api.main.core.v1.Session.Status.Authentication.Info.External.ownerRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	361, // 308: octelium.api.main.core.v1.Session.Status.Authentication.Info.External.attrs:type_name -> google.protobuf.Struct
	358, // 309: octelium.api.main.core.v1.Session.Status.Authentication.Info.Authenticator.authenticatorRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	39,  // 310: octelium.api.main.core.v1.Session.Status.Authentication.Info.Authenticator.type:type_name -> octelium.api.main.core.v1.Authenticator.Status.Type
	220, // 311: octelium.api.main.core.v1.Secret.Spec.data:type_name -> octelium.api.main.core.v1.Secret.Spec.Data
	221, // 312: octelium.api.main.core.v1.Secret.Status.ext:type_name -> octelium.api.main.core.v1.Secret.Status.ExtEntry
	361, // 313: octelium.api.main.core.v1.Secret.Status.ExtEntry.value:type_name -> google.protobuf.Struct
	19,  // 314: octelium.api.main.core.v1.Credential.Spec.type:type_name -> octelium.api.main.core.v1.Credential.Spec.Type
	364, // 315: octelium.api.main.core.v1.Credential.Spec.expiresAt:type_name -> google.protobuf.Timestamp
	10,  // 316: octelium.api.main.core.v1.Credential.Spec.sessionType:type_name -> octelium.api.main.core.v1.Session.Status.Type
	224, // 317: octelium.api.main.core.v1.Credential.Spec.authorization:type_name -> octelium.api.main.core.v1.Credential.Spec.Authorization
	358, // 318: octelium.api.main.core.v1.Credential.Status.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	364, // 319: octelium.api.main.core.v1.Credential.Status.lastRotationAt:type_name -> google.protobuf.Timestamp
	43,  // 320: octelium.api.main.core.v1.Credential.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	227, // 321: octelium.api.main.core.v1.Group.Spec.authorization:type_name -> octelium.api.main.core.v1.Group.Spec.Authorization
	361, // 322: octelium.api.main.core.v1.Group.Spec.attrs:type_name -> google.protobuf.Struct
	228, // 323: octelium.api.main.core.v1.Group.Status.ext:type_name -> octelium.api.main.core.v1.Group.Status.ExtEntry
	43,  // 324: octelium.api.main.core.v1.Group.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	361, // 325: octelium.api.main.core.v1.Group.Status.ExtEntry.value:type_name -> google.protobuf.Struct
	20,  // 326: octelium.api.main.core.v1.Device.Spec.state:type_name -> octelium.api.main.core.v1.Device.Spec.State
	231, // 327: octelium.api.main.core.v1.Device.Spec.authorization:type_name -> octelium.api.main.core.v1.Device.Spec.Authorization
	232, // 328: octelium.api.main.core.v1.Device.Status.ext:type_name -> octelium.api.main.core.v1.Device.Status.ExtEntry
	358, // 329: octelium.api.main.core.v1.Device.Status.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	21,  // 330: octelium.api.main.core.v1.Device.Status.osType:type_name -> octelium.api.main.core.v1.Device.Status.OSType
	43,  // 331: octelium.api.main.core.v1.Device.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	361, // 332: octelium.api.main.core.v1.Device.Status.ExtEntry.value:type_name -> google.protobuf.Struct
	236, // 333: octelium.api.main.core.v1.Config.Data.dataMap:type_name -> octelium.api.main.core.v1.Config.Data.DataMap
	361, // 334: octelium.api.main.core.v1.Config.Data.attrs:type_name -> google.protobuf.Struct
	237, // 335: octelium.api.main.core.v1.Config.Data.DataMap.map:type_name -> octelium.api.main.core.v1.Config.Data.DataMap.MapEntry
	240, // 336: octelium.api.main.core.v1.Scope.Service.all:type_name -> octelium.api.main.core.v1.Scope.Service.All
	241, // 337: octelium.api.main.core.v1.Scope.Service.filter:type_name -> octelium.api.main.core.v1.Scope.Service.Filter
	242, // 338: octelium.api.main.core.v1.Scope.API.all:type_name -> octelium.api.main.core.v1.Scope.API.All
	243, // 339: octelium.api.main.core.v1.Scope.API.filter:type_name -> octelium.api.main.core.v1.Scope.API.Filter
	246, // 340: octelium.api.main.core.v1.Policy.Spec.rules:type_name -> octelium.api.main.core.v1.Policy.Spec.Rule
	247, // 341: octelium.api.main.core.v1.Policy.Spec.enforcementRules:type_name -> octelium.api.main.core.v1.Policy.Spec.EnforcementRule
	361, // 342: octelium.api.main.core.v1.Policy.Spec.attrs:type_name -> google.protobuf.Struct
	358, // 343: octelium.api.main.core.v1.Policy.Status.parentPolicyRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	84,  // 344: octelium.api.main.core.v1.Policy.Spec.Rule.condition:type_name -> octelium.api.main.core.v1.Condition
	22,  // 345: octelium.api.main.core.v1.Policy.Spec.Rule.effect:type_name -> octelium.api.main.core.v1.Policy.Spec.Rule.Effect
	84,  // 346: octelium.api.main.core.v1.Policy.Spec.EnforcementRule.condition:type_name -> octelium.api.main.core.v1.Condition
	23,  // 347: octelium.api.main.core.v1.Policy.Spec.EnforcementRule.effect:type_name -> octelium.api.main.core.v1.Policy.Spec.EnforcementRule.Effect
	250, // 348: octelium.api.main.core.v1.AccessLog.Entry.common:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common
	249, // 349: octelium.api.main.core.v1.AccessLog.Entry.info:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info
	252, // 350: octelium.api.main.core.v1.AccessLog.Entry.Info.tcp:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.TCP
	251, // 351: octelium.api.main.core.v1.AccessLog.Entry.Info.http:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP
	253, // 352: octelium.api.main.core.v1.AccessLog.Entry.Info.ssh:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH
	254, // 353: octelium.api.main.core.v1.AccessLog.Entry.Info.udp:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.UDP
	255, // 354: octelium.api.main.core.v1.AccessLog.Entry.Info.postgres:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres
	257, // 355: octelium.api.main.core.v1.AccessLog.Entry.Info.kubernetes:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.Kubernetes
	258, // 356: octelium.api.main.core.v1.AccessLog.Entry.Info.grpc:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.GRPC
	256, // 357: octelium.api.main.core.v1.AccessLog.Entry.Info.mysql:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL
	259, // 358: octelium.api.main.core.v1.AccessLog.Entry.Info.dns:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.DNS
	364, // 359: octelium.api.main.core.v1.AccessLog.Entry.Common.startedAt:type_name -> google.protobuf.Timestamp
	364, // 360: octelium.api.main.core.v1.AccessLog.Entry.Common.endedAt:type_name -> google.protobuf.Timestamp
	32,  // 361: octelium.api.main.core.v1.AccessLog.Entry.Common.status:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common.Status
	1,   // 362: octelium.api.main.core.v1.AccessLog.Entry.Common.mode:type_name -> octelium.api.main.core.v1.Service.Spec.Mode
	277, // 363: octelium.api.main.core.v1.AccessLog.Entry.Common.reason:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common.Reason
	358, // 364: octelium.api.main.core.v1.AccessLog.Entry.Common.sessionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 365: octelium.api.main.core.v1.AccessLog.Entry.Common.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 366: octelium.api.main.core.v1.AccessLog.Entry.Common.deviceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 367: octelium.api.main.core.v1.AccessLog.Entry.Common.serviceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 368: octelium.api.main.core.v1.AccessLog.Entry.Common.namespaceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 369: octelium.api.main.core.v1.AccessLog.Entry.Common.regionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	260, // 370: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.request:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Request
	261, // 371: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.response:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Response
	24,  // 372: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.httpVersion:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.HTTPVersion
	25,  // 373: octelium.api.main.core.v1.AccessLog.Entry.Info.TCP.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.TCP.Type
	26,  // 374: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.Type
	264, // 375: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.start:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.Start
	268, // 376: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.directTCPIPStart:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.DirectTCPIPStart
	265, // 377: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.sessionRecording:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRecording
	266, // 378: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.sessionRequestExec:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRequestExec
	267, // 379: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.sessionRequestSubsystem:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRequestSubsystem
	28,  // 380: octelium.api.main.core.v1.AccessLog.Entry.Info.UDP.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.UDP.Type
	29,  // 381: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Type
	269, // 382: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.start:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Start
	270, // 383: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.query:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Query
	271, // 384: octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.parse:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.Postgres.Parse
	30,  // 385: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.Type
	272, // 386: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.query:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.Query
	273, // 387: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.initDB:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.InitDB
	274, // 388: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.createDB:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.CreateDB
	275, // 389: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.dropDB:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.DropDB
	276, // 390: octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.prepareStatement:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.MySQL.PrepareStatement
	251, // 391: octelium.api.main.core.v1.AccessLog.Entry.Info.Kubernetes.http:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP
	251, // 392: octelium.api.main.core.v1.AccessLog.Entry.Info.GRPC.http:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP
	31,  // 393: octelium.api.main.core.v1.AccessLog.Entry.Info.DNS.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.DNS.Type
	361, // 394: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Request.bodyMap:type_name -> google.protobuf.Struct
	262, // 395: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Request.headers:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Request.HeadersEntry
	361, // 396: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Response.bodyMap:type_name -> google.protobuf.Struct
	263, // 397: octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Response.headers:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.HTTP.Response.HeadersEntry
	27,  // 398: octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRecording.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Info.SSH.SessionRecording.Type
	33,  // 399: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.type:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Type
	278, // 400: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.details:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details
	279, // 401: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.policyMatch:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch
	281, // 402: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.policy:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.Policy
	280, // 403: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.inlinePolicy:type_name -> octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.InlinePolicy
	358, // 404: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.InlinePolicy.resourceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 405: octelium.api.main.core.v1.AccessLog.Entry.Common.Reason.Details.PolicyMatch.Policy.policyRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	288, // 406: octelium.api.main.core.v1.IdentityProvider.Spec.aalRules:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.AALRule
	289, // 407: octelium.api.main.core.v1.IdentityProvider.Spec.postAuthenticationRules:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.PostAuthenticationRule
	284, // 408: octelium.api.main.core.v1.IdentityProvider.Spec.github:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.Github
	285, // 409: octelium.api.main.core.v1.IdentityProvider.Spec.oidc:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.OIDC
	286, // 410: octelium.api.main.core.v1.IdentityProvider.Spec.saml:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.SAML
	287, // 411: octelium.api.main.core.v1.IdentityProvider.Spec.oidcIdentityToken:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.OIDCIdentityToken
	36,  // 412: octelium.api.main.core.v1.IdentityProvider.Status.type:type_name -> octelium.api.main.core.v1.IdentityProvider.Status.Type
	290, // 413: octelium.api.main.core.v1.IdentityProvider.Spec.Github.clientSecret:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.Github.ClientSecret
	291, // 414: octelium.api.main.core.v1.IdentityProvider.Spec.OIDC.clientSecret:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.OIDC.ClientSecret
	84,  // 415: octelium.api.main.core.v1.IdentityProvider.Spec.AALRule.condition:type_name -> octelium.api.main.core.v1.Condition
	34,  // 416: octelium.api.main.core.v1.IdentityProvider.Spec.AALRule.aal:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.AALRule.AAL
	84,  // 417: octelium.api.main.core.v1.IdentityProvider.Spec.PostAuthenticationRule.condition:type_name -> octelium.api.main.core.v1.Condition
	35,  // 418: octelium.api.main.core.v1.IdentityProvider.Spec.PostAuthenticationRule.effect:type_name -> octelium.api.main.core.v1.IdentityProvider.Spec.PostAuthenticationRule.Effect
	294, // 419: octelium.api.main.core.v1.Region.Status.ext:type_name -> octelium.api.main.core.v1.Region.Status.ExtEntry
	361, // 420: octelium.api.main.core.v1.Region.Status.ExtEntry.value:type_name -> google.protobuf.Struct
	358, // 421: octelium.api.main.core.v1.Gateway.Status.regionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 422: octelium.api.main.core.v1.Gateway.Status.nodeRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	365, // 423: octelium.api.main.core.v1.Gateway.Status.cidr:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	297, // 424: octelium.api.main.core.v1.Gateway.Status.wireguard:type_name -> octelium.api.main.core.v1.Gateway.Status.WireGuard
	298, // 425: octelium.api.main.core.v1.Gateway.Status.quicv0:type_name -> octelium.api.main.core.v1.Gateway.Status.QUICV0
	364, // 426: octelium.api.main.core.v1.Gateway.Status.WireGuard.keyRotatedAt:type_name -> google.protobuf.Timestamp
	84,  // 427: octelium.api.main.core.v1.Condition.All.of:type_name -> octelium.api.main.core.v1.Condition
	84,  // 428: octelium.api.main.core.v1.Condition.Any.of:type_name -> octelium.api.main.core.v1.Condition
	84,  // 429: octelium.api.main.core.v1.Condition.None.of:type_name -> octelium.api.main.core.v1.Condition
	310, // 430: octelium.api.main.core.v1.ClusterConfig.Spec.authorization:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Authorization
	305, // 431: octelium.api.main.core.v1.ClusterConfig.Spec.ingress:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Ingress
	306, // 432: octelium.api.main.core.v1.ClusterConfig.Spec.session:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Session
	307, // 433: octelium.api.main.core.v1.ClusterConfig.Spec.device:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Device
	308, // 434: octelium.api.main.core.v1.ClusterConfig.Spec.gateway:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Gateway
	309, // 435: octelium.api.main.core.v1.ClusterConfig.Spec.dns:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.DNS
	317, // 436: octelium.api.main.core.v1.ClusterConfig.Status.network:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.Network
	316, // 437: octelium.api.main.core.v1.ClusterConfig.Status.networkConfig:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig
	318, // 438: octelium.api.main.core.v1.ClusterConfig.Status.secretManager:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.SecretManager
	311, // 439: octelium.api.main.core.v1.ClusterConfig.Spec.Session.human:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Session.Human
	312, // 440: octelium.api.main.core.v1.ClusterConfig.Spec.Session.workload:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Session.Workload
	313, // 441: octelium.api.main.core.v1.ClusterConfig.Spec.Device.human:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Device.Human
	314, // 442: octelium.api.main.core.v1.ClusterConfig.Spec.Device.workload:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.Device.Workload
	362, // 443: octelium.api.main.core.v1.ClusterConfig.Spec.Gateway.wireguardKeyRotationDuration:type_name -> octelium.api.main.meta.v1.Duration
	315, // 444: octelium.api.main.core.v1.ClusterConfig.Spec.DNS.fallbackZone:type_name -> octelium.api.main.core.v1.ClusterConfig.Spec.DNS.Zone
	43,  // 445: octelium.api.main.core.v1.ClusterConfig.Spec.Authorization.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	362, // 446: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Human.clientDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 447: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Human.clientlessDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 448: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Human.accessTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 449: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Human.refreshTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	9,   // 450: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Human.defaultState:type_name -> octelium.api.main.core.v1.Session.Spec.State
	362, // 451: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Workload.clientDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 452: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Workload.clientlessDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 453: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Workload.accessTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	362, // 454: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Workload.refreshTokenDuration:type_name -> octelium.api.main.meta.v1.Duration
	9,   // 455: octelium.api.main.core.v1.ClusterConfig.Spec.Session.Workload.defaultState:type_name -> octelium.api.main.core.v1.Session.Spec.State
	20,  // 456: octelium.api.main.core.v1.ClusterConfig.Spec.Device.Human.defaultState:type_name -> octelium.api.main.core.v1.Device.Spec.State
	20,  // 457: octelium.api.main.core.v1.ClusterConfig.Spec.Device.Workload.defaultState:type_name -> octelium.api.main.core.v1.Device.Spec.State
	362, // 458: octelium.api.main.core.v1.ClusterConfig.Spec.DNS.Zone.cacheDuration:type_name -> octelium.api.main.meta.v1.Duration
	37,  // 459: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.mode:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.Mode
	319, // 460: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.v4:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.V4
	320, // 461: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.v6:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.V6
	321, // 462: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.wireguard:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.Wireguard
	322, // 463: octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.quicv0:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.NetworkConfig.QUICV0
	365, // 464: octelium.api.main.core.v1.ClusterConfig.Status.Network.clusterNetwork:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	365, // 465: octelium.api.main.core.v1.ClusterConfig.Status.Network.wgConnSubnet:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	365, // 466: octelium.api.main.core.v1.ClusterConfig.Status.Network.serviceSubnet:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	365, // 467: octelium.api.main.core.v1.ClusterConfig.Status.Network.quicConnSubnet:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	323, // 468: octelium.api.main.core.v1.ClusterConfig.Status.SecretManager.tls:type_name -> octelium.api.main.core.v1.ClusterConfig.Status.SecretManager.TLS
	325, // 469: octelium.api.main.core.v1.RequestContext.Request.http:type_name -> octelium.api.main.core.v1.RequestContext.Request.HTTP
	326, // 470: octelium.api.main.core.v1.RequestContext.Request.ssh:type_name -> octelium.api.main.core.v1.RequestContext.Request.SSH
	327, // 471: octelium.api.main.core.v1.RequestContext.Request.kubernetes:type_name -> octelium.api.main.core.v1.RequestContext.Request.Kubernetes
	328, // 472: octelium.api.main.core.v1.RequestContext.Request.grpc:type_name -> octelium.api.main.core.v1.RequestContext.Request.GRPC
	329, // 473: octelium.api.main.core.v1.RequestContext.Request.postgres:type_name -> octelium.api.main.core.v1.RequestContext.Request.Postgres
	330, // 474: octelium.api.main.core.v1.RequestContext.Request.dns:type_name -> octelium.api.main.core.v1.RequestContext.Request.DNS
	331, // 475: octelium.api.main.core.v1.RequestContext.Request.HTTP.headers:type_name -> octelium.api.main.core.v1.RequestContext.Request.HTTP.HeadersEntry
	361, // 476: octelium.api.main.core.v1.RequestContext.Request.HTTP.bodyMap:type_name -> google.protobuf.Struct
	332, // 477: octelium.api.main.core.v1.RequestContext.Request.HTTP.queryParams:type_name -> octelium.api.main.core.v1.RequestContext.Request.HTTP.QueryParamsEntry
	333, // 478: octelium.api.main.core.v1.RequestContext.Request.SSH.connect:type_name -> octelium.api.main.core.v1.RequestContext.Request.SSH.Connect
	325, // 479: octelium.api.main.core.v1.RequestContext.Request.Kubernetes.http:type_name -> octelium.api.main.core.v1.RequestContext.Request.HTTP
	325, // 480: octelium.api.main.core.v1.RequestContext.Request.GRPC.http:type_name -> octelium.api.main.core.v1.RequestContext.Request.HTTP
	334, // 481: octelium.api.main.core.v1.RequestContext.Request.Postgres.connect:type_name -> octelium.api.main.core.v1.RequestContext.Request.Postgres.Connect
	335, // 482: octelium.api.main.core.v1.RequestContext.Request.Postgres.query:type_name -> octelium.api.main.core.v1.RequestContext.Request.Postgres.Query
	336, // 483: octelium.api.main.core.v1.RequestContext.Request.Postgres.parse:type_name -> octelium.api.main.core.v1.RequestContext.Request.Postgres.Parse
	358, // 484: octelium.api.main.core.v1.PolicyTrigger.Status.ownerRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	339, // 485: octelium.api.main.core.v1.PolicyTrigger.Status.preCondition:type_name -> octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition
	43,  // 486: octelium.api.main.core.v1.PolicyTrigger.Status.inlinePolicies:type_name -> octelium.api.main.core.v1.InlinePolicy
	364, // 487: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.notBefore:type_name -> google.protobuf.Timestamp
	364, // 488: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.notAfter:type_name -> google.protobuf.Timestamp
	358, // 489: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.sessionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 490: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	84,  // 491: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.condition:type_name -> octelium.api.main.core.v1.Condition
	340, // 492: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.any:type_name -> octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.Any
	341, // 493: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.all:type_name -> octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.All
	339, // 494: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.Any.of:type_name -> octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition
	339, // 495: octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition.All.of:type_name -> octelium.api.main.core.v1.PolicyTrigger.Status.PreCondition
	38,  // 496: octelium.api.main.core.v1.ComponentLog.Entry.level:type_name -> octelium.api.main.core.v1.ComponentLog.Entry.Level
	343, // 497: octelium.api.main.core.v1.ComponentLog.Entry.component:type_name -> octelium.api.main.core.v1.ComponentLog.Entry.Component
	361, // 498: octelium.api.main.core.v1.ComponentLog.Entry.fields:type_name -> google.protobuf.Struct
	364, // 499: octelium.api.main.core.v1.ComponentLog.Entry.time:type_name -> google.protobuf.Timestamp
	358, // 500: octelium.api.main.core.v1.Authenticator.Status.userRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	358, // 501: octelium.api.main.core.v1.Authenticator.Status.deviceRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	39,  // 502: octelium.api.main.core.v1.Authenticator.Status.type:type_name -> octelium.api.main.core.v1.Authenticator.Status.Type
	347, // 503: octelium.api.main.core.v1.Authenticator.Status.info:type_name -> octelium.api.main.core.v1.Authenticator.Status.Info
	348, // 504: octelium.api.main.core.v1.Authenticator.Status.authenticationAttempt:type_name -> octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt
	348, // 505: octelium.api.main.core.v1.Authenticator.Status.lastAuthenticationAttempts:type_name -> octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt
	349, // 506: octelium.api.main.core.v1.Authenticator.Status.ext:type_name -> octelium.api.main.core.v1.Authenticator.Status.ExtEntry
	358, // 507: octelium.api.main.core.v1.Authenticator.Status.EncryptedData.keySecretRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	350, // 508: octelium.api.main.core.v1.Authenticator.Status.Info.fido:type_name -> octelium.api.main.core.v1.Authenticator.Status.Info.FIDO
	351, // 509: octelium.api.main.core.v1.Authenticator.Status.Info.totp:type_name -> octelium.api.main.core.v1.Authenticator.Status.Info.TOTP
	352, // 510: octelium.api.main.core.v1.Authenticator.Status.Info.tpm:type_name -> octelium.api.main.core.v1.Authenticator.Status.Info.TPM
	364, // 511: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.createdAt:type_name -> google.protobuf.Timestamp
	346, // 512: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.encryptedChallengeRequest:type_name -> octelium.api.main.core.v1.Authenticator.Status.EncryptedData
	354, // 513: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.encryptedDataMap:type_name -> octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.EncryptedDataMapEntry
	355, // 514: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.dataMap:type_name -> octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.DataMapEntry
	358, // 515: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.sessionRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	361, // 516: octelium.api.main.core.v1.Authenticator.Status.ExtEntry.value:type_name -> google.protobuf.Struct
	40,  // 517: octelium.api.main.core.v1.Authenticator.Status.Info.FIDO.type:type_name -> octelium.api.main.core.v1.Authenticator.Status.Info.FIDO.Type
	346, // 518: octelium.api.main.core.v1.Authenticator.Status.Info.TOTP.sharedSecret:type_name -> octelium.api.main.core.v1.Authenticator.Status.EncryptedData
	353, // 519: octelium.api.main.core.v1.Authenticator.Status.Info.TPM.attestationParameters:type_name -> octelium.api.main.core.v1.Authenticator.Status.Info.TPM.AttestationParameters
	346, // 520: octelium.api.main.core.v1.Authenticator.Status.AuthenticationAttempt.EncryptedDataMapEntry.value:type_name -> octelium.api.main.core.v1.Authenticator.Status.EncryptedData
	71,  // 521: octelium.api.main.core.v1.MainService.CreatePolicy:input_type -> octelium.api.main.core.v1.Policy
	73,  // 522: octelium.api.main.core.v1.MainService.ListPolicy:input_type -> octelium.api.main.core.v1.ListPolicyOptions
	71,  // 523: octelium.api.main.core.v1.MainService.UpdatePolicy:input_type -> octelium.api.main.core.v1.Policy
	366, // 524: octelium.api.main.core.v1.MainService.DeletePolicy:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 525: octelium.api.main.core.v1.MainService.GetPolicy:input_type -> octelium.api.main.meta.v1.GetOptions
	44,  // 526: octelium.api.main.core.v1.MainService.CreateUser:input_type -> octelium.api.main.core.v1.User
	60,  // 527: octelium.api.main.core.v1.MainService.ListUser:input_type -> octelium.api.main.core.v1.ListUserOptions
	44,  // 528: octelium.api.main.core.v1.MainService.UpdateUser:input_type -> octelium.api.main.core.v1.User
	366, // 529: octelium.api.main.core.v1.MainService.DeleteUser:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 530: octelium.api.main.core.v1.MainService.GetUser:input_type -> octelium.api.main.meta.v1.GetOptions
	41,  // 531: octelium.api.main.core.v1.MainService.CreateNamespace:input_type -> octelium.api.main.core.v1.Namespace
	41,  // 532: octelium.api.main.core.v1.MainService.UpdateNamespace:input_type -> octelium.api.main.core.v1.Namespace
	61,  // 533: octelium.api.main.core.v1.MainService.ListNamespace:input_type -> octelium.api.main.core.v1.ListNamespaceOptions
	366, // 534: octelium.api.main.core.v1.MainService.DeleteNamespace:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 535: octelium.api.main.core.v1.MainService.GetNamespace:input_type -> octelium.api.main.meta.v1.GetOptions
	46,  // 536: octelium.api.main.core.v1.MainService.CreateService:input_type -> octelium.api.main.core.v1.Service
	62,  // 537: octelium.api.main.core.v1.MainService.ListService:input_type -> octelium.api.main.core.v1.ListServiceOptions
	46,  // 538: octelium.api.main.core.v1.MainService.UpdateService:input_type -> octelium.api.main.core.v1.Service
	366, // 539: octelium.api.main.core.v1.MainService.DeleteService:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 540: octelium.api.main.core.v1.MainService.GetService:input_type -> octelium.api.main.meta.v1.GetOptions
	63,  // 541: octelium.api.main.core.v1.MainService.ListSession:input_type -> octelium.api.main.core.v1.ListSessionOptions
	366, // 542: octelium.api.main.core.v1.MainService.DeleteSession:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 543: octelium.api.main.core.v1.MainService.GetSession:input_type -> octelium.api.main.meta.v1.GetOptions
	50,  // 544: octelium.api.main.core.v1.MainService.UpdateSession:input_type -> octelium.api.main.core.v1.Session
	52,  // 545: octelium.api.main.core.v1.MainService.CreateSecret:input_type -> octelium.api.main.core.v1.Secret
	64,  // 546: octelium.api.main.core.v1.MainService.ListSecret:input_type -> octelium.api.main.core.v1.ListSecretOptions
	366, // 547: octelium.api.main.core.v1.MainService.DeleteSecret:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 548: octelium.api.main.core.v1.MainService.GetSecret:input_type -> octelium.api.main.meta.v1.GetOptions
	52,  // 549: octelium.api.main.core.v1.MainService.UpdateSecret:input_type -> octelium.api.main.core.v1.Secret
	56,  // 550: octelium.api.main.core.v1.MainService.CreateGroup:input_type -> octelium.api.main.core.v1.Group
	66,  // 551: octelium.api.main.core.v1.MainService.ListGroup:input_type -> octelium.api.main.core.v1.ListGroupOptions
	56,  // 552: octelium.api.main.core.v1.MainService.UpdateGroup:input_type -> octelium.api.main.core.v1.Group
	366, // 553: octelium.api.main.core.v1.MainService.DeleteGroup:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 554: octelium.api.main.core.v1.MainService.GetGroup:input_type -> octelium.api.main.meta.v1.GetOptions
	67,  // 555: octelium.api.main.core.v1.MainService.ListDevice:input_type -> octelium.api.main.core.v1.ListDeviceOptions
	366, // 556: octelium.api.main.core.v1.MainService.DeleteDevice:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 557: octelium.api.main.core.v1.MainService.GetDevice:input_type -> octelium.api.main.meta.v1.GetOptions
	58,  // 558: octelium.api.main.core.v1.MainService.UpdateDevice:input_type -> octelium.api.main.core.v1.Device
	54,  // 559: octelium.api.main.core.v1.MainService.CreateCredential:input_type -> octelium.api.main.core.v1.Credential
	54,  // 560: octelium.api.main.core.v1.MainService.UpdateCredential:input_type -> octelium.api.main.core.v1.Credential
	366, // 561: octelium.api.main.core.v1.MainService.DeleteCredential:input_type -> octelium.api.main.meta.v1.DeleteOptions
	65,  // 562: octelium.api.main.core.v1.MainService.ListCredential:input_type -> octelium.api.main.core.v1.ListCredentialOptions
	367, // 563: octelium.api.main.core.v1.MainService.GetCredential:input_type -> octelium.api.main.meta.v1.GetOptions
	48,  // 564: octelium.api.main.core.v1.MainService.GenerateCredentialToken:input_type -> octelium.api.main.core.v1.GenerateCredentialTokenRequest
	76,  // 565: octelium.api.main.core.v1.MainService.CreateIdentityProvider:input_type -> octelium.api.main.core.v1.IdentityProvider
	367, // 566: octelium.api.main.core.v1.MainService.GetIdentityProvider:input_type -> octelium.api.main.meta.v1.GetOptions
	75,  // 567: octelium.api.main.core.v1.MainService.ListIdentityProvider:input_type -> octelium.api.main.core.v1.ListIdentityProviderOptions
	76,  // 568: octelium.api.main.core.v1.MainService.UpdateIdentityProvider:input_type -> octelium.api.main.core.v1.IdentityProvider
	366, // 569: octelium.api.main.core.v1.MainService.DeleteIdentityProvider:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 570: octelium.api.main.core.v1.MainService.GetRegion:input_type -> octelium.api.main.meta.v1.GetOptions
	83,  // 571: octelium.api.main.core.v1.MainService.ListRegion:input_type -> octelium.api.main.core.v1.ListRegionOptions
	82,  // 572: octelium.api.main.core.v1.MainService.ListGateway:input_type -> octelium.api.main.core.v1.ListGatewayOptions
	367, // 573: octelium.api.main.core.v1.MainService.GetGateway:input_type -> octelium.api.main.meta.v1.GetOptions
	85,  // 574: octelium.api.main.core.v1.MainService.GetClusterConfig:input_type -> octelium.api.main.core.v1.GetClusterConfigRequest
	86,  // 575: octelium.api.main.core.v1.MainService.UpdateClusterConfig:input_type -> octelium.api.main.core.v1.ClusterConfig
	93,  // 576: octelium.api.main.core.v1.MainService.ListAuthenticator:input_type -> octelium.api.main.core.v1.ListAuthenticatorOptions
	366, // 577: octelium.api.main.core.v1.MainService.DeleteAuthenticator:input_type -> octelium.api.main.meta.v1.DeleteOptions
	367, // 578: octelium.api.main.core.v1.MainService.GetAuthenticator:input_type -> octelium.api.main.meta.v1.GetOptions
	71,  // 579: octelium.api.main.core.v1.MainService.CreatePolicy:output_type -> octelium.api.main.core.v1.Policy
	72,  // 580: octelium.api.main.core.v1.MainService.ListPolicy:output_type -> octelium.api.main.core.v1.PolicyList
	71,  // 581: octelium.api.main.core.v1.MainService.UpdatePolicy:output_type -> octelium.api.main.core.v1.Policy
	368, // 582: octelium.api.main.core.v1.MainService.DeletePolicy:output_type -> octelium.api.main.meta.v1.OperationResult
	71,  // 583: octelium.api.main.core.v1.MainService.GetPolicy:output_type -> octelium.api.main.core.v1.Policy
	44,  // 584: octelium.api.main.core.v1.MainService.CreateUser:output_type -> octelium.api.main.core.v1.User
	45,  // 585: octelium.api.main.core.v1.MainService.ListUser:output_type -> octelium.api.main.core.v1.UserList
	44,  // 586: octelium.api.main.core.v1.MainService.UpdateUser:output_type -> octelium.api.main.core.v1.User
	368, // 587: octelium.api.main.core.v1.MainService.DeleteUser:output_type -> octelium.api.main.meta.v1.OperationResult
	44,  // 588: octelium.api.main.core.v1.MainService.GetUser:output_type -> octelium.api.main.core.v1.User
	41,  // 589: octelium.api.main.core.v1.MainService.CreateNamespace:output_type -> octelium.api.main.core.v1.Namespace
	41,  // 590: octelium.api.main.core.v1.MainService.UpdateNamespace:output_type -> octelium.api.main.core.v1.Namespace
	42,  // 591: octelium.api.main.core.v1.MainService.ListNamespace:output_type -> octelium.api.main.core.v1.NamespaceList
	368, // 592: octelium.api.main.core.v1.MainService.DeleteNamespace:output_type -> octelium.api.main.meta.v1.OperationResult
	41,  // 593: octelium.api.main.core.v1.MainService.GetNamespace:output_type -> octelium.api.main.core.v1.Namespace
	46,  // 594: octelium.api.main.core.v1.MainService.CreateService:output_type -> octelium.api.main.core.v1.Service
	47,  // 595: octelium.api.main.core.v1.MainService.ListService:output_type -> octelium.api.main.core.v1.ServiceList
	46,  // 596: octelium.api.main.core.v1.MainService.UpdateService:output_type -> octelium.api.main.core.v1.Service
	368, // 597: octelium.api.main.core.v1.MainService.DeleteService:output_type -> octelium.api.main.meta.v1.OperationResult
	46,  // 598: octelium.api.main.core.v1.MainService.GetService:output_type -> octelium.api.main.core.v1.Service
	51,  // 599: octelium.api.main.core.v1.MainService.ListSession:output_type -> octelium.api.main.core.v1.SessionList
	368, // 600: octelium.api.main.core.v1.MainService.DeleteSession:output_type -> octelium.api.main.meta.v1.OperationResult
	50,  // 601: octelium.api.main.core.v1.MainService.GetSession:output_type -> octelium.api.main.core.v1.Session
	50,  // 602: octelium.api.main.core.v1.MainService.UpdateSession:output_type -> octelium.api.main.core.v1.Session
	52,  // 603: octelium.api.main.core.v1.MainService.CreateSecret:output_type -> octelium.api.main.core.v1.Secret
	53,  // 604: octelium.api.main.core.v1.MainService.ListSecret:output_type -> octelium.api.main.core.v1.SecretList
	368, // 605: octelium.api.main.core.v1.MainService.DeleteSecret:output_type -> octelium.api.main.meta.v1.OperationResult
	52,  // 606: octelium.api.main.core.v1.MainService.GetSecret:output_type -> octelium.api.main.core.v1.Secret
	52,  // 607: octelium.api.main.core.v1.MainService.UpdateSecret:output_type -> octelium.api.main.core.v1.Secret
	56,  // 608: octelium.api.main.core.v1.MainService.CreateGroup:output_type -> octelium.api.main.core.v1.Group
	57,  // 609: octelium.api.main.core.v1.MainService.ListGroup:output_type -> octelium.api.main.core.v1.GroupList
	56,  // 610: octelium.api.main.core.v1.MainService.UpdateGroup:output_type -> octelium.api.main.core.v1.Group
	368, // 611: octelium.api.main.core.v1.MainService.DeleteGroup:output_type -> octelium.api.main.meta.v1.OperationResult
	56,  // 612: octelium.api.main.core.v1.MainService.GetGroup:output_type -> octelium.api.main.core.v1.Group
	59,  // 613: octelium.api.main.core.v1.MainService.ListDevice:output_type -> octelium.api.main.core.v1.DeviceList
	368, // 614: octelium.api.main.core.v1.MainService.DeleteDevice:output_type -> octelium.api.main.meta.v1.OperationResult
	58,  // 615: octelium.api.main.core.v1.MainService.GetDevice:output_type -> octelium.api.main.core.v1.Device
	58,  // 616: octelium.api.main.core.v1.MainService.UpdateDevice:output_type -> octelium.api.main.core.v1.Device
	54,  // 617: octelium.api.main.core.v1.MainService.CreateCredential:output_type -> octelium.api.main.core.v1.Credential
	54,  // 618: octelium.api.main.core.v1.MainService.UpdateCredential:output_type -> octelium.api.main.core.v1.Credential
	368, // 619: octelium.api.main.core.v1.MainService.DeleteCredential:output_type -> octelium.api.main.meta.v1.OperationResult
	55,  // 620: octelium.api.main.core.v1.MainService.ListCredential:output_type -> octelium.api.main.core.v1.CredentialList
	54,  // 621: octelium.api.main.core.v1.MainService.GetCredential:output_type -> octelium.api.main.core.v1.Credential
	49,  // 622: octelium.api.main.core.v1.MainService.GenerateCredentialToken:output_type -> octelium.api.main.core.v1.CredentialToken
	76,  // 623: octelium.api.main.core.v1.MainService.CreateIdentityProvider:output_type -> octelium.api.main.core.v1.IdentityProvider
	76,  // 624: octelium.api.main.core.v1.MainService.GetIdentityProvider:output_type -> octelium.api.main.core.v1.IdentityProvider
	77,  // 625: octelium.api.main.core.v1.MainService.ListIdentityProvider:output_type -> octelium.api.main.core.v1.IdentityProviderList
	76,  // 626: octelium.api.main.core.v1.MainService.UpdateIdentityProvider:output_type -> octelium.api.main.core.v1.IdentityProvider
	368, // 627: octelium.api.main.core.v1.MainService.DeleteIdentityProvider:output_type -> octelium.api.main.meta.v1.OperationResult
	78,  // 628: octelium.api.main.core.v1.MainService.GetRegion:output_type -> octelium.api.main.core.v1.Region
	79,  // 629: octelium.api.main.core.v1.MainService.ListRegion:output_type -> octelium.api.main.core.v1.RegionList
	81,  // 630: octelium.api.main.core.v1.MainService.ListGateway:output_type -> octelium.api.main.core.v1.GatewayList
	80,  // 631: octelium.api.main.core.v1.MainService.GetGateway:output_type -> octelium.api.main.core.v1.Gateway
	86,  // 632: octelium.api.main.core.v1.MainService.GetClusterConfig:output_type -> octelium.api.main.core.v1.ClusterConfig
	86,  // 633: octelium.api.main.core.v1.MainService.UpdateClusterConfig:output_type -> octelium.api.main.core.v1.ClusterConfig
	92,  // 634: octelium.api.main.core.v1.MainService.ListAuthenticator:output_type -> octelium.api.main.core.v1.AuthenticatorList
	368, // 635: octelium.api.main.core.v1.MainService.DeleteAuthenticator:output_type -> octelium.api.main.meta.v1.OperationResult
	91,  // 636: octelium.api.main.core.v1.MainService.GetAuthenticator:output_type -> octelium.api.main.core.v1.Authenticator
	579, // [579:637] is the sub-list for method output_type
	521, // [521:579] is the sub-list for method input_type
	521, // [521:521] is the sub-list for extension type_name
	521, // [521:521] is the sub-list for extension extendee
	0,   // [0:521] is the sub-list for field type_name
}

func init() { file_corev1_proto_init() }
func file_corev1_proto_init() {
	if File_corev1_proto != nil {
		return
	}
	file_corev1_proto_msgTypes[8].OneofWrappers = []any{
		(*CredentialToken_AuthenticationToken_)(nil),
		(*CredentialToken_Oauth2Credentials)(nil),
		(*CredentialToken_AccessToken_)(nil),
	}
	file_corev1_proto_msgTypes[29].OneofWrappers = []any{
		(*Scope_Service_)(nil),
		(*Scope_Api)(nil),
	}
	file_corev1_proto_msgTypes[43].OneofWrappers = []any{
		(*Condition_MatchAny)(nil),
		(*Condition_Match)(nil),
		(*Condition_All_)(nil),
		(*Condition_Any_)(nil),
		(*Condition_Not)(nil),
		(*Condition_None_)(nil),
		(*Condition_Opa)(nil),
	}
	file_corev1_proto_msgTypes[67].OneofWrappers = []any{
		(*Service_Spec_Config_Http)(nil),
		(*Service_Spec_Config_Ssh)(nil),
		(*Service_Spec_Config_Postgres_)(nil),
		(*Service_Spec_Config_Mysql)(nil),
		(*Service_Spec_Config_Kubernetes_)(nil),
	}
	file_corev1_proto_msgTypes[74].OneofWrappers = []any{
		(*Service_Spec_Config_ClientCertificate_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[76].OneofWrappers = []any{
		(*Service_Spec_Config_Kubernetes_Kubeconfig_)(nil),
		(*Service_Spec_Config_Kubernetes_BearerToken_)(nil),
		(*Service_Spec_Config_Kubernetes_ClientCertificate)(nil),
	}
	file_corev1_proto_msgTypes[77].OneofWrappers = []any{
		(*Service_Spec_Config_Upstream_Url)(nil),
		(*Service_Spec_Config_Upstream_Loadbalance_)(nil),
		(*Service_Spec_Config_Upstream_Container_)(nil),
	}
	file_corev1_proto_msgTypes[79].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Auth_Bearer_)(nil),
		(*Service_Spec_Config_HTTP_Auth_Basic_)(nil),
		(*Service_Spec_Config_HTTP_Auth_Custom_)(nil),
		(*Service_Spec_Config_HTTP_Auth_Oauth2ClientCredentials)(nil),
		(*Service_Spec_Config_HTTP_Auth_Sigv4_)(nil),
	}
	file_corev1_proto_msgTypes[83].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Response_Direct_)(nil),
	}
	file_corev1_proto_msgTypes[85].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Plugin_ExtProc_)(nil),
		(*Service_Spec_Config_HTTP_Plugin_Lua_)(nil),
		(*Service_Spec_Config_HTTP_Plugin_Direct_)(nil),
		(*Service_Spec_Config_HTTP_Plugin_RateLimit_)(nil),
		(*Service_Spec_Config_HTTP_Plugin_Cache_)(nil),
	}
	file_corev1_proto_msgTypes[87].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Auth_Bearer_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[92].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Auth_Basic_Password_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[93].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Auth_Custom_Value_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[94].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Auth_OAuth2ClientCredentials_ClientSecret_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[95].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Auth_Sigv4_SecretAccessKey_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[96].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Body_Validation_JsonSchema)(nil),
	}
	file_corev1_proto_msgTypes[97].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Body_Validation_JSONSchema_Inline)(nil),
	}
	file_corev1_proto_msgTypes[99].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Response_Direct_Inline)(nil),
		(*Service_Spec_Config_HTTP_Response_Direct_InlineBytes)(nil),
	}
	file_corev1_proto_msgTypes[100].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Plugin_ExtProc_Address)(nil),
		(*Service_Spec_Config_HTTP_Plugin_ExtProc_Container_)(nil),
	}
	file_corev1_proto_msgTypes[101].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Plugin_Lua_Inline)(nil),
	}
	file_corev1_proto_msgTypes[107].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Plugin_Direct_Body_Inline)(nil),
		(*Service_Spec_Config_HTTP_Plugin_Direct_Body_InlineBytes)(nil),
	}
	file_corev1_proto_msgTypes[109].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_Inline)(nil),
		(*Service_Spec_Config_HTTP_Plugin_RateLimit_Body_InlineBytes)(nil),
	}
	file_corev1_proto_msgTypes[110].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_Eval)(nil),
		(*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerSession)(nil),
		(*Service_Spec_Config_HTTP_Plugin_RateLimit_Key_PerUser)(nil),
	}
	file_corev1_proto_msgTypes[112].OneofWrappers = []any{
		(*Service_Spec_Config_HTTP_Plugin_Cache_Key_Eval)(nil),
	}
	file_corev1_proto_msgTypes[113].OneofWrappers = []any{
		(*Service_Spec_Config_SSH_Auth_Password_)(nil),
		(*Service_Spec_Config_SSH_Auth_PrivateKey_)(nil),
	}
	file_corev1_proto_msgTypes[114].OneofWrappers = []any{
		(*Service_Spec_Config_SSH_UpstreamHostKey_InsecureIgnoreHostKey)(nil),
		(*Service_Spec_Config_SSH_UpstreamHostKey_Key)(nil),
	}
	file_corev1_proto_msgTypes[116].OneofWrappers = []any{
		(*Service_Spec_Config_SSH_Auth_Password_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[117].OneofWrappers = []any{
		(*Service_Spec_Config_SSH_Auth_PrivateKey_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[118].OneofWrappers = []any{
		(*Service_Spec_Config_Postgres_Auth_Password_)(nil),
	}
	file_corev1_proto_msgTypes[120].OneofWrappers = []any{
		(*Service_Spec_Config_Postgres_Auth_Password_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[121].OneofWrappers = []any{
		(*Service_Spec_Config_MySQL_Auth_Password_)(nil),
	}
	file_corev1_proto_msgTypes[122].OneofWrappers = []any{
		(*Service_Spec_Config_MySQL_Auth_Password_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[123].OneofWrappers = []any{
		(*Service_Spec_Config_TLS_ClientCertificate_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[124].OneofWrappers = []any{
		(*Service_Spec_Config_Kubernetes_BearerToken_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[125].OneofWrappers = []any{
		(*Service_Spec_Config_Kubernetes_Kubeconfig_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[129].OneofWrappers = []any{
		(*Service_Spec_Config_Upstream_Container_Env_Value)(nil),
		(*Service_Spec_Config_Upstream_Container_Env_FromSecret)(nil),
		(*Service_Spec_Config_Upstream_Container_Env_KubernetesSecretRef_)(nil),
	}
	file_corev1_proto_msgTypes[130].OneofWrappers = []any{
		(*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_)(nil),
	}
	file_corev1_proto_msgTypes[133].OneofWrappers = []any{
		(*Service_Spec_Config_Upstream_Container_Volume_PersistentVolumeClaim_)(nil),
	}
	file_corev1_proto_msgTypes[135].OneofWrappers = []any{
		(*Service_Spec_Config_Upstream_Container_Probe_HttpGet)(nil),
		(*Service_Spec_Config_Upstream_Container_Probe_TcpSocket)(nil),
		(*Service_Spec_Config_Upstream_Container_Probe_Grpc)(nil),
	}
	file_corev1_proto_msgTypes[138].OneofWrappers = []any{
		(*Service_Spec_Config_Upstream_Container_Credentials_UsernamePassword_Password_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[149].OneofWrappers = []any{
		(*Service_Status_ManagedService_HealthCheck_Grpc)(nil),
	}
	file_corev1_proto_msgTypes[170].OneofWrappers = []any{
		(*Session_Status_Authentication_Info_External_)(nil),
		(*Session_Status_Authentication_Info_IdentityProvider_)(nil),
		(*Session_Status_Authentication_Info_Credential_)(nil),
		(*Session_Status_Authentication_Info_Authenticator_)(nil),
	}
	file_corev1_proto_msgTypes[178].OneofWrappers = []any{
		(*Secret_Data_Value)(nil),
		(*Secret_Data_ValueBytes)(nil),
	}
	file_corev1_proto_msgTypes[179].OneofWrappers = []any{
		(*Secret_Spec_Data_Value)(nil),
		(*Secret_Spec_Data_ValueBytes)(nil),
	}
	file_corev1_proto_msgTypes[194].OneofWrappers = []any{
		(*Config_Data_Value)(nil),
		(*Config_Data_ValueBytes)(nil),
		(*Config_Data_DataMap_)(nil),
		(*Config_Data_Attrs)(nil),
	}
	file_corev1_proto_msgTypes[197].OneofWrappers = []any{
		(*Scope_Service_All_)(nil),
		(*Scope_Service_Filter_)(nil),
	}
	file_corev1_proto_msgTypes[198].OneofWrappers = []any{
		(*Scope_API_All_)(nil),
		(*Scope_API_Filter_)(nil),
	}
	file_corev1_proto_msgTypes[208].OneofWrappers = []any{
		(*AccessLog_Entry_Info_Tcp)(nil),
		(*AccessLog_Entry_Info_Http)(nil),
		(*AccessLog_Entry_Info_Ssh)(nil),
		(*AccessLog_Entry_Info_Udp)(nil),
		(*AccessLog_Entry_Info_Postgres_)(nil),
		(*AccessLog_Entry_Info_Kubernetes_)(nil),
		(*AccessLog_Entry_Info_Grpc)(nil),
		(*AccessLog_Entry_Info_Mysql)(nil),
		(*AccessLog_Entry_Info_Dns)(nil),
	}
	file_corev1_proto_msgTypes[212].OneofWrappers = []any{
		(*AccessLog_Entry_Info_SSH_Start_)(nil),
		(*AccessLog_Entry_Info_SSH_DirectTCPIPStart_)(nil),
		(*AccessLog_Entry_Info_SSH_SessionRecording_)(nil),
		(*AccessLog_Entry_Info_SSH_SessionRequestExec_)(nil),
		(*AccessLog_Entry_Info_SSH_SessionRequestSubsystem_)(nil),
	}
	file_corev1_proto_msgTypes[214].OneofWrappers = []any{
		(*AccessLog_Entry_Info_Postgres_Start_)(nil),
		(*AccessLog_Entry_Info_Postgres_Query_)(nil),
		(*AccessLog_Entry_Info_Postgres_Parse_)(nil),
	}
	file_corev1_proto_msgTypes[215].OneofWrappers = []any{
		(*AccessLog_Entry_Info_MySQL_Query_)(nil),
		(*AccessLog_Entry_Info_MySQL_InitDB_)(nil),
		(*AccessLog_Entry_Info_MySQL_CreateDB_)(nil),
		(*AccessLog_Entry_Info_MySQL_DropDB_)(nil),
		(*AccessLog_Entry_Info_MySQL_PrepareStatement_)(nil),
	}
	file_corev1_proto_msgTypes[237].OneofWrappers = []any{
		(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_)(nil),
	}
	file_corev1_proto_msgTypes[238].OneofWrappers = []any{
		(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_Policy_)(nil),
		(*AccessLog_Entry_Common_Reason_Details_PolicyMatch_InlinePolicy_)(nil),
	}
	file_corev1_proto_msgTypes[241].OneofWrappers = []any{
		(*IdentityProvider_Spec_Github_)(nil),
		(*IdentityProvider_Spec_Oidc)(nil),
		(*IdentityProvider_Spec_Saml)(nil),
		(*IdentityProvider_Spec_OidcIdentityToken)(nil),
	}
	file_corev1_proto_msgTypes[245].OneofWrappers = []any{
		(*IdentityProvider_Spec_SAML_MetadataURL)(nil),
		(*IdentityProvider_Spec_SAML_Metadata)(nil),
	}
	file_corev1_proto_msgTypes[246].OneofWrappers = []any{
		(*IdentityProvider_Spec_OIDCIdentityToken_IssuerURL)(nil),
		(*IdentityProvider_Spec_OIDCIdentityToken_JwksURL)(nil),
		(*IdentityProvider_Spec_OIDCIdentityToken_JwksContent)(nil),
	}
	file_corev1_proto_msgTypes[249].OneofWrappers = []any{
		(*IdentityProvider_Spec_Github_ClientSecret_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[250].OneofWrappers = []any{
		(*IdentityProvider_Spec_OIDC_ClientSecret_FromSecret)(nil),
	}
	file_corev1_proto_msgTypes[261].OneofWrappers = []any{
		(*Condition_OPA_Inline)(nil),
	}
	file_corev1_proto_msgTypes[283].OneofWrappers = []any{
		(*RequestContext_Request_Http)(nil),
		(*RequestContext_Request_Ssh)(nil),
		(*RequestContext_Request_Kubernetes_)(nil),
		(*RequestContext_Request_Grpc)(nil),
		(*RequestContext_Request_Postgres_)(nil),
		(*RequestContext_Request_Dns)(nil),
	}
	file_corev1_proto_msgTypes[285].OneofWrappers = []any{
		(*RequestContext_Request_SSH_Connect_)(nil),
	}
	file_corev1_proto_msgTypes[288].OneofWrappers = []any{
		(*RequestContext_Request_Postgres_Connect_)(nil),
		(*RequestContext_Request_Postgres_Query_)(nil),
		(*RequestContext_Request_Postgres_Parse_)(nil),
	}
	file_corev1_proto_msgTypes[298].OneofWrappers = []any{
		(*PolicyTrigger_Status_PreCondition_NotBefore)(nil),
		(*PolicyTrigger_Status_PreCondition_NotAfter)(nil),
		(*PolicyTrigger_Status_PreCondition_SessionRef)(nil),
		(*PolicyTrigger_Status_PreCondition_UserRef)(nil),
		(*PolicyTrigger_Status_PreCondition_MatchAny)(nil),
		(*PolicyTrigger_Status_PreCondition_Condition)(nil),
		(*PolicyTrigger_Status_PreCondition_Any_)(nil),
		(*PolicyTrigger_Status_PreCondition_All_)(nil),
	}
	file_corev1_proto_msgTypes[306].OneofWrappers = []any{
		(*Authenticator_Status_Info_Fido)(nil),
		(*Authenticator_Status_Info_Totp)(nil),
		(*Authenticator_Status_Info_Tpm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_corev1_proto_rawDesc,
			NumEnums:      41,
			NumMessages:   315,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_corev1_proto_goTypes,
		DependencyIndexes: file_corev1_proto_depIdxs,
		EnumInfos:         file_corev1_proto_enumTypes,
		MessageInfos:      file_corev1_proto_msgTypes,
	}.Build()
	File_corev1_proto = out.File
	file_corev1_proto_rawDesc = nil
	file_corev1_proto_goTypes = nil
	file_corev1_proto_depIdxs = nil
}
