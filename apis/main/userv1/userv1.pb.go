// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: userv1.proto

package userv1

import (
	metav1 "github.com/octelium/octelium/apis/main/metav1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetStatusResponse_Session_Status_Type int32

const (
	GetStatusResponse_Session_Status_UNKNOWN GetStatusResponse_Session_Status_Type = 0
	// CLIENT is meant for client-based Sessions (i.e. the octelium client)
	GetStatusResponse_Session_Status_CLIENT GetStatusResponse_Session_Status_Type = 1
	// CLIENTLESS is meant for client-less/BeyondCorp-based Sessions
	GetStatusResponse_Session_Status_CLIENTLESS GetStatusResponse_Session_Status_Type = 2
)

// Enum value maps for GetStatusResponse_Session_Status_Type.
var (
	GetStatusResponse_Session_Status_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "CLIENT",
		2: "CLIENTLESS",
	}
	GetStatusResponse_Session_Status_Type_value = map[string]int32{
		"UNKNOWN":    0,
		"CLIENT":     1,
		"CLIENTLESS": 2,
	}
)

func (x GetStatusResponse_Session_Status_Type) Enum() *GetStatusResponse_Session_Status_Type {
	p := new(GetStatusResponse_Session_Status_Type)
	*p = x
	return p
}

func (x GetStatusResponse_Session_Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetStatusResponse_Session_Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_userv1_proto_enumTypes[0].Descriptor()
}

func (GetStatusResponse_Session_Status_Type) Type() protoreflect.EnumType {
	return &file_userv1_proto_enumTypes[0]
}

func (x GetStatusResponse_Session_Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetStatusResponse_Session_Status_Type.Descriptor instead.
func (GetStatusResponse_Session_Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 1, 1, 0}
}

type ConnectRequest_Initialize_L3Mode int32

const (
	// BOTH informs the Cluster that the Connection is ready for dual-stack.
	ConnectRequest_Initialize_BOTH ConnectRequest_Initialize_L3Mode = 0
	// V4 informs the Cluster that the Connection only accepts IPv4.
	ConnectRequest_Initialize_V4 ConnectRequest_Initialize_L3Mode = 1
	// V6 informs the Cluster that the Connection only accepts IPv6.
	ConnectRequest_Initialize_V6 ConnectRequest_Initialize_L3Mode = 2
)

// Enum value maps for ConnectRequest_Initialize_L3Mode.
var (
	ConnectRequest_Initialize_L3Mode_name = map[int32]string{
		0: "BOTH",
		1: "V4",
		2: "V6",
	}
	ConnectRequest_Initialize_L3Mode_value = map[string]int32{
		"BOTH": 0,
		"V4":   1,
		"V6":   2,
	}
)

func (x ConnectRequest_Initialize_L3Mode) Enum() *ConnectRequest_Initialize_L3Mode {
	p := new(ConnectRequest_Initialize_L3Mode)
	*p = x
	return p
}

func (x ConnectRequest_Initialize_L3Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectRequest_Initialize_L3Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_userv1_proto_enumTypes[1].Descriptor()
}

func (ConnectRequest_Initialize_L3Mode) Type() protoreflect.EnumType {
	return &file_userv1_proto_enumTypes[1]
}

func (x ConnectRequest_Initialize_L3Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectRequest_Initialize_L3Mode.Descriptor instead.
func (ConnectRequest_Initialize_L3Mode) EnumDescriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{4, 0, 0}
}

type ConnectRequest_Initialize_ConnectionType int32

const (
	// UNSET is not used
	ConnectRequest_Initialize_UNSET ConnectRequest_Initialize_ConnectionType = 0
	// WIREGUARD means that the connection is WireGuard
	ConnectRequest_Initialize_WIREGUARD ConnectRequest_Initialize_ConnectionType = 1
	// QUICV0 means that the connection is QUICv0
	ConnectRequest_Initialize_QUICV0 ConnectRequest_Initialize_ConnectionType = 2
)

// Enum value maps for ConnectRequest_Initialize_ConnectionType.
var (
	ConnectRequest_Initialize_ConnectionType_name = map[int32]string{
		0: "UNSET",
		1: "WIREGUARD",
		2: "QUICV0",
	}
	ConnectRequest_Initialize_ConnectionType_value = map[string]int32{
		"UNSET":     0,
		"WIREGUARD": 1,
		"QUICV0":    2,
	}
)

func (x ConnectRequest_Initialize_ConnectionType) Enum() *ConnectRequest_Initialize_ConnectionType {
	p := new(ConnectRequest_Initialize_ConnectionType)
	*p = x
	return p
}

func (x ConnectRequest_Initialize_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectRequest_Initialize_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_userv1_proto_enumTypes[2].Descriptor()
}

func (ConnectRequest_Initialize_ConnectionType) Type() protoreflect.EnumType {
	return &file_userv1_proto_enumTypes[2]
}

func (x ConnectRequest_Initialize_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectRequest_Initialize_ConnectionType.Descriptor instead.
func (ConnectRequest_Initialize_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{4, 0, 1}
}

type HostedService_L4Type int32

const (
	// L4_UNKNOWN is not used
	HostedService_L4_UNKNOWN HostedService_L4Type = 0
	// TCP means that the Service is TCP-based
	HostedService_TCP HostedService_L4Type = 1
	// UDP means that the Service is UDP-based
	HostedService_UDP HostedService_L4Type = 2
)

// Enum value maps for HostedService_L4Type.
var (
	HostedService_L4Type_name = map[int32]string{
		0: "L4_UNKNOWN",
		1: "TCP",
		2: "UDP",
	}
	HostedService_L4Type_value = map[string]int32{
		"L4_UNKNOWN": 0,
		"TCP":        1,
		"UDP":        2,
	}
)

func (x HostedService_L4Type) Enum() *HostedService_L4Type {
	p := new(HostedService_L4Type)
	*p = x
	return p
}

func (x HostedService_L4Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostedService_L4Type) Descriptor() protoreflect.EnumDescriptor {
	return file_userv1_proto_enumTypes[3].Descriptor()
}

func (HostedService_L4Type) Type() protoreflect.EnumType {
	return &file_userv1_proto_enumTypes[3]
}

func (x HostedService_L4Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostedService_L4Type.Descriptor instead.
func (HostedService_L4Type) EnumDescriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{9, 0}
}

type HostedService_Mode int32

const (
	// MODE_UNSET is not used
	HostedService_MODE_UNSET HostedService_Mode = 0
	// MODE_DEFAULT means that the hosted Service is served by an upstream
	HostedService_MODE_DEFAULT HostedService_Mode = 1
	// MODE_ESSH means that the host Service is served by the embedded SSH
	// server
	HostedService_MODE_ESSH HostedService_Mode = 2
)

// Enum value maps for HostedService_Mode.
var (
	HostedService_Mode_name = map[int32]string{
		0: "MODE_UNSET",
		1: "MODE_DEFAULT",
		2: "MODE_ESSH",
	}
	HostedService_Mode_value = map[string]int32{
		"MODE_UNSET":   0,
		"MODE_DEFAULT": 1,
		"MODE_ESSH":    2,
	}
)

func (x HostedService_Mode) Enum() *HostedService_Mode {
	p := new(HostedService_Mode)
	*p = x
	return p
}

func (x HostedService_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostedService_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_userv1_proto_enumTypes[4].Descriptor()
}

func (HostedService_Mode) Type() protoreflect.EnumType {
	return &file_userv1_proto_enumTypes[4]
}

func (x HostedService_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostedService_Mode.Descriptor instead.
func (HostedService_Mode) EnumDescriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{9, 1}
}

type ConnectionState_L3Mode int32

const (
	// BOTH approves that the Connection is ready for dual-stack.
	ConnectionState_BOTH ConnectionState_L3Mode = 0
	// V4 approves that the Connection is ready for IPv4 only.
	ConnectionState_V4 ConnectionState_L3Mode = 1
	// V6 approves that the Connection is ready for IPv6 only.
	ConnectionState_V6 ConnectionState_L3Mode = 2
)

// Enum value maps for ConnectionState_L3Mode.
var (
	ConnectionState_L3Mode_name = map[int32]string{
		0: "BOTH",
		1: "V4",
		2: "V6",
	}
	ConnectionState_L3Mode_value = map[string]int32{
		"BOTH": 0,
		"V4":   1,
		"V6":   2,
	}
)

func (x ConnectionState_L3Mode) Enum() *ConnectionState_L3Mode {
	p := new(ConnectionState_L3Mode)
	*p = x
	return p
}

func (x ConnectionState_L3Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionState_L3Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_userv1_proto_enumTypes[5].Descriptor()
}

func (ConnectionState_L3Mode) Type() protoreflect.EnumType {
	return &file_userv1_proto_enumTypes[5]
}

func (x ConnectionState_L3Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionState_L3Mode.Descriptor instead.
func (ConnectionState_L3Mode) EnumDescriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{10, 0}
}

type Service_Spec_Type int32

const (
	Service_Spec_UNSET      Service_Spec_Type = 0
	Service_Spec_TCP        Service_Spec_Type = 1
	Service_Spec_UDP        Service_Spec_Type = 2
	Service_Spec_HTTP       Service_Spec_Type = 3
	Service_Spec_SSH        Service_Spec_Type = 4
	Service_Spec_KUBERNETES Service_Spec_Type = 5
	Service_Spec_POSTGRES   Service_Spec_Type = 6
	Service_Spec_MYSQL      Service_Spec_Type = 7
	Service_Spec_GRPC       Service_Spec_Type = 8
	Service_Spec_WEB        Service_Spec_Type = 9
	Service_Spec_DNS        Service_Spec_Type = 10
)

// Enum value maps for Service_Spec_Type.
var (
	Service_Spec_Type_name = map[int32]string{
		0:  "UNSET",
		1:  "TCP",
		2:  "UDP",
		3:  "HTTP",
		4:  "SSH",
		5:  "KUBERNETES",
		6:  "POSTGRES",
		7:  "MYSQL",
		8:  "GRPC",
		9:  "WEB",
		10: "DNS",
	}
	Service_Spec_Type_value = map[string]int32{
		"UNSET":      0,
		"TCP":        1,
		"UDP":        2,
		"HTTP":       3,
		"SSH":        4,
		"KUBERNETES": 5,
		"POSTGRES":   6,
		"MYSQL":      7,
		"GRPC":       8,
		"WEB":        9,
		"DNS":        10,
	}
)

func (x Service_Spec_Type) Enum() *Service_Spec_Type {
	p := new(Service_Spec_Type)
	*p = x
	return p
}

func (x Service_Spec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service_Spec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_userv1_proto_enumTypes[6].Descriptor()
}

func (Service_Spec_Type) Type() protoreflect.EnumType {
	return &file_userv1_proto_enumTypes[6]
}

func (x Service_Spec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service_Spec_Type.Descriptor instead.
func (Service_Spec_Type) EnumDescriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{11, 0, 0}
}

type LogoutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	mi := &file_userv1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{0}
}

type LogoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	mi := &file_userv1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{1}
}

type GetStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	mi := &file_userv1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{2}
}

type GetStatusResponse struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Domain string                 `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// Cluster is the Cluster's information.
	Cluster *GetStatusResponse_Cluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// User is the User's information.
	User *GetStatusResponse_User `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	// Session is the Session's information.
	Session       *GetStatusResponse_Session `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	mi := &file_userv1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatusResponse) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetStatusResponse) GetCluster() *GetStatusResponse_Cluster {
	if x != nil {
		return x.Cluster
	}
	return nil
}

func (x *GetStatusResponse) GetUser() *GetStatusResponse_User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GetStatusResponse) GetSession() *GetStatusResponse_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

type ConnectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ConnectRequest_Initialize_
	Type          isConnectRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest) Reset() {
	*x = ConnectRequest{}
	mi := &file_userv1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest) ProtoMessage() {}

func (x *ConnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest.ProtoReflect.Descriptor instead.
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{4}
}

func (x *ConnectRequest) GetType() isConnectRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ConnectRequest) GetInitialize() *ConnectRequest_Initialize {
	if x != nil {
		if x, ok := x.Type.(*ConnectRequest_Initialize_); ok {
			return x.Initialize
		}
	}
	return nil
}

type isConnectRequest_Type interface {
	isConnectRequest_Type()
}

type ConnectRequest_Initialize_ struct {
	Initialize *ConnectRequest_Initialize `protobuf:"bytes,1,opt,name=initialize,proto3,oneof"`
}

func (*ConnectRequest_Initialize_) isConnectRequest_Type() {}

type DisconnectRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectRequest) Reset() {
	*x = DisconnectRequest{}
	mi := &file_userv1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectRequest) ProtoMessage() {}

func (x *DisconnectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectRequest.ProtoReflect.Descriptor instead.
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{5}
}

type DisconnectResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisconnectResponse) Reset() {
	*x = DisconnectResponse{}
	mi := &file_userv1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisconnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectResponse) ProtoMessage() {}

func (x *DisconnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectResponse.ProtoReflect.Descriptor instead.
func (*DisconnectResponse) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{6}
}

type Gateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the Gateway's ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Addresses is the list of the Gateway's public addresses.
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// CIDRs is the list of Gateway CIDRs.
	CIDRs         []string           `protobuf:"bytes,3,rep,name=CIDRs,proto3" json:"CIDRs,omitempty"`
	Hostname      string             `protobuf:"bytes,4,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Wireguard     *Gateway_WireGuard `protobuf:"bytes,5,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	Quicv0        *Gateway_QUICV0    `protobuf:"bytes,6,opt,name=quicv0,proto3" json:"quicv0,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	mi := &file_userv1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{7}
}

func (x *Gateway) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Gateway) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Gateway) GetCIDRs() []string {
	if x != nil {
		return x.CIDRs
	}
	return nil
}

func (x *Gateway) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Gateway) GetWireguard() *Gateway_WireGuard {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

func (x *Gateway) GetQuicv0() *Gateway_QUICV0 {
	if x != nil {
		return x.Quicv0
	}
	return nil
}

type DNS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Servers is the list of the Cluster private DNS servers.
	Servers       []string `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DNS) Reset() {
	*x = DNS{}
	mi := &file_userv1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DNS) ProtoMessage() {}

func (x *DNS) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DNS.ProtoReflect.Descriptor instead.
func (*DNS) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{8}
}

func (x *DNS) GetServers() []string {
	if x != nil {
		return x.Servers
	}
	return nil
}

type HostedService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the hosted Service.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Port is the Service's port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// L4Type is the layer-4 type of the Service.
	L4Type HostedService_L4Type `protobuf:"varint,3,opt,name=l4Type,proto3,enum=octelium.api.main.user.v1.HostedService_L4Type" json:"l4Type,omitempty"`
	// Upstream is the listener upstream's information.
	Upstream *HostedService_Upstream `protobuf:"bytes,4,opt,name=upstream,proto3" json:"upstream,omitempty"`
	// Address is the dual-stack address of the Service. It can be null for
	// upstreams listening on 0.0.0.0 or the Connection addresses.
	Address *metav1.DualStackIP `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	// Mode is the hosted Service mode
	Mode          HostedService_Mode `protobuf:"varint,6,opt,name=mode,proto3,enum=octelium.api.main.user.v1.HostedService_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostedService) Reset() {
	*x = HostedService{}
	mi := &file_userv1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostedService) ProtoMessage() {}

func (x *HostedService) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostedService.ProtoReflect.Descriptor instead.
func (*HostedService) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{9}
}

func (x *HostedService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostedService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HostedService) GetL4Type() HostedService_L4Type {
	if x != nil {
		return x.L4Type
	}
	return HostedService_L4_UNKNOWN
}

func (x *HostedService) GetUpstream() *HostedService_Upstream {
	if x != nil {
		return x.Upstream
	}
	return nil
}

func (x *HostedService) GetAddress() *metav1.DualStackIP {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *HostedService) GetMode() HostedService_Mode {
	if x != nil {
		return x.Mode
	}
	return HostedService_MODE_UNSET
}

type ConnectionState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// MTU is the link MTU used at the client side
	Mtu int32 `protobuf:"varint,1,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// X25519Key is the WireGuard private key used by the client
	X25519Key  []byte `protobuf:"bytes,2,opt,name=x25519Key,proto3" json:"x25519Key,omitempty"`
	Ed25519Key []byte `protobuf:"bytes,3,opt,name=ed25519Key,proto3" json:"ed25519Key,omitempty"`
	// Addresses is the list of the dual-stack addresses of the Connection.
	Addresses []*metav1.DualStackNetwork `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Gateways is the list of the Gateways.
	Gateways []*Gateway `protobuf:"bytes,5,rep,name=gateways,proto3" json:"gateways,omitempty"`
	// DNS sets the private DNS information.
	Dns *DNS `protobuf:"bytes,6,opt,name=dns,proto3" json:"dns,omitempty"`
	// ServiceConfigs is the list of Service configs set to the client host
	ServiceConfigs []*ConnectionState_ServiceConfig `protobuf:"bytes,7,rep,name=serviceConfigs,proto3" json:"serviceConfigs,omitempty"`
	// L3Mode sets the layer-3 mode approved by the Cluster.
	L3Mode ConnectionState_L3Mode `protobuf:"varint,8,opt,name=l3Mode,proto3,enum=octelium.api.main.user.v1.ConnectionState_L3Mode" json:"l3Mode,omitempty"`
	// ServiceOptions is the hosted Service information.
	ServiceOptions *ConnectionState_ServiceOptions `protobuf:"bytes,9,opt,name=serviceOptions,proto3" json:"serviceOptions,omitempty"`
	// CIDR is the Cluster Service CIDR.
	Cidr          *metav1.DualStackNetwork `protobuf:"bytes,10,opt,name=cidr,proto3" json:"cidr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionState) Reset() {
	*x = ConnectionState{}
	mi := &file_userv1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionState) ProtoMessage() {}

func (x *ConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionState.ProtoReflect.Descriptor instead.
func (*ConnectionState) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectionState) GetMtu() int32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *ConnectionState) GetX25519Key() []byte {
	if x != nil {
		return x.X25519Key
	}
	return nil
}

func (x *ConnectionState) GetEd25519Key() []byte {
	if x != nil {
		return x.Ed25519Key
	}
	return nil
}

func (x *ConnectionState) GetAddresses() []*metav1.DualStackNetwork {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *ConnectionState) GetGateways() []*Gateway {
	if x != nil {
		return x.Gateways
	}
	return nil
}

func (x *ConnectionState) GetDns() *DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *ConnectionState) GetServiceConfigs() []*ConnectionState_ServiceConfig {
	if x != nil {
		return x.ServiceConfigs
	}
	return nil
}

func (x *ConnectionState) GetL3Mode() ConnectionState_L3Mode {
	if x != nil {
		return x.L3Mode
	}
	return ConnectionState_BOTH
}

func (x *ConnectionState) GetServiceOptions() *ConnectionState_ServiceOptions {
	if x != nil {
		return x.ServiceOptions
	}
	return nil
}

func (x *ConnectionState) GetCidr() *metav1.DualStackNetwork {
	if x != nil {
		return x.Cidr
	}
	return nil
}

type Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiVersion    string                 `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind          string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Metadata      *metav1.Metadata       `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *Service_Spec          `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *Service_Status        `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service) Reset() {
	*x = Service{}
	mi := &file_userv1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{11}
}

func (x *Service) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Service) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Service) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Service) GetSpec() *Service_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Service) GetStatus() *Service_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type ServiceList struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ApiVersion string                 `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	Items      []*Service             `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ServiceList) Reset() {
	*x = ServiceList{}
	mi := &file_userv1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceList) ProtoMessage() {}

func (x *ServiceList) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceList.ProtoReflect.Descriptor instead.
func (*ServiceList) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ServiceList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ServiceList) GetItems() []*Service {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ServiceList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ListServiceOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	Namespace     string                    `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListServiceOptions) Reset() {
	*x = ListServiceOptions{}
	mi := &file_userv1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceOptions) ProtoMessage() {}

func (x *ListServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceOptions.ProtoReflect.Descriptor instead.
func (*ListServiceOptions) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{13}
}

func (x *ListServiceOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *ListServiceOptions) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type ListNamespaceOptions struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Common        *metav1.CommonListOptions `protobuf:"bytes,1,opt,name=common,proto3" json:"common,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListNamespaceOptions) Reset() {
	*x = ListNamespaceOptions{}
	mi := &file_userv1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListNamespaceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNamespaceOptions) ProtoMessage() {}

func (x *ListNamespaceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNamespaceOptions.ProtoReflect.Descriptor instead.
func (*ListNamespaceOptions) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{14}
}

func (x *ListNamespaceOptions) GetCommon() *metav1.CommonListOptions {
	if x != nil {
		return x.Common
	}
	return nil
}

type Namespace struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ApiVersion string                 `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	Kind       string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Namespace specification.
	Spec *Namespace_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Namespace.
	Status        *Namespace_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	mi := &file_userv1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{15}
}

func (x *Namespace) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Namespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Namespace) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Namespace) GetSpec() *Namespace_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Namespace) GetStatus() *Namespace_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type NamespaceList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version of the object.
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `NamespaceList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Namespaces.
	Items []*Namespace `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NamespaceList) Reset() {
	*x = NamespaceList{}
	mi := &file_userv1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceList) ProtoMessage() {}

func (x *NamespaceList) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceList.ProtoReflect.Descriptor instead.
func (*NamespaceList) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{16}
}

func (x *NamespaceList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *NamespaceList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *NamespaceList) GetItems() []*Namespace {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *NamespaceList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ConnectResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*ConnectResponse_AddGateway_
	//	*ConnectResponse_UpdateGateway_
	//	*ConnectResponse_DeleteGateway_
	//	*ConnectResponse_UpdateDNS_
	//	*ConnectResponse_Message_
	//	*ConnectResponse_Disconnect_
	//	*ConnectResponse_AddService_
	//	*ConnectResponse_UpdateService_
	//	*ConnectResponse_DeleteService_
	//	*ConnectResponse_State
	Event         isConnectResponse_Event `protobuf_oneof:"Event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse) Reset() {
	*x = ConnectResponse{}
	mi := &file_userv1_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse) ProtoMessage() {}

func (x *ConnectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse.ProtoReflect.Descriptor instead.
func (*ConnectResponse) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17}
}

func (x *ConnectResponse) GetEvent() isConnectResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ConnectResponse) GetAddGateway() *ConnectResponse_AddGateway {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_AddGateway_); ok {
			return x.AddGateway
		}
	}
	return nil
}

func (x *ConnectResponse) GetUpdateGateway() *ConnectResponse_UpdateGateway {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_UpdateGateway_); ok {
			return x.UpdateGateway
		}
	}
	return nil
}

func (x *ConnectResponse) GetDeleteGateway() *ConnectResponse_DeleteGateway {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_DeleteGateway_); ok {
			return x.DeleteGateway
		}
	}
	return nil
}

func (x *ConnectResponse) GetUpdateDNS() *ConnectResponse_UpdateDNS {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_UpdateDNS_); ok {
			return x.UpdateDNS
		}
	}
	return nil
}

func (x *ConnectResponse) GetMessage() *ConnectResponse_Message {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_Message_); ok {
			return x.Message
		}
	}
	return nil
}

func (x *ConnectResponse) GetDisconnect() *ConnectResponse_Disconnect {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_Disconnect_); ok {
			return x.Disconnect
		}
	}
	return nil
}

func (x *ConnectResponse) GetAddService() *ConnectResponse_AddService {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_AddService_); ok {
			return x.AddService
		}
	}
	return nil
}

func (x *ConnectResponse) GetUpdateService() *ConnectResponse_UpdateService {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_UpdateService_); ok {
			return x.UpdateService
		}
	}
	return nil
}

func (x *ConnectResponse) GetDeleteService() *ConnectResponse_DeleteService {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_DeleteService_); ok {
			return x.DeleteService
		}
	}
	return nil
}

func (x *ConnectResponse) GetState() *ConnectionState {
	if x != nil {
		if x, ok := x.Event.(*ConnectResponse_State); ok {
			return x.State
		}
	}
	return nil
}

type isConnectResponse_Event interface {
	isConnectResponse_Event()
}

type ConnectResponse_AddGateway_ struct {
	// AddGateway is the event to add a Gateway.
	AddGateway *ConnectResponse_AddGateway `protobuf:"bytes,1,opt,name=addGateway,proto3,oneof"`
}

type ConnectResponse_UpdateGateway_ struct {
	// UpdateGateway is the event to update a Gateway.
	UpdateGateway *ConnectResponse_UpdateGateway `protobuf:"bytes,2,opt,name=updateGateway,proto3,oneof"`
}

type ConnectResponse_DeleteGateway_ struct {
	// DeleteGateway is the event to delete a Gateway.
	DeleteGateway *ConnectResponse_DeleteGateway `protobuf:"bytes,3,opt,name=deleteGateway,proto3,oneof"`
}

type ConnectResponse_UpdateDNS_ struct {
	// UpdateDNS is the event to update DNS.
	UpdateDNS *ConnectResponse_UpdateDNS `protobuf:"bytes,4,opt,name=updateDNS,proto3,oneof"`
}

type ConnectResponse_Message_ struct {
	// Message is the event to receive a custom message from the Cluster.
	Message *ConnectResponse_Message `protobuf:"bytes,5,opt,name=message,proto3,oneof"`
}

type ConnectResponse_Disconnect_ struct {
	// Disconnect is the event to disconnect from the Cluster.
	Disconnect *ConnectResponse_Disconnect `protobuf:"bytes,6,opt,name=disconnect,proto3,oneof"`
}

type ConnectResponse_AddService_ struct {
	// AddService is the event to add a hosted Service.
	AddService *ConnectResponse_AddService `protobuf:"bytes,7,opt,name=addService,proto3,oneof"`
}

type ConnectResponse_UpdateService_ struct {
	// UpdateService is the event to update a hosted Service.
	UpdateService *ConnectResponse_UpdateService `protobuf:"bytes,8,opt,name=updateService,proto3,oneof"`
}

type ConnectResponse_DeleteService_ struct {
	// DeleteService is the event to delete a hosted Service.
	DeleteService *ConnectResponse_DeleteService `protobuf:"bytes,9,opt,name=deleteService,proto3,oneof"`
}

type ConnectResponse_State struct {
	// State is the event that sends the entire state of the Connection.
	State *ConnectionState `protobuf:"bytes,10,opt,name=state,proto3,oneof"`
}

func (*ConnectResponse_AddGateway_) isConnectResponse_Event() {}

func (*ConnectResponse_UpdateGateway_) isConnectResponse_Event() {}

func (*ConnectResponse_DeleteGateway_) isConnectResponse_Event() {}

func (*ConnectResponse_UpdateDNS_) isConnectResponse_Event() {}

func (*ConnectResponse_Message_) isConnectResponse_Event() {}

func (*ConnectResponse_Disconnect_) isConnectResponse_Event() {}

func (*ConnectResponse_AddService_) isConnectResponse_Event() {}

func (*ConnectResponse_UpdateService_) isConnectResponse_Event() {}

func (*ConnectResponse_DeleteService_) isConnectResponse_Event() {}

func (*ConnectResponse_State) isConnectResponse_Event() {}

type SetServiceConfigsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the Service name
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetServiceConfigsRequest) Reset() {
	*x = SetServiceConfigsRequest{}
	mi := &file_userv1_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetServiceConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServiceConfigsRequest) ProtoMessage() {}

func (x *SetServiceConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServiceConfigsRequest.ProtoReflect.Descriptor instead.
func (*SetServiceConfigsRequest) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{18}
}

func (x *SetServiceConfigsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetServiceConfigsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configs is the list of configurations needed to be set at the client side
	// to use the Service
	Configs       []*SetServiceConfigsResponse_Config `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetServiceConfigsResponse) Reset() {
	*x = SetServiceConfigsResponse{}
	mi := &file_userv1_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetServiceConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServiceConfigsResponse) ProtoMessage() {}

func (x *SetServiceConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServiceConfigsResponse.ProtoReflect.Descriptor instead.
func (*SetServiceConfigsResponse) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{19}
}

func (x *SetServiceConfigsResponse) GetConfigs() []*SetServiceConfigsResponse_Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

type GetStatusResponse_User struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Metadata      *metav1.Metadata               `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *GetStatusResponse_User_Spec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *GetStatusResponse_User_Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse_User) Reset() {
	*x = GetStatusResponse_User{}
	mi := &file_userv1_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_User) ProtoMessage() {}

func (x *GetStatusResponse_User) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_User.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_User) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetStatusResponse_User) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetStatusResponse_User) GetSpec() *GetStatusResponse_User_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GetStatusResponse_User) GetStatus() *GetStatusResponse_User_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetStatusResponse_Session struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Metadata      *metav1.Metadata                  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *GetStatusResponse_Session_Spec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *GetStatusResponse_Session_Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse_Session) Reset() {
	*x = GetStatusResponse_Session{}
	mi := &file_userv1_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_Session) ProtoMessage() {}

func (x *GetStatusResponse_Session) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_Session.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_Session) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 1}
}

func (x *GetStatusResponse_Session) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetStatusResponse_Session) GetSpec() *GetStatusResponse_Session_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GetStatusResponse_Session) GetStatus() *GetStatusResponse_Session_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type GetStatusResponse_Cluster struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *metav1.Metadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse_Cluster) Reset() {
	*x = GetStatusResponse_Cluster{}
	mi := &file_userv1_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_Cluster) ProtoMessage() {}

func (x *GetStatusResponse_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_Cluster.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_Cluster) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 2}
}

func (x *GetStatusResponse_Cluster) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetStatusResponse_User_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse_User_Spec) Reset() {
	*x = GetStatusResponse_User_Spec{}
	mi := &file_userv1_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse_User_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_User_Spec) ProtoMessage() {}

func (x *GetStatusResponse_User_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_User_Spec.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_User_Spec) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *GetStatusResponse_User_Spec) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetStatusResponse_User_Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse_User_Status) Reset() {
	*x = GetStatusResponse_User_Status{}
	mi := &file_userv1_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse_User_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_User_Status) ProtoMessage() {}

func (x *GetStatusResponse_User_Status) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_User_Status.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_User_Status) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 0, 1}
}

type GetStatusResponse_Session_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse_Session_Spec) Reset() {
	*x = GetStatusResponse_Session_Spec{}
	mi := &file_userv1_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse_Session_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_Session_Spec) ProtoMessage() {}

func (x *GetStatusResponse_Session_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_Session_Spec.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_Session_Spec) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 1, 0}
}

type GetStatusResponse_Session_Status struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Type          GetStatusResponse_Session_Status_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.user.v1.GetStatusResponse_Session_Status_Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatusResponse_Session_Status) Reset() {
	*x = GetStatusResponse_Session_Status{}
	mi := &file_userv1_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatusResponse_Session_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse_Session_Status) ProtoMessage() {}

func (x *GetStatusResponse_Session_Status) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse_Session_Status.ProtoReflect.Descriptor instead.
func (*GetStatusResponse_Session_Status) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{3, 1, 1}
}

func (x *GetStatusResponse_Session_Status) GetType() GetStatusResponse_Session_Status_Type {
	if x != nil {
		return x.Type
	}
	return GetStatusResponse_Session_Status_UNKNOWN
}

type ConnectRequest_Initialize struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// L3Mode is the layer-3 mode supported by the Connection.
	L3Mode ConnectRequest_Initialize_L3Mode `protobuf:"varint,1,opt,name=l3Mode,proto3,enum=octelium.api.main.user.v1.ConnectRequest_Initialize_L3Mode" json:"l3Mode,omitempty"`
	// ServiceOptions sets the hosted Services to be served by the Connection.
	ServiceOptions *ConnectRequest_Initialize_ServiceOptions `protobuf:"bytes,2,opt,name=serviceOptions,proto3" json:"serviceOptions,omitempty"`
	// ConnectionType is the connection type
	ConnectionType ConnectRequest_Initialize_ConnectionType `protobuf:"varint,3,opt,name=connectionType,proto3,enum=octelium.api.main.user.v1.ConnectRequest_Initialize_ConnectionType" json:"connectionType,omitempty"`
	// PublishedServices is the list of published Services to the client host
	PublishedServices []*ConnectRequest_Initialize_PublishedService `protobuf:"bytes,4,rep,name=publishedServices,proto3" json:"publishedServices,omitempty"`
	// IgnoreDNS means that the client does not used the Cluster DNS
	IgnoreDNS bool `protobuf:"varint,5,opt,name=ignoreDNS,proto3" json:"ignoreDNS,omitempty"`
	// EnableESSH enables serving embedded SSH
	ESSHEnable bool `protobuf:"varint,6,opt,name=eSSHEnable,proto3" json:"eSSHEnable,omitempty"`
	// Port is the listen port of the embedded SSH server
	ESSHPort      int32 `protobuf:"varint,7,opt,name=eSSHPort,proto3" json:"eSSHPort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest_Initialize) Reset() {
	*x = ConnectRequest_Initialize{}
	mi := &file_userv1_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest_Initialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest_Initialize) ProtoMessage() {}

func (x *ConnectRequest_Initialize) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest_Initialize.ProtoReflect.Descriptor instead.
func (*ConnectRequest_Initialize) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ConnectRequest_Initialize) GetL3Mode() ConnectRequest_Initialize_L3Mode {
	if x != nil {
		return x.L3Mode
	}
	return ConnectRequest_Initialize_BOTH
}

func (x *ConnectRequest_Initialize) GetServiceOptions() *ConnectRequest_Initialize_ServiceOptions {
	if x != nil {
		return x.ServiceOptions
	}
	return nil
}

func (x *ConnectRequest_Initialize) GetConnectionType() ConnectRequest_Initialize_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return ConnectRequest_Initialize_UNSET
}

func (x *ConnectRequest_Initialize) GetPublishedServices() []*ConnectRequest_Initialize_PublishedService {
	if x != nil {
		return x.PublishedServices
	}
	return nil
}

func (x *ConnectRequest_Initialize) GetIgnoreDNS() bool {
	if x != nil {
		return x.IgnoreDNS
	}
	return false
}

func (x *ConnectRequest_Initialize) GetESSHEnable() bool {
	if x != nil {
		return x.ESSHEnable
	}
	return false
}

func (x *ConnectRequest_Initialize) GetESSHPort() int32 {
	if x != nil {
		return x.ESSHPort
	}
	return 0
}

type ConnectRequest_Initialize_ServiceOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ServeAll informs the Cluster that Connection is ready to serve all
	// Services that can be hosted by the owner User.
	ServeAll      bool                                                `protobuf:"varint,1,opt,name=serveAll,proto3" json:"serveAll,omitempty"`
	Services      []*ConnectRequest_Initialize_ServiceOptions_Service `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	LabelSelector string                                              `protobuf:"bytes,3,opt,name=labelSelector,proto3" json:"labelSelector,omitempty"`
	// PortStart informs the Cluster of the initial port number that should be
	// used for serving Services.
	PortStart     int32 `protobuf:"varint,4,opt,name=portStart,proto3" json:"portStart,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest_Initialize_ServiceOptions) Reset() {
	*x = ConnectRequest_Initialize_ServiceOptions{}
	mi := &file_userv1_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest_Initialize_ServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest_Initialize_ServiceOptions) ProtoMessage() {}

func (x *ConnectRequest_Initialize_ServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest_Initialize_ServiceOptions.ProtoReflect.Descriptor instead.
func (*ConnectRequest_Initialize_ServiceOptions) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *ConnectRequest_Initialize_ServiceOptions) GetServeAll() bool {
	if x != nil {
		return x.ServeAll
	}
	return false
}

func (x *ConnectRequest_Initialize_ServiceOptions) GetServices() []*ConnectRequest_Initialize_ServiceOptions_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ConnectRequest_Initialize_ServiceOptions) GetLabelSelector() string {
	if x != nil {
		return x.LabelSelector
	}
	return ""
}

func (x *ConnectRequest_Initialize_ServiceOptions) GetPortStart() int32 {
	if x != nil {
		return x.PortStart
	}
	return 0
}

type ConnectRequest_Initialize_PublishedService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the Service name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Port is the forwarded Service port number on the client host
	Port          uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest_Initialize_PublishedService) Reset() {
	*x = ConnectRequest_Initialize_PublishedService{}
	mi := &file_userv1_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest_Initialize_PublishedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest_Initialize_PublishedService) ProtoMessage() {}

func (x *ConnectRequest_Initialize_PublishedService) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest_Initialize_PublishedService.ProtoReflect.Descriptor instead.
func (*ConnectRequest_Initialize_PublishedService) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *ConnectRequest_Initialize_PublishedService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConnectRequest_Initialize_PublishedService) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ConnectRequest_Initialize_ServiceOptions_Service struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectRequest_Initialize_ServiceOptions_Service) Reset() {
	*x = ConnectRequest_Initialize_ServiceOptions_Service{}
	mi := &file_userv1_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectRequest_Initialize_ServiceOptions_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectRequest_Initialize_ServiceOptions_Service) ProtoMessage() {}

func (x *ConnectRequest_Initialize_ServiceOptions_Service) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectRequest_Initialize_ServiceOptions_Service.ProtoReflect.Descriptor instead.
func (*ConnectRequest_Initialize_ServiceOptions_Service) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{4, 0, 0, 0}
}

func (x *ConnectRequest_Initialize_ServiceOptions_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Gateway_WireGuard struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port is the Gateway's WireGuard port.
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// PublicKey is the Gateway's WireGuard curve25519 public key.
	PublicKey string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	// CIDRs is the list of Gateway CIDRs.
	// KeepAliveSeconds is the number of seconds to periodically send
	// WireGuard's keepalive packets.
	KeepAliveSeconds int32 `protobuf:"varint,3,opt,name=keepAliveSeconds,proto3" json:"keepAliveSeconds,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Gateway_WireGuard) Reset() {
	*x = Gateway_WireGuard{}
	mi := &file_userv1_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway_WireGuard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_WireGuard) ProtoMessage() {}

func (x *Gateway_WireGuard) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_WireGuard.ProtoReflect.Descriptor instead.
func (*Gateway_WireGuard) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Gateway_WireGuard) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Gateway_WireGuard) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Gateway_WireGuard) GetKeepAliveSeconds() int32 {
	if x != nil {
		return x.KeepAliveSeconds
	}
	return 0
}

type Gateway_QUICV0 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port is the Gateway's QUICv0 port.
	Port             int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	KeepAliveSeconds int32 `protobuf:"varint,2,opt,name=keepAliveSeconds,proto3" json:"keepAliveSeconds,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Gateway_QUICV0) Reset() {
	*x = Gateway_QUICV0{}
	mi := &file_userv1_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gateway_QUICV0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway_QUICV0) ProtoMessage() {}

func (x *Gateway_QUICV0) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway_QUICV0.ProtoReflect.Descriptor instead.
func (*Gateway_QUICV0) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Gateway_QUICV0) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Gateway_QUICV0) GetKeepAliveSeconds() int32 {
	if x != nil {
		return x.KeepAliveSeconds
	}
	return 0
}

type HostedService_Upstream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Host is the upstream host
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Port is the upstream listen port
	Port          int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HostedService_Upstream) Reset() {
	*x = HostedService_Upstream{}
	mi := &file_userv1_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HostedService_Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostedService_Upstream) ProtoMessage() {}

func (x *HostedService_Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostedService_Upstream.ProtoReflect.Descriptor instead.
func (*HostedService_Upstream) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{9, 0}
}

func (x *HostedService_Upstream) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HostedService_Upstream) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ConnectionState_ServiceOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// HostedServices is the list of hosted Services
	Services      []*HostedService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionState_ServiceOptions) Reset() {
	*x = ConnectionState_ServiceOptions{}
	mi := &file_userv1_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionState_ServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionState_ServiceOptions) ProtoMessage() {}

func (x *ConnectionState_ServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionState_ServiceOptions.ProtoReflect.Descriptor instead.
func (*ConnectionState_ServiceOptions) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ConnectionState_ServiceOptions) GetServices() []*HostedService {
	if x != nil {
		return x.Services
	}
	return nil
}

type ConnectionState_ServiceConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ConnectionState_ServiceConfig_Ssh
	Type          isConnectionState_ServiceConfig_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectionState_ServiceConfig) Reset() {
	*x = ConnectionState_ServiceConfig{}
	mi := &file_userv1_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionState_ServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionState_ServiceConfig) ProtoMessage() {}

func (x *ConnectionState_ServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionState_ServiceConfig.ProtoReflect.Descriptor instead.
func (*ConnectionState_ServiceConfig) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{10, 1}
}

func (x *ConnectionState_ServiceConfig) GetType() isConnectionState_ServiceConfig_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ConnectionState_ServiceConfig) GetSsh() *ConnectionState_ServiceConfig_SSH {
	if x != nil {
		if x, ok := x.Type.(*ConnectionState_ServiceConfig_Ssh); ok {
			return x.Ssh
		}
	}
	return nil
}

type isConnectionState_ServiceConfig_Type interface {
	isConnectionState_ServiceConfig_Type()
}

type ConnectionState_ServiceConfig_Ssh struct {
	// SSH sets SSH-specific Service config
	Ssh *ConnectionState_ServiceConfig_SSH `protobuf:"bytes,1,opt,name=ssh,proto3,oneof"`
}

func (*ConnectionState_ServiceConfig_Ssh) isConnectionState_ServiceConfig_Type() {}

type ConnectionState_ServiceConfig_SSH struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// KnownHosts is the list of SSH known hosts
	KnownHosts []string `protobuf:"bytes,1,rep,name=knownHosts,proto3" json:"knownHosts,omitempty"`
	// AuthorizedKeys is the list of SSH authorized keys
	AuthorizedKeys []string `protobuf:"bytes,2,rep,name=authorizedKeys,proto3" json:"authorizedKeys,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConnectionState_ServiceConfig_SSH) Reset() {
	*x = ConnectionState_ServiceConfig_SSH{}
	mi := &file_userv1_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectionState_ServiceConfig_SSH) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionState_ServiceConfig_SSH) ProtoMessage() {}

func (x *ConnectionState_ServiceConfig_SSH) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionState_ServiceConfig_SSH.ProtoReflect.Descriptor instead.
func (*ConnectionState_ServiceConfig_SSH) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{10, 1, 0}
}

func (x *ConnectionState_ServiceConfig_SSH) GetKnownHosts() []string {
	if x != nil {
		return x.KnownHosts
	}
	return nil
}

func (x *ConnectionState_ServiceConfig_SSH) GetAuthorizedKeys() []string {
	if x != nil {
		return x.AuthorizedKeys
	}
	return nil
}

type Service_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port is the Service listen port
	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// Type is the Service tpye
	Type Service_Spec_Type `protobuf:"varint,2,opt,name=type,proto3,enum=octelium.api.main.user.v1.Service_Spec_Type" json:"type,omitempty"`
	// IsTLS shows whether the Service is listening over TLS
	IsTLS bool `protobuf:"varint,3,opt,name=isTLS,proto3" json:"isTLS,omitempty"`
	// IsPublic means that the Service is publicly exposed and can be accessed
	// via the client-less/BeyondCorp mode
	IsPublic      bool `protobuf:"varint,4,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Service_Spec) Reset() {
	*x = Service_Spec{}
	mi := &file_userv1_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Spec) ProtoMessage() {}

func (x *Service_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Spec.ProtoReflect.Descriptor instead.
func (*Service_Spec) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Service_Spec) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Service_Spec) GetType() Service_Spec_Type {
	if x != nil {
		return x.Type
	}
	return Service_Spec_UNSET
}

func (x *Service_Spec) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

func (x *Service_Spec) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type Service_Status struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Namespace is the Service's Namespace
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Addresses is the list of private addresses used by the Service
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// PrimaryHostname is the unique primary hostname
	PrimaryHostname string `protobuf:"bytes,3,opt,name=primaryHostname,proto3" json:"primaryHostname,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Service_Status) Reset() {
	*x = Service_Status{}
	mi := &file_userv1_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Service_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service_Status) ProtoMessage() {}

func (x *Service_Status) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service_Status.ProtoReflect.Descriptor instead.
func (*Service_Status) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{11, 1}
}

func (x *Service_Status) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Service_Status) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Service_Status) GetPrimaryHostname() string {
	if x != nil {
		return x.PrimaryHostname
	}
	return ""
}

type Namespace_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace_Spec) Reset() {
	*x = Namespace_Spec{}
	mi := &file_userv1_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace_Spec) ProtoMessage() {}

func (x *Namespace_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace_Spec.ProtoReflect.Descriptor instead.
func (*Namespace_Spec) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{15, 0}
}

type Namespace_Status struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace_Status) Reset() {
	*x = Namespace_Status{}
	mi := &file_userv1_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace_Status) ProtoMessage() {}

func (x *Namespace_Status) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace_Status.ProtoReflect.Descriptor instead.
func (*Namespace_Status) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{15, 1}
}

type ConnectResponse_AddGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gateway is the added Gateway.
	Gateway       *Gateway `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_AddGateway) Reset() {
	*x = ConnectResponse_AddGateway{}
	mi := &file_userv1_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_AddGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_AddGateway) ProtoMessage() {}

func (x *ConnectResponse_AddGateway) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_AddGateway.ProtoReflect.Descriptor instead.
func (*ConnectResponse_AddGateway) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ConnectResponse_AddGateway) GetGateway() *Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type ConnectResponse_UpdateGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Gateway is the updated Gateway.
	Gateway       *Gateway `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_UpdateGateway) Reset() {
	*x = ConnectResponse_UpdateGateway{}
	mi := &file_userv1_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_UpdateGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_UpdateGateway) ProtoMessage() {}

func (x *ConnectResponse_UpdateGateway) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_UpdateGateway.ProtoReflect.Descriptor instead.
func (*ConnectResponse_UpdateGateway) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 1}
}

func (x *ConnectResponse_UpdateGateway) GetGateway() *Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type ConnectResponse_DeleteGateway struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the ID of the Gateway that needs to be deleted.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_DeleteGateway) Reset() {
	*x = ConnectResponse_DeleteGateway{}
	mi := &file_userv1_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_DeleteGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_DeleteGateway) ProtoMessage() {}

func (x *ConnectResponse_DeleteGateway) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_DeleteGateway.ProtoReflect.Descriptor instead.
func (*ConnectResponse_DeleteGateway) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 2}
}

func (x *ConnectResponse_DeleteGateway) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ConnectResponse_Disconnect struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message is an optional message from the Cluster upon disconnect.
	// Currrently not used.
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_Disconnect) Reset() {
	*x = ConnectResponse_Disconnect{}
	mi := &file_userv1_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_Disconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_Disconnect) ProtoMessage() {}

func (x *ConnectResponse_Disconnect) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_Disconnect.ProtoReflect.Descriptor instead.
func (*ConnectResponse_Disconnect) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 3}
}

func (x *ConnectResponse_Disconnect) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ConnectResponse_Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message is a custom message from the Cluster.
	Message       string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_Message) Reset() {
	*x = ConnectResponse_Message{}
	mi := &file_userv1_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_Message) ProtoMessage() {}

func (x *ConnectResponse_Message) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_Message.ProtoReflect.Descriptor instead.
func (*ConnectResponse_Message) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 4}
}

func (x *ConnectResponse_Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ConnectResponse_UpdateDNS struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DNS is the DNS information.
	Dns           *DNS `protobuf:"bytes,1,opt,name=dns,proto3" json:"dns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_UpdateDNS) Reset() {
	*x = ConnectResponse_UpdateDNS{}
	mi := &file_userv1_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_UpdateDNS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_UpdateDNS) ProtoMessage() {}

func (x *ConnectResponse_UpdateDNS) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_UpdateDNS.ProtoReflect.Descriptor instead.
func (*ConnectResponse_UpdateDNS) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 5}
}

func (x *ConnectResponse_UpdateDNS) GetDns() *DNS {
	if x != nil {
		return x.Dns
	}
	return nil
}

type ConnectResponse_AddService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service is the hosted Service that needs to be added.
	Service       *HostedService `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_AddService) Reset() {
	*x = ConnectResponse_AddService{}
	mi := &file_userv1_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_AddService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_AddService) ProtoMessage() {}

func (x *ConnectResponse_AddService) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_AddService.ProtoReflect.Descriptor instead.
func (*ConnectResponse_AddService) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 6}
}

func (x *ConnectResponse_AddService) GetService() *HostedService {
	if x != nil {
		return x.Service
	}
	return nil
}

type ConnectResponse_UpdateService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Service is the hosted Service that needs to be updated.
	Service       *HostedService `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_UpdateService) Reset() {
	*x = ConnectResponse_UpdateService{}
	mi := &file_userv1_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_UpdateService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_UpdateService) ProtoMessage() {}

func (x *ConnectResponse_UpdateService) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_UpdateService.ProtoReflect.Descriptor instead.
func (*ConnectResponse_UpdateService) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 7}
}

func (x *ConnectResponse_UpdateService) GetService() *HostedService {
	if x != nil {
		return x.Service
	}
	return nil
}

type ConnectResponse_DeleteService struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the name of the Service that needs to be deleted.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectResponse_DeleteService) Reset() {
	*x = ConnectResponse_DeleteService{}
	mi := &file_userv1_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectResponse_DeleteService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectResponse_DeleteService) ProtoMessage() {}

func (x *ConnectResponse_DeleteService) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectResponse_DeleteService.ProtoReflect.Descriptor instead.
func (*ConnectResponse_DeleteService) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{17, 8}
}

func (x *ConnectResponse_DeleteService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetServiceConfigsResponse_Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*SetServiceConfigsResponse_Config_Kubeconfig_
	Type          isSetServiceConfigsResponse_Config_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetServiceConfigsResponse_Config) Reset() {
	*x = SetServiceConfigsResponse_Config{}
	mi := &file_userv1_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetServiceConfigsResponse_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServiceConfigsResponse_Config) ProtoMessage() {}

func (x *SetServiceConfigsResponse_Config) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServiceConfigsResponse_Config.ProtoReflect.Descriptor instead.
func (*SetServiceConfigsResponse_Config) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{19, 0}
}

func (x *SetServiceConfigsResponse_Config) GetType() isSetServiceConfigsResponse_Config_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SetServiceConfigsResponse_Config) GetKubeconfig() *SetServiceConfigsResponse_Config_Kubeconfig {
	if x != nil {
		if x, ok := x.Type.(*SetServiceConfigsResponse_Config_Kubeconfig_); ok {
			return x.Kubeconfig
		}
	}
	return nil
}

type isSetServiceConfigsResponse_Config_Type interface {
	isSetServiceConfigsResponse_Config_Type()
}

type SetServiceConfigsResponse_Config_Kubeconfig_ struct {
	// Kubeconfig sets kubeconfig-specific configurations
	Kubeconfig *SetServiceConfigsResponse_Config_Kubeconfig `protobuf:"bytes,1,opt,name=kubeconfig,proto3,oneof"`
}

func (*SetServiceConfigsResponse_Config_Kubeconfig_) isSetServiceConfigsResponse_Config_Type() {}

type SetServiceConfigsResponse_Config_Kubeconfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Content is the kubeconfig content
	Content       []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetServiceConfigsResponse_Config_Kubeconfig) Reset() {
	*x = SetServiceConfigsResponse_Config_Kubeconfig{}
	mi := &file_userv1_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetServiceConfigsResponse_Config_Kubeconfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetServiceConfigsResponse_Config_Kubeconfig) ProtoMessage() {}

func (x *SetServiceConfigsResponse_Config_Kubeconfig) ProtoReflect() protoreflect.Message {
	mi := &file_userv1_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetServiceConfigsResponse_Config_Kubeconfig.ProtoReflect.Descriptor instead.
func (*SetServiceConfigsResponse_Config_Kubeconfig) Descriptor() ([]byte, []int) {
	return file_userv1_proto_rawDescGZIP(), []int{19, 0, 0}
}

func (x *SetServiceConfigsResponse_Config_Kubeconfig) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_userv1_proto protoreflect.FileDescriptor

var file_userv1_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf9, 0x07, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x07, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x8d, 0x02,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x1c, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x88, 0x03,
	0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4d, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x06,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x8f, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x54, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x4a, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x90, 0x08, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x1a,
	0x9d, 0x07, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x53,
	0x0a, 0x06, 0x6c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x4c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6c, 0x33, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x6b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x43, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x73, 0x0a,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x4e, 0x53, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x44, 0x4e, 0x53,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x53, 0x53, 0x48, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x53, 0x53, 0x48, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x53, 0x53, 0x48, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x65, 0x53, 0x53, 0x48, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0xf8, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x67, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x1a, 0x1d, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x3a, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x22, 0x0a, 0x06, 0x4c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34, 0x10, 0x01, 0x12,
	0x06, 0x0a, 0x02, 0x56, 0x36, 0x10, 0x02, 0x22, 0x36, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x52, 0x45, 0x47, 0x55, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x49, 0x43, 0x56, 0x30, 0x10, 0x02, 0x42,
	0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x49, 0x44, 0x52, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x43, 0x49, 0x44,
	0x52, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x52,
	0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x71, 0x75,
	0x69, 0x63, 0x76, 0x30, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x51,
	0x55, 0x49, 0x43, 0x56, 0x30, 0x52, 0x06, 0x71, 0x75, 0x69, 0x63, 0x76, 0x30, 0x1a, 0x69, 0x0a,
	0x09, 0x57, 0x69, 0x72, 0x65, 0x47, 0x75, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x48, 0x0a, 0x06, 0x51, 0x55, 0x49, 0x43,
	0x56, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x1f, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x22, 0xed, 0x03, 0x0a, 0x0d, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a,
	0x06, 0x6c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x6c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x08, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x50, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x1a, 0x32, 0x0a, 0x08, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2a,
	0x0a, 0x06, 0x4c, 0x34, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x34, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x22, 0x37, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x53, 0x53,
	0x48, 0x10, 0x02, 0x22, 0xa6, 0x07, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x78, 0x32, 0x35,
	0x35, 0x31, 0x39, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x78, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x64, 0x32, 0x35, 0x35,
	0x31, 0x39, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x65, 0x64, 0x32,
	0x35, 0x35, 0x31, 0x39, 0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x08, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4e, 0x53, 0x52,
	0x03, 0x64, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x33, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4c, 0x33, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6c, 0x33, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x61, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x04, 0x63, 0x69, 0x64, 0x72, 0x1a, 0x56, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xb8, 0x01,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x50, 0x0a, 0x03, 0x73, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x53, 0x48, 0x48, 0x00, 0x52, 0x03, 0x73, 0x73,
	0x68, 0x1a, 0x4d, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x22, 0x0a, 0x06, 0x4c, 0x33, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x56, 0x34, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x36, 0x10, 0x02, 0x22, 0xfc, 0x04, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x8b, 0x02,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x73, 0x54, 0x4c, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x54,
	0x4c, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0x7b,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44,
	0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x53, 0x48, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e,
	0x45, 0x54, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52,
	0x45, 0x53, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x59, 0x53, 0x51, 0x4c, 0x10, 0x07, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42,
	0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x53, 0x10, 0x0a, 0x1a, 0x6e, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x22, 0x78, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5c, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x96, 0x02, 0x0a, 0x09, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70,
	0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x43, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x06, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xab,
	0x0b, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x60, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x00, 0x52, 0x0d,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x60, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x00,
	0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12,
	0x54, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x4e, 0x53, 0x48, 0x00, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x4e, 0x53, 0x12, 0x4e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x57,
	0x0a, 0x0a, 0x61, 0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x4a, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3c, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0x4d, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x1a, 0x1f, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x26, 0x0a, 0x0a, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x23, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x4e, 0x53, 0x12, 0x30, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x4e, 0x53, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x1a, 0x50, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x53, 0x0a, 0x0d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x23,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x02, 0x0a,
	0x19, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x1a, 0xa2, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x68, 0x0a, 0x0a,
	0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x46, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x26, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x32, 0x80, 0x06, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x29, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6b,
	0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x0b, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x26, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x22, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d,
	0x61, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_userv1_proto_rawDescOnce sync.Once
	file_userv1_proto_rawDescData = file_userv1_proto_rawDesc
)

func file_userv1_proto_rawDescGZIP() []byte {
	file_userv1_proto_rawDescOnce.Do(func() {
		file_userv1_proto_rawDescData = protoimpl.X.CompressGZIP(file_userv1_proto_rawDescData)
	})
	return file_userv1_proto_rawDescData
}

var file_userv1_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_userv1_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_userv1_proto_goTypes = []any{
	(GetStatusResponse_Session_Status_Type)(0),               // 0: octelium.api.main.user.v1.GetStatusResponse.Session.Status.Type
	(ConnectRequest_Initialize_L3Mode)(0),                    // 1: octelium.api.main.user.v1.ConnectRequest.Initialize.L3Mode
	(ConnectRequest_Initialize_ConnectionType)(0),            // 2: octelium.api.main.user.v1.ConnectRequest.Initialize.ConnectionType
	(HostedService_L4Type)(0),                                // 3: octelium.api.main.user.v1.HostedService.L4Type
	(HostedService_Mode)(0),                                  // 4: octelium.api.main.user.v1.HostedService.Mode
	(ConnectionState_L3Mode)(0),                              // 5: octelium.api.main.user.v1.ConnectionState.L3Mode
	(Service_Spec_Type)(0),                                   // 6: octelium.api.main.user.v1.Service.Spec.Type
	(*LogoutRequest)(nil),                                    // 7: octelium.api.main.user.v1.LogoutRequest
	(*LogoutResponse)(nil),                                   // 8: octelium.api.main.user.v1.LogoutResponse
	(*GetStatusRequest)(nil),                                 // 9: octelium.api.main.user.v1.GetStatusRequest
	(*GetStatusResponse)(nil),                                // 10: octelium.api.main.user.v1.GetStatusResponse
	(*ConnectRequest)(nil),                                   // 11: octelium.api.main.user.v1.ConnectRequest
	(*DisconnectRequest)(nil),                                // 12: octelium.api.main.user.v1.DisconnectRequest
	(*DisconnectResponse)(nil),                               // 13: octelium.api.main.user.v1.DisconnectResponse
	(*Gateway)(nil),                                          // 14: octelium.api.main.user.v1.Gateway
	(*DNS)(nil),                                              // 15: octelium.api.main.user.v1.DNS
	(*HostedService)(nil),                                    // 16: octelium.api.main.user.v1.HostedService
	(*ConnectionState)(nil),                                  // 17: octelium.api.main.user.v1.ConnectionState
	(*Service)(nil),                                          // 18: octelium.api.main.user.v1.Service
	(*ServiceList)(nil),                                      // 19: octelium.api.main.user.v1.ServiceList
	(*ListServiceOptions)(nil),                               // 20: octelium.api.main.user.v1.ListServiceOptions
	(*ListNamespaceOptions)(nil),                             // 21: octelium.api.main.user.v1.ListNamespaceOptions
	(*Namespace)(nil),                                        // 22: octelium.api.main.user.v1.Namespace
	(*NamespaceList)(nil),                                    // 23: octelium.api.main.user.v1.NamespaceList
	(*ConnectResponse)(nil),                                  // 24: octelium.api.main.user.v1.ConnectResponse
	(*SetServiceConfigsRequest)(nil),                         // 25: octelium.api.main.user.v1.SetServiceConfigsRequest
	(*SetServiceConfigsResponse)(nil),                        // 26: octelium.api.main.user.v1.SetServiceConfigsResponse
	(*GetStatusResponse_User)(nil),                           // 27: octelium.api.main.user.v1.GetStatusResponse.User
	(*GetStatusResponse_Session)(nil),                        // 28: octelium.api.main.user.v1.GetStatusResponse.Session
	(*GetStatusResponse_Cluster)(nil),                        // 29: octelium.api.main.user.v1.GetStatusResponse.Cluster
	(*GetStatusResponse_User_Spec)(nil),                      // 30: octelium.api.main.user.v1.GetStatusResponse.User.Spec
	(*GetStatusResponse_User_Status)(nil),                    // 31: octelium.api.main.user.v1.GetStatusResponse.User.Status
	(*GetStatusResponse_Session_Spec)(nil),                   // 32: octelium.api.main.user.v1.GetStatusResponse.Session.Spec
	(*GetStatusResponse_Session_Status)(nil),                 // 33: octelium.api.main.user.v1.GetStatusResponse.Session.Status
	(*ConnectRequest_Initialize)(nil),                        // 34: octelium.api.main.user.v1.ConnectRequest.Initialize
	(*ConnectRequest_Initialize_ServiceOptions)(nil),         // 35: octelium.api.main.user.v1.ConnectRequest.Initialize.ServiceOptions
	(*ConnectRequest_Initialize_PublishedService)(nil),       // 36: octelium.api.main.user.v1.ConnectRequest.Initialize.PublishedService
	(*ConnectRequest_Initialize_ServiceOptions_Service)(nil), // 37: octelium.api.main.user.v1.ConnectRequest.Initialize.ServiceOptions.Service
	(*Gateway_WireGuard)(nil),                                // 38: octelium.api.main.user.v1.Gateway.WireGuard
	(*Gateway_QUICV0)(nil),                                   // 39: octelium.api.main.user.v1.Gateway.QUICV0
	(*HostedService_Upstream)(nil),                           // 40: octelium.api.main.user.v1.HostedService.Upstream
	(*ConnectionState_ServiceOptions)(nil),                   // 41: octelium.api.main.user.v1.ConnectionState.ServiceOptions
	(*ConnectionState_ServiceConfig)(nil),                    // 42: octelium.api.main.user.v1.ConnectionState.ServiceConfig
	(*ConnectionState_ServiceConfig_SSH)(nil),                // 43: octelium.api.main.user.v1.ConnectionState.ServiceConfig.SSH
	(*Service_Spec)(nil),                                     // 44: octelium.api.main.user.v1.Service.Spec
	(*Service_Status)(nil),                                   // 45: octelium.api.main.user.v1.Service.Status
	(*Namespace_Spec)(nil),                                   // 46: octelium.api.main.user.v1.Namespace.Spec
	(*Namespace_Status)(nil),                                 // 47: octelium.api.main.user.v1.Namespace.Status
	(*ConnectResponse_AddGateway)(nil),                       // 48: octelium.api.main.user.v1.ConnectResponse.AddGateway
	(*ConnectResponse_UpdateGateway)(nil),                    // 49: octelium.api.main.user.v1.ConnectResponse.UpdateGateway
	(*ConnectResponse_DeleteGateway)(nil),                    // 50: octelium.api.main.user.v1.ConnectResponse.DeleteGateway
	(*ConnectResponse_Disconnect)(nil),                       // 51: octelium.api.main.user.v1.ConnectResponse.Disconnect
	(*ConnectResponse_Message)(nil),                          // 52: octelium.api.main.user.v1.ConnectResponse.Message
	(*ConnectResponse_UpdateDNS)(nil),                        // 53: octelium.api.main.user.v1.ConnectResponse.UpdateDNS
	(*ConnectResponse_AddService)(nil),                       // 54: octelium.api.main.user.v1.ConnectResponse.AddService
	(*ConnectResponse_UpdateService)(nil),                    // 55: octelium.api.main.user.v1.ConnectResponse.UpdateService
	(*ConnectResponse_DeleteService)(nil),                    // 56: octelium.api.main.user.v1.ConnectResponse.DeleteService
	(*SetServiceConfigsResponse_Config)(nil),                 // 57: octelium.api.main.user.v1.SetServiceConfigsResponse.Config
	(*SetServiceConfigsResponse_Config_Kubeconfig)(nil),      // 58: octelium.api.main.user.v1.SetServiceConfigsResponse.Config.Kubeconfig
	(*metav1.DualStackIP)(nil),                               // 59: octelium.api.main.meta.v1.DualStackIP
	(*metav1.DualStackNetwork)(nil),                          // 60: octelium.api.main.meta.v1.DualStackNetwork
	(*metav1.Metadata)(nil),                                  // 61: octelium.api.main.meta.v1.Metadata
	(*metav1.ListResponseMeta)(nil),                          // 62: octelium.api.main.meta.v1.ListResponseMeta
	(*metav1.CommonListOptions)(nil),                         // 63: octelium.api.main.meta.v1.CommonListOptions
	(*metav1.GetOptions)(nil),                                // 64: octelium.api.main.meta.v1.GetOptions
}
var file_userv1_proto_depIdxs = []int32{
	29, // 0: octelium.api.main.user.v1.GetStatusResponse.cluster:type_name -> octelium.api.main.user.v1.GetStatusResponse.Cluster
	27, // 1: octelium.api.main.user.v1.GetStatusResponse.user:type_name -> octelium.api.main.user.v1.GetStatusResponse.User
	28, // 2: octelium.api.main.user.v1.GetStatusResponse.session:type_name -> octelium.api.main.user.v1.GetStatusResponse.Session
	34, // 3: octelium.api.main.user.v1.ConnectRequest.initialize:type_name -> octelium.api.main.user.v1.ConnectRequest.Initialize
	38, // 4: octelium.api.main.user.v1.Gateway.wireguard:type_name -> octelium.api.main.user.v1.Gateway.WireGuard
	39, // 5: octelium.api.main.user.v1.Gateway.quicv0:type_name -> octelium.api.main.user.v1.Gateway.QUICV0
	3,  // 6: octelium.api.main.user.v1.HostedService.l4Type:type_name -> octelium.api.main.user.v1.HostedService.L4Type
	40, // 7: octelium.api.main.user.v1.HostedService.upstream:type_name -> octelium.api.main.user.v1.HostedService.Upstream
	59, // 8: octelium.api.main.user.v1.HostedService.address:type_name -> octelium.api.main.meta.v1.DualStackIP
	4,  // 9: octelium.api.main.user.v1.HostedService.mode:type_name -> octelium.api.main.user.v1.HostedService.Mode
	60, // 10: octelium.api.main.user.v1.ConnectionState.addresses:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	14, // 11: octelium.api.main.user.v1.ConnectionState.gateways:type_name -> octelium.api.main.user.v1.Gateway
	15, // 12: octelium.api.main.user.v1.ConnectionState.dns:type_name -> octelium.api.main.user.v1.DNS
	42, // 13: octelium.api.main.user.v1.ConnectionState.serviceConfigs:type_name -> octelium.api.main.user.v1.ConnectionState.ServiceConfig
	5,  // 14: octelium.api.main.user.v1.ConnectionState.l3Mode:type_name -> octelium.api.main.user.v1.ConnectionState.L3Mode
	41, // 15: octelium.api.main.user.v1.ConnectionState.serviceOptions:type_name -> octelium.api.main.user.v1.ConnectionState.ServiceOptions
	60, // 16: octelium.api.main.user.v1.ConnectionState.cidr:type_name -> octelium.api.main.meta.v1.DualStackNetwork
	61, // 17: octelium.api.main.user.v1.Service.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	44, // 18: octelium.api.main.user.v1.Service.spec:type_name -> octelium.api.main.user.v1.Service.Spec
	45, // 19: octelium.api.main.user.v1.Service.status:type_name -> octelium.api.main.user.v1.Service.Status
	18, // 20: octelium.api.main.user.v1.ServiceList.items:type_name -> octelium.api.main.user.v1.Service
	62, // 21: octelium.api.main.user.v1.ServiceList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	63, // 22: octelium.api.main.user.v1.ListServiceOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	63, // 23: octelium.api.main.user.v1.ListNamespaceOptions.common:type_name -> octelium.api.main.meta.v1.CommonListOptions
	61, // 24: octelium.api.main.user.v1.Namespace.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	46, // 25: octelium.api.main.user.v1.Namespace.spec:type_name -> octelium.api.main.user.v1.Namespace.Spec
	47, // 26: octelium.api.main.user.v1.Namespace.status:type_name -> octelium.api.main.user.v1.Namespace.Status
	22, // 27: octelium.api.main.user.v1.NamespaceList.items:type_name -> octelium.api.main.user.v1.Namespace
	62, // 28: octelium.api.main.user.v1.NamespaceList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	48, // 29: octelium.api.main.user.v1.ConnectResponse.addGateway:type_name -> octelium.api.main.user.v1.ConnectResponse.AddGateway
	49, // 30: octelium.api.main.user.v1.ConnectResponse.updateGateway:type_name -> octelium.api.main.user.v1.ConnectResponse.UpdateGateway
	50, // 31: octelium.api.main.user.v1.ConnectResponse.deleteGateway:type_name -> octelium.api.main.user.v1.ConnectResponse.DeleteGateway
	53, // 32: octelium.api.main.user.v1.ConnectResponse.updateDNS:type_name -> octelium.api.main.user.v1.ConnectResponse.UpdateDNS
	52, // 33: octelium.api.main.user.v1.ConnectResponse.message:type_name -> octelium.api.main.user.v1.ConnectResponse.Message
	51, // 34: octelium.api.main.user.v1.ConnectResponse.disconnect:type_name -> octelium.api.main.user.v1.ConnectResponse.Disconnect
	54, // 35: octelium.api.main.user.v1.ConnectResponse.addService:type_name -> octelium.api.main.user.v1.ConnectResponse.AddService
	55, // 36: octelium.api.main.user.v1.ConnectResponse.updateService:type_name -> octelium.api.main.user.v1.ConnectResponse.UpdateService
	56, // 37: octelium.api.main.user.v1.ConnectResponse.deleteService:type_name -> octelium.api.main.user.v1.ConnectResponse.DeleteService
	17, // 38: octelium.api.main.user.v1.ConnectResponse.state:type_name -> octelium.api.main.user.v1.ConnectionState
	57, // 39: octelium.api.main.user.v1.SetServiceConfigsResponse.configs:type_name -> octelium.api.main.user.v1.SetServiceConfigsResponse.Config
	61, // 40: octelium.api.main.user.v1.GetStatusResponse.User.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	30, // 41: octelium.api.main.user.v1.GetStatusResponse.User.spec:type_name -> octelium.api.main.user.v1.GetStatusResponse.User.Spec
	31, // 42: octelium.api.main.user.v1.GetStatusResponse.User.status:type_name -> octelium.api.main.user.v1.GetStatusResponse.User.Status
	61, // 43: octelium.api.main.user.v1.GetStatusResponse.Session.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	32, // 44: octelium.api.main.user.v1.GetStatusResponse.Session.spec:type_name -> octelium.api.main.user.v1.GetStatusResponse.Session.Spec
	33, // 45: octelium.api.main.user.v1.GetStatusResponse.Session.status:type_name -> octelium.api.main.user.v1.GetStatusResponse.Session.Status
	61, // 46: octelium.api.main.user.v1.GetStatusResponse.Cluster.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	0,  // 47: octelium.api.main.user.v1.GetStatusResponse.Session.Status.type:type_name -> octelium.api.main.user.v1.GetStatusResponse.Session.Status.Type
	1,  // 48: octelium.api.main.user.v1.ConnectRequest.Initialize.l3Mode:type_name -> octelium.api.main.user.v1.ConnectRequest.Initialize.L3Mode
	35, // 49: octelium.api.main.user.v1.ConnectRequest.Initialize.serviceOptions:type_name -> octelium.api.main.user.v1.ConnectRequest.Initialize.ServiceOptions
	2,  // 50: octelium.api.main.user.v1.ConnectRequest.Initialize.connectionType:type_name -> octelium.api.main.user.v1.ConnectRequest.Initialize.ConnectionType
	36, // 51: octelium.api.main.user.v1.ConnectRequest.Initialize.publishedServices:type_name -> octelium.api.main.user.v1.ConnectRequest.Initialize.PublishedService
	37, // 52: octelium.api.main.user.v1.ConnectRequest.Initialize.ServiceOptions.services:type_name -> octelium.api.main.user.v1.ConnectRequest.Initialize.ServiceOptions.Service
	16, // 53: octelium.api.main.user.v1.ConnectionState.ServiceOptions.services:type_name -> octelium.api.main.user.v1.HostedService
	43, // 54: octelium.api.main.user.v1.ConnectionState.ServiceConfig.ssh:type_name -> octelium.api.main.user.v1.ConnectionState.ServiceConfig.SSH
	6,  // 55: octelium.api.main.user.v1.Service.Spec.type:type_name -> octelium.api.main.user.v1.Service.Spec.Type
	14, // 56: octelium.api.main.user.v1.ConnectResponse.AddGateway.gateway:type_name -> octelium.api.main.user.v1.Gateway
	14, // 57: octelium.api.main.user.v1.ConnectResponse.UpdateGateway.gateway:type_name -> octelium.api.main.user.v1.Gateway
	15, // 58: octelium.api.main.user.v1.ConnectResponse.UpdateDNS.dns:type_name -> octelium.api.main.user.v1.DNS
	16, // 59: octelium.api.main.user.v1.ConnectResponse.AddService.service:type_name -> octelium.api.main.user.v1.HostedService
	16, // 60: octelium.api.main.user.v1.ConnectResponse.UpdateService.service:type_name -> octelium.api.main.user.v1.HostedService
	58, // 61: octelium.api.main.user.v1.SetServiceConfigsResponse.Config.kubeconfig:type_name -> octelium.api.main.user.v1.SetServiceConfigsResponse.Config.Kubeconfig
	11, // 62: octelium.api.main.user.v1.MainService.Connect:input_type -> octelium.api.main.user.v1.ConnectRequest
	12, // 63: octelium.api.main.user.v1.MainService.Disconnect:input_type -> octelium.api.main.user.v1.DisconnectRequest
	20, // 64: octelium.api.main.user.v1.MainService.ListService:input_type -> octelium.api.main.user.v1.ListServiceOptions
	21, // 65: octelium.api.main.user.v1.MainService.ListNamespace:input_type -> octelium.api.main.user.v1.ListNamespaceOptions
	9,  // 66: octelium.api.main.user.v1.MainService.GetStatus:input_type -> octelium.api.main.user.v1.GetStatusRequest
	25, // 67: octelium.api.main.user.v1.MainService.SetServiceConfigs:input_type -> octelium.api.main.user.v1.SetServiceConfigsRequest
	64, // 68: octelium.api.main.user.v1.MainService.GetService:input_type -> octelium.api.main.meta.v1.GetOptions
	24, // 69: octelium.api.main.user.v1.MainService.Connect:output_type -> octelium.api.main.user.v1.ConnectResponse
	13, // 70: octelium.api.main.user.v1.MainService.Disconnect:output_type -> octelium.api.main.user.v1.DisconnectResponse
	19, // 71: octelium.api.main.user.v1.MainService.ListService:output_type -> octelium.api.main.user.v1.ServiceList
	23, // 72: octelium.api.main.user.v1.MainService.ListNamespace:output_type -> octelium.api.main.user.v1.NamespaceList
	10, // 73: octelium.api.main.user.v1.MainService.GetStatus:output_type -> octelium.api.main.user.v1.GetStatusResponse
	26, // 74: octelium.api.main.user.v1.MainService.SetServiceConfigs:output_type -> octelium.api.main.user.v1.SetServiceConfigsResponse
	18, // 75: octelium.api.main.user.v1.MainService.GetService:output_type -> octelium.api.main.user.v1.Service
	69, // [69:76] is the sub-list for method output_type
	62, // [62:69] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_userv1_proto_init() }
func file_userv1_proto_init() {
	if File_userv1_proto != nil {
		return
	}
	file_userv1_proto_msgTypes[4].OneofWrappers = []any{
		(*ConnectRequest_Initialize_)(nil),
	}
	file_userv1_proto_msgTypes[17].OneofWrappers = []any{
		(*ConnectResponse_AddGateway_)(nil),
		(*ConnectResponse_UpdateGateway_)(nil),
		(*ConnectResponse_DeleteGateway_)(nil),
		(*ConnectResponse_UpdateDNS_)(nil),
		(*ConnectResponse_Message_)(nil),
		(*ConnectResponse_Disconnect_)(nil),
		(*ConnectResponse_AddService_)(nil),
		(*ConnectResponse_UpdateService_)(nil),
		(*ConnectResponse_DeleteService_)(nil),
		(*ConnectResponse_State)(nil),
	}
	file_userv1_proto_msgTypes[35].OneofWrappers = []any{
		(*ConnectionState_ServiceConfig_Ssh)(nil),
	}
	file_userv1_proto_msgTypes[50].OneofWrappers = []any{
		(*SetServiceConfigsResponse_Config_Kubeconfig_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_userv1_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_userv1_proto_goTypes,
		DependencyIndexes: file_userv1_proto_depIdxs,
		EnumInfos:         file_userv1_proto_enumTypes,
		MessageInfos:      file_userv1_proto_msgTypes,
	}.Build()
	File_userv1_proto = out.File
	file_userv1_proto_rawDesc = nil
	file_userv1_proto_goTypes = nil
	file_userv1_proto_depIdxs = nil
}
