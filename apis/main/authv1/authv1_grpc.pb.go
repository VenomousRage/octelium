// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: authv1.proto

package authv1

import (
	context "context"
	metav1 "github.com/octelium/octelium/apis/main/metav1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MainService_AuthenticateWithAuthenticationToken_FullMethodName = "/octelium.api.main.auth.v1.MainService/AuthenticateWithAuthenticationToken"
	MainService_AuthenticateWithAssertion_FullMethodName           = "/octelium.api.main.auth.v1.MainService/AuthenticateWithAssertion"
	MainService_AuthenticateWithRefreshToken_FullMethodName        = "/octelium.api.main.auth.v1.MainService/AuthenticateWithRefreshToken"
	MainService_AuthenticateWithAuthenticator_FullMethodName       = "/octelium.api.main.auth.v1.MainService/AuthenticateWithAuthenticator"
	MainService_Logout_FullMethodName                              = "/octelium.api.main.auth.v1.MainService/Logout"
	MainService_RegisterDeviceBegin_FullMethodName                 = "/octelium.api.main.auth.v1.MainService/RegisterDeviceBegin"
	MainService_RegisterDeviceFinish_FullMethodName                = "/octelium.api.main.auth.v1.MainService/RegisterDeviceFinish"
	MainService_GetAuthenticator_FullMethodName                    = "/octelium.api.main.auth.v1.MainService/GetAuthenticator"
	MainService_CreateAuthenticator_FullMethodName                 = "/octelium.api.main.auth.v1.MainService/CreateAuthenticator"
	MainService_UpdateAuthenticator_FullMethodName                 = "/octelium.api.main.auth.v1.MainService/UpdateAuthenticator"
	MainService_ListAuthenticator_FullMethodName                   = "/octelium.api.main.auth.v1.MainService/ListAuthenticator"
	MainService_DeleteAuthenticator_FullMethodName                 = "/octelium.api.main.auth.v1.MainService/DeleteAuthenticator"
	MainService_RegisterAuthenticatorBegin_FullMethodName          = "/octelium.api.main.auth.v1.MainService/RegisterAuthenticatorBegin"
	MainService_RegisterAuthenticatorFinish_FullMethodName         = "/octelium.api.main.auth.v1.MainService/RegisterAuthenticatorFinish"
	MainService_AuthenticateAuthenticatorBegin_FullMethodName      = "/octelium.api.main.auth.v1.MainService/AuthenticateAuthenticatorBegin"
	MainService_GetAvailableAuthenticator_FullMethodName           = "/octelium.api.main.auth.v1.MainService/GetAvailableAuthenticator"
	MainService_AuthenticateWithPasskeyBegin_FullMethodName        = "/octelium.api.main.auth.v1.MainService/AuthenticateWithPasskeyBegin"
	MainService_AuthenticateWithPasskey_FullMethodName             = "/octelium.api.main.auth.v1.MainService/AuthenticateWithPasskey"
)

// MainServiceClient is the client API for MainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainServiceClient interface {
	AuthenticateWithAuthenticationToken(ctx context.Context, in *AuthenticateWithAuthenticationTokenRequest, opts ...grpc.CallOption) (*SessionToken, error)
	AuthenticateWithAssertion(ctx context.Context, in *AuthenticateWithAssertionRequest, opts ...grpc.CallOption) (*SessionToken, error)
	AuthenticateWithRefreshToken(ctx context.Context, in *AuthenticateWithRefreshTokenRequest, opts ...grpc.CallOption) (*SessionToken, error)
	AuthenticateWithAuthenticator(ctx context.Context, in *AuthenticateWithAuthenticatorRequest, opts ...grpc.CallOption) (*SessionToken, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	RegisterDeviceBegin(ctx context.Context, in *RegisterDeviceBeginRequest, opts ...grpc.CallOption) (*RegisterDeviceBeginResponse, error)
	RegisterDeviceFinish(ctx context.Context, in *RegisterDeviceFinishRequest, opts ...grpc.CallOption) (*RegisterDeviceFinishResponse, error)
	GetAuthenticator(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Authenticator, error)
	CreateAuthenticator(ctx context.Context, in *CreateAuthenticatorRequest, opts ...grpc.CallOption) (*Authenticator, error)
	UpdateAuthenticator(ctx context.Context, in *Authenticator, opts ...grpc.CallOption) (*Authenticator, error)
	ListAuthenticator(ctx context.Context, in *ListAuthenticatorOptions, opts ...grpc.CallOption) (*AuthenticatorList, error)
	DeleteAuthenticator(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error)
	RegisterAuthenticatorBegin(ctx context.Context, in *RegisterAuthenticatorBeginRequest, opts ...grpc.CallOption) (*RegisterAuthenticatorBeginResponse, error)
	RegisterAuthenticatorFinish(ctx context.Context, in *RegisterAuthenticatorFinishRequest, opts ...grpc.CallOption) (*RegisterAuthenticatorFinishResponse, error)
	AuthenticateAuthenticatorBegin(ctx context.Context, in *AuthenticateAuthenticatorBeginRequest, opts ...grpc.CallOption) (*AuthenticateAuthenticatorBeginResponse, error)
	GetAvailableAuthenticator(ctx context.Context, in *GetAvailableAuthenticatorRequest, opts ...grpc.CallOption) (*GetAvailableAuthenticatorResponse, error)
	AuthenticateWithPasskeyBegin(ctx context.Context, in *AuthenticateWithPasskeyBeginRequest, opts ...grpc.CallOption) (*AuthenticateWithPasskeyBeginResponse, error)
	AuthenticateWithPasskey(ctx context.Context, in *AuthenticateWithPasskeyRequest, opts ...grpc.CallOption) (*SessionToken, error)
}

type mainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMainServiceClient(cc grpc.ClientConnInterface) MainServiceClient {
	return &mainServiceClient{cc}
}

func (c *mainServiceClient) AuthenticateWithAuthenticationToken(ctx context.Context, in *AuthenticateWithAuthenticationTokenRequest, opts ...grpc.CallOption) (*SessionToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, MainService_AuthenticateWithAuthenticationToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) AuthenticateWithAssertion(ctx context.Context, in *AuthenticateWithAssertionRequest, opts ...grpc.CallOption) (*SessionToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, MainService_AuthenticateWithAssertion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) AuthenticateWithRefreshToken(ctx context.Context, in *AuthenticateWithRefreshTokenRequest, opts ...grpc.CallOption) (*SessionToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, MainService_AuthenticateWithRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) AuthenticateWithAuthenticator(ctx context.Context, in *AuthenticateWithAuthenticatorRequest, opts ...grpc.CallOption) (*SessionToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, MainService_AuthenticateWithAuthenticator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, MainService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) RegisterDeviceBegin(ctx context.Context, in *RegisterDeviceBeginRequest, opts ...grpc.CallOption) (*RegisterDeviceBeginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceBeginResponse)
	err := c.cc.Invoke(ctx, MainService_RegisterDeviceBegin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) RegisterDeviceFinish(ctx context.Context, in *RegisterDeviceFinishRequest, opts ...grpc.CallOption) (*RegisterDeviceFinishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterDeviceFinishResponse)
	err := c.cc.Invoke(ctx, MainService_RegisterDeviceFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetAuthenticator(ctx context.Context, in *metav1.GetOptions, opts ...grpc.CallOption) (*Authenticator, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authenticator)
	err := c.cc.Invoke(ctx, MainService_GetAuthenticator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) CreateAuthenticator(ctx context.Context, in *CreateAuthenticatorRequest, opts ...grpc.CallOption) (*Authenticator, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authenticator)
	err := c.cc.Invoke(ctx, MainService_CreateAuthenticator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) UpdateAuthenticator(ctx context.Context, in *Authenticator, opts ...grpc.CallOption) (*Authenticator, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authenticator)
	err := c.cc.Invoke(ctx, MainService_UpdateAuthenticator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) ListAuthenticator(ctx context.Context, in *ListAuthenticatorOptions, opts ...grpc.CallOption) (*AuthenticatorList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticatorList)
	err := c.cc.Invoke(ctx, MainService_ListAuthenticator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) DeleteAuthenticator(ctx context.Context, in *metav1.DeleteOptions, opts ...grpc.CallOption) (*metav1.OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(metav1.OperationResult)
	err := c.cc.Invoke(ctx, MainService_DeleteAuthenticator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) RegisterAuthenticatorBegin(ctx context.Context, in *RegisterAuthenticatorBeginRequest, opts ...grpc.CallOption) (*RegisterAuthenticatorBeginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAuthenticatorBeginResponse)
	err := c.cc.Invoke(ctx, MainService_RegisterAuthenticatorBegin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) RegisterAuthenticatorFinish(ctx context.Context, in *RegisterAuthenticatorFinishRequest, opts ...grpc.CallOption) (*RegisterAuthenticatorFinishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAuthenticatorFinishResponse)
	err := c.cc.Invoke(ctx, MainService_RegisterAuthenticatorFinish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) AuthenticateAuthenticatorBegin(ctx context.Context, in *AuthenticateAuthenticatorBeginRequest, opts ...grpc.CallOption) (*AuthenticateAuthenticatorBeginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateAuthenticatorBeginResponse)
	err := c.cc.Invoke(ctx, MainService_AuthenticateAuthenticatorBegin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) GetAvailableAuthenticator(ctx context.Context, in *GetAvailableAuthenticatorRequest, opts ...grpc.CallOption) (*GetAvailableAuthenticatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableAuthenticatorResponse)
	err := c.cc.Invoke(ctx, MainService_GetAvailableAuthenticator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) AuthenticateWithPasskeyBegin(ctx context.Context, in *AuthenticateWithPasskeyBeginRequest, opts ...grpc.CallOption) (*AuthenticateWithPasskeyBeginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateWithPasskeyBeginResponse)
	err := c.cc.Invoke(ctx, MainService_AuthenticateWithPasskeyBegin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mainServiceClient) AuthenticateWithPasskey(ctx context.Context, in *AuthenticateWithPasskeyRequest, opts ...grpc.CallOption) (*SessionToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionToken)
	err := c.cc.Invoke(ctx, MainService_AuthenticateWithPasskey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServiceServer is the server API for MainService service.
// All implementations must embed UnimplementedMainServiceServer
// for forward compatibility.
type MainServiceServer interface {
	AuthenticateWithAuthenticationToken(context.Context, *AuthenticateWithAuthenticationTokenRequest) (*SessionToken, error)
	AuthenticateWithAssertion(context.Context, *AuthenticateWithAssertionRequest) (*SessionToken, error)
	AuthenticateWithRefreshToken(context.Context, *AuthenticateWithRefreshTokenRequest) (*SessionToken, error)
	AuthenticateWithAuthenticator(context.Context, *AuthenticateWithAuthenticatorRequest) (*SessionToken, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	RegisterDeviceBegin(context.Context, *RegisterDeviceBeginRequest) (*RegisterDeviceBeginResponse, error)
	RegisterDeviceFinish(context.Context, *RegisterDeviceFinishRequest) (*RegisterDeviceFinishResponse, error)
	GetAuthenticator(context.Context, *metav1.GetOptions) (*Authenticator, error)
	CreateAuthenticator(context.Context, *CreateAuthenticatorRequest) (*Authenticator, error)
	UpdateAuthenticator(context.Context, *Authenticator) (*Authenticator, error)
	ListAuthenticator(context.Context, *ListAuthenticatorOptions) (*AuthenticatorList, error)
	DeleteAuthenticator(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error)
	RegisterAuthenticatorBegin(context.Context, *RegisterAuthenticatorBeginRequest) (*RegisterAuthenticatorBeginResponse, error)
	RegisterAuthenticatorFinish(context.Context, *RegisterAuthenticatorFinishRequest) (*RegisterAuthenticatorFinishResponse, error)
	AuthenticateAuthenticatorBegin(context.Context, *AuthenticateAuthenticatorBeginRequest) (*AuthenticateAuthenticatorBeginResponse, error)
	GetAvailableAuthenticator(context.Context, *GetAvailableAuthenticatorRequest) (*GetAvailableAuthenticatorResponse, error)
	AuthenticateWithPasskeyBegin(context.Context, *AuthenticateWithPasskeyBeginRequest) (*AuthenticateWithPasskeyBeginResponse, error)
	AuthenticateWithPasskey(context.Context, *AuthenticateWithPasskeyRequest) (*SessionToken, error)
	mustEmbedUnimplementedMainServiceServer()
}

// UnimplementedMainServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMainServiceServer struct{}

func (UnimplementedMainServiceServer) AuthenticateWithAuthenticationToken(context.Context, *AuthenticateWithAuthenticationTokenRequest) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithAuthenticationToken not implemented")
}
func (UnimplementedMainServiceServer) AuthenticateWithAssertion(context.Context, *AuthenticateWithAssertionRequest) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithAssertion not implemented")
}
func (UnimplementedMainServiceServer) AuthenticateWithRefreshToken(context.Context, *AuthenticateWithRefreshTokenRequest) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithRefreshToken not implemented")
}
func (UnimplementedMainServiceServer) AuthenticateWithAuthenticator(context.Context, *AuthenticateWithAuthenticatorRequest) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithAuthenticator not implemented")
}
func (UnimplementedMainServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedMainServiceServer) RegisterDeviceBegin(context.Context, *RegisterDeviceBeginRequest) (*RegisterDeviceBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDeviceBegin not implemented")
}
func (UnimplementedMainServiceServer) RegisterDeviceFinish(context.Context, *RegisterDeviceFinishRequest) (*RegisterDeviceFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDeviceFinish not implemented")
}
func (UnimplementedMainServiceServer) GetAuthenticator(context.Context, *metav1.GetOptions) (*Authenticator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticator not implemented")
}
func (UnimplementedMainServiceServer) CreateAuthenticator(context.Context, *CreateAuthenticatorRequest) (*Authenticator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthenticator not implemented")
}
func (UnimplementedMainServiceServer) UpdateAuthenticator(context.Context, *Authenticator) (*Authenticator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthenticator not implemented")
}
func (UnimplementedMainServiceServer) ListAuthenticator(context.Context, *ListAuthenticatorOptions) (*AuthenticatorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthenticator not implemented")
}
func (UnimplementedMainServiceServer) DeleteAuthenticator(context.Context, *metav1.DeleteOptions) (*metav1.OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthenticator not implemented")
}
func (UnimplementedMainServiceServer) RegisterAuthenticatorBegin(context.Context, *RegisterAuthenticatorBeginRequest) (*RegisterAuthenticatorBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthenticatorBegin not implemented")
}
func (UnimplementedMainServiceServer) RegisterAuthenticatorFinish(context.Context, *RegisterAuthenticatorFinishRequest) (*RegisterAuthenticatorFinishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuthenticatorFinish not implemented")
}
func (UnimplementedMainServiceServer) AuthenticateAuthenticatorBegin(context.Context, *AuthenticateAuthenticatorBeginRequest) (*AuthenticateAuthenticatorBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateAuthenticatorBegin not implemented")
}
func (UnimplementedMainServiceServer) GetAvailableAuthenticator(context.Context, *GetAvailableAuthenticatorRequest) (*GetAvailableAuthenticatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableAuthenticator not implemented")
}
func (UnimplementedMainServiceServer) AuthenticateWithPasskeyBegin(context.Context, *AuthenticateWithPasskeyBeginRequest) (*AuthenticateWithPasskeyBeginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithPasskeyBegin not implemented")
}
func (UnimplementedMainServiceServer) AuthenticateWithPasskey(context.Context, *AuthenticateWithPasskeyRequest) (*SessionToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateWithPasskey not implemented")
}
func (UnimplementedMainServiceServer) mustEmbedUnimplementedMainServiceServer() {}
func (UnimplementedMainServiceServer) testEmbeddedByValue()                     {}

// UnsafeMainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServiceServer will
// result in compilation errors.
type UnsafeMainServiceServer interface {
	mustEmbedUnimplementedMainServiceServer()
}

func RegisterMainServiceServer(s grpc.ServiceRegistrar, srv MainServiceServer) {
	// If the following call pancis, it indicates UnimplementedMainServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MainService_ServiceDesc, srv)
}

func _MainService_AuthenticateWithAuthenticationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithAuthenticationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AuthenticateWithAuthenticationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AuthenticateWithAuthenticationToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AuthenticateWithAuthenticationToken(ctx, req.(*AuthenticateWithAuthenticationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_AuthenticateWithAssertion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithAssertionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AuthenticateWithAssertion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AuthenticateWithAssertion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AuthenticateWithAssertion(ctx, req.(*AuthenticateWithAssertionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_AuthenticateWithRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AuthenticateWithRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AuthenticateWithRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AuthenticateWithRefreshToken(ctx, req.(*AuthenticateWithRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_AuthenticateWithAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithAuthenticatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AuthenticateWithAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AuthenticateWithAuthenticator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AuthenticateWithAuthenticator(ctx, req.(*AuthenticateWithAuthenticatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_RegisterDeviceBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).RegisterDeviceBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_RegisterDeviceBegin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).RegisterDeviceBegin(ctx, req.(*RegisterDeviceBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_RegisterDeviceFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).RegisterDeviceFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_RegisterDeviceFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).RegisterDeviceFinish(ctx, req.(*RegisterDeviceFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.GetOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetAuthenticator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetAuthenticator(ctx, req.(*metav1.GetOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_CreateAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthenticatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).CreateAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_CreateAuthenticator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).CreateAuthenticator(ctx, req.(*CreateAuthenticatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_UpdateAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authenticator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).UpdateAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_UpdateAuthenticator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).UpdateAuthenticator(ctx, req.(*Authenticator))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_ListAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthenticatorOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).ListAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_ListAuthenticator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).ListAuthenticator(ctx, req.(*ListAuthenticatorOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_DeleteAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metav1.DeleteOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).DeleteAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_DeleteAuthenticator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).DeleteAuthenticator(ctx, req.(*metav1.DeleteOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_RegisterAuthenticatorBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAuthenticatorBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).RegisterAuthenticatorBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_RegisterAuthenticatorBegin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).RegisterAuthenticatorBegin(ctx, req.(*RegisterAuthenticatorBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_RegisterAuthenticatorFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAuthenticatorFinishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).RegisterAuthenticatorFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_RegisterAuthenticatorFinish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).RegisterAuthenticatorFinish(ctx, req.(*RegisterAuthenticatorFinishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_AuthenticateAuthenticatorBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateAuthenticatorBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AuthenticateAuthenticatorBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AuthenticateAuthenticatorBegin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AuthenticateAuthenticatorBegin(ctx, req.(*AuthenticateAuthenticatorBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_GetAvailableAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableAuthenticatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetAvailableAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_GetAvailableAuthenticator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetAvailableAuthenticator(ctx, req.(*GetAvailableAuthenticatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_AuthenticateWithPasskeyBegin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithPasskeyBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AuthenticateWithPasskeyBegin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AuthenticateWithPasskeyBegin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AuthenticateWithPasskeyBegin(ctx, req.(*AuthenticateWithPasskeyBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MainService_AuthenticateWithPasskey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateWithPasskeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).AuthenticateWithPasskey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MainService_AuthenticateWithPasskey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).AuthenticateWithPasskey(ctx, req.(*AuthenticateWithPasskeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MainService_ServiceDesc is the grpc.ServiceDesc for MainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "octelium.api.main.auth.v1.MainService",
	HandlerType: (*MainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateWithAuthenticationToken",
			Handler:    _MainService_AuthenticateWithAuthenticationToken_Handler,
		},
		{
			MethodName: "AuthenticateWithAssertion",
			Handler:    _MainService_AuthenticateWithAssertion_Handler,
		},
		{
			MethodName: "AuthenticateWithRefreshToken",
			Handler:    _MainService_AuthenticateWithRefreshToken_Handler,
		},
		{
			MethodName: "AuthenticateWithAuthenticator",
			Handler:    _MainService_AuthenticateWithAuthenticator_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _MainService_Logout_Handler,
		},
		{
			MethodName: "RegisterDeviceBegin",
			Handler:    _MainService_RegisterDeviceBegin_Handler,
		},
		{
			MethodName: "RegisterDeviceFinish",
			Handler:    _MainService_RegisterDeviceFinish_Handler,
		},
		{
			MethodName: "GetAuthenticator",
			Handler:    _MainService_GetAuthenticator_Handler,
		},
		{
			MethodName: "CreateAuthenticator",
			Handler:    _MainService_CreateAuthenticator_Handler,
		},
		{
			MethodName: "UpdateAuthenticator",
			Handler:    _MainService_UpdateAuthenticator_Handler,
		},
		{
			MethodName: "ListAuthenticator",
			Handler:    _MainService_ListAuthenticator_Handler,
		},
		{
			MethodName: "DeleteAuthenticator",
			Handler:    _MainService_DeleteAuthenticator_Handler,
		},
		{
			MethodName: "RegisterAuthenticatorBegin",
			Handler:    _MainService_RegisterAuthenticatorBegin_Handler,
		},
		{
			MethodName: "RegisterAuthenticatorFinish",
			Handler:    _MainService_RegisterAuthenticatorFinish_Handler,
		},
		{
			MethodName: "AuthenticateAuthenticatorBegin",
			Handler:    _MainService_AuthenticateAuthenticatorBegin_Handler,
		},
		{
			MethodName: "GetAvailableAuthenticator",
			Handler:    _MainService_GetAvailableAuthenticator_Handler,
		},
		{
			MethodName: "AuthenticateWithPasskeyBegin",
			Handler:    _MainService_AuthenticateWithPasskeyBegin_Handler,
		},
		{
			MethodName: "AuthenticateWithPasskey",
			Handler:    _MainService_AuthenticateWithPasskey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authv1.proto",
}
