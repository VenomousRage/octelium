// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: authv1.proto

package authv1

import (
	metav1 "github.com/octelium/octelium/apis/main/metav1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientLoginRequest_APIVersion int32

const (
	ClientLoginRequest_UNKNOWN_VERSION ClientLoginRequest_APIVersion = 0
	ClientLoginRequest_V1              ClientLoginRequest_APIVersion = 1
)

// Enum value maps for ClientLoginRequest_APIVersion.
var (
	ClientLoginRequest_APIVersion_name = map[int32]string{
		0: "UNKNOWN_VERSION",
		1: "V1",
	}
	ClientLoginRequest_APIVersion_value = map[string]int32{
		"UNKNOWN_VERSION": 0,
		"V1":              1,
	}
)

func (x ClientLoginRequest_APIVersion) Enum() *ClientLoginRequest_APIVersion {
	p := new(ClientLoginRequest_APIVersion)
	*p = x
	return p
}

func (x ClientLoginRequest_APIVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientLoginRequest_APIVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_authv1_proto_enumTypes[0].Descriptor()
}

func (ClientLoginRequest_APIVersion) Type() protoreflect.EnumType {
	return &file_authv1_proto_enumTypes[0]
}

func (x ClientLoginRequest_APIVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientLoginRequest_APIVersion.Descriptor instead.
func (ClientLoginRequest_APIVersion) EnumDescriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{1, 0}
}

type RegisterDeviceBeginRequest_Info_OSType int32

const (
	RegisterDeviceBeginRequest_Info_OS_TYPE_UNKNOWN RegisterDeviceBeginRequest_Info_OSType = 0
	RegisterDeviceBeginRequest_Info_LINUX           RegisterDeviceBeginRequest_Info_OSType = 1
	RegisterDeviceBeginRequest_Info_WINDOWS         RegisterDeviceBeginRequest_Info_OSType = 2
	RegisterDeviceBeginRequest_Info_MAC             RegisterDeviceBeginRequest_Info_OSType = 3
	RegisterDeviceBeginRequest_Info_ANDROID         RegisterDeviceBeginRequest_Info_OSType = 4
	RegisterDeviceBeginRequest_Info_IOS             RegisterDeviceBeginRequest_Info_OSType = 5
)

// Enum value maps for RegisterDeviceBeginRequest_Info_OSType.
var (
	RegisterDeviceBeginRequest_Info_OSType_name = map[int32]string{
		0: "OS_TYPE_UNKNOWN",
		1: "LINUX",
		2: "WINDOWS",
		3: "MAC",
		4: "ANDROID",
		5: "IOS",
	}
	RegisterDeviceBeginRequest_Info_OSType_value = map[string]int32{
		"OS_TYPE_UNKNOWN": 0,
		"LINUX":           1,
		"WINDOWS":         2,
		"MAC":             3,
		"ANDROID":         4,
		"IOS":             5,
	}
)

func (x RegisterDeviceBeginRequest_Info_OSType) Enum() *RegisterDeviceBeginRequest_Info_OSType {
	p := new(RegisterDeviceBeginRequest_Info_OSType)
	*p = x
	return p
}

func (x RegisterDeviceBeginRequest_Info_OSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegisterDeviceBeginRequest_Info_OSType) Descriptor() protoreflect.EnumDescriptor {
	return file_authv1_proto_enumTypes[1].Descriptor()
}

func (RegisterDeviceBeginRequest_Info_OSType) Type() protoreflect.EnumType {
	return &file_authv1_proto_enumTypes[1]
}

func (x RegisterDeviceBeginRequest_Info_OSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegisterDeviceBeginRequest_Info_OSType.Descriptor instead.
func (RegisterDeviceBeginRequest_Info_OSType) EnumDescriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{5, 0, 0}
}

type TokenT0_Content_Type int32

const (
	TokenT0_Content_TYPE_UNKNOWN  TokenT0_Content_Type = 0
	TokenT0_Content_ACCESS_TOKEN  TokenT0_Content_Type = 1
	TokenT0_Content_REFRESH_TOKEN TokenT0_Content_Type = 2
	TokenT0_Content_CREDENTIAL    TokenT0_Content_Type = 3
)

// Enum value maps for TokenT0_Content_Type.
var (
	TokenT0_Content_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "ACCESS_TOKEN",
		2: "REFRESH_TOKEN",
		3: "CREDENTIAL",
	}
	TokenT0_Content_Type_value = map[string]int32{
		"TYPE_UNKNOWN":  0,
		"ACCESS_TOKEN":  1,
		"REFRESH_TOKEN": 2,
		"CREDENTIAL":    3,
	}
)

func (x TokenT0_Content_Type) Enum() *TokenT0_Content_Type {
	p := new(TokenT0_Content_Type)
	*p = x
	return p
}

func (x TokenT0_Content_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenT0_Content_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_authv1_proto_enumTypes[2].Descriptor()
}

func (TokenT0_Content_Type) Type() protoreflect.EnumType {
	return &file_authv1_proto_enumTypes[2]
}

func (x TokenT0_Content_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenT0_Content_Type.Descriptor instead.
func (TokenT0_Content_Type) EnumDescriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{12, 0, 0}
}

type Authenticator_Status_Type int32

const (
	Authenticator_Status_TYPE_UNKNOWN Authenticator_Status_Type = 0
	Authenticator_Status_FIDO         Authenticator_Status_Type = 1
	Authenticator_Status_TOTP         Authenticator_Status_Type = 2
	Authenticator_Status_TPM          Authenticator_Status_Type = 3
)

// Enum value maps for Authenticator_Status_Type.
var (
	Authenticator_Status_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "FIDO",
		2: "TOTP",
		3: "TPM",
	}
	Authenticator_Status_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"FIDO":         1,
		"TOTP":         2,
		"TPM":          3,
	}
)

func (x Authenticator_Status_Type) Enum() *Authenticator_Status_Type {
	p := new(Authenticator_Status_Type)
	*p = x
	return p
}

func (x Authenticator_Status_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authenticator_Status_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_authv1_proto_enumTypes[3].Descriptor()
}

func (Authenticator_Status_Type) Type() protoreflect.EnumType {
	return &file_authv1_proto_enumTypes[3]
}

func (x Authenticator_Status_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Authenticator_Status_Type.Descriptor instead.
func (Authenticator_Status_Type) EnumDescriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{17, 1, 0}
}

type SessionToken struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AccessToken           string                 `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	RefreshToken          string                 `protobuf:"bytes,2,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	ExpiresIn             int64                  `protobuf:"varint,3,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	RefreshTokenExpiresIn int64                  `protobuf:"varint,4,opt,name=refreshTokenExpiresIn,proto3" json:"refreshTokenExpiresIn,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SessionToken) Reset() {
	*x = SessionToken{}
	mi := &file_authv1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionToken) ProtoMessage() {}

func (x *SessionToken) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionToken.ProtoReflect.Descriptor instead.
func (*SessionToken) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{0}
}

func (x *SessionToken) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *SessionToken) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *SessionToken) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *SessionToken) GetRefreshTokenExpiresIn() int64 {
	if x != nil {
		return x.RefreshTokenExpiresIn
	}
	return 0
}

type ClientLoginRequest struct {
	state          protoimpl.MessageState        `protogen:"open.v1"`
	ApiVersion     ClientLoginRequest_APIVersion `protobuf:"varint,1,opt,name=apiVersion,proto3,enum=octelium.api.main.auth.v1.ClientLoginRequest_APIVersion" json:"apiVersion,omitempty"`
	CallbackPort   uint32                        `protobuf:"varint,2,opt,name=callbackPort,proto3" json:"callbackPort,omitempty"`
	CallbackSuffix string                        `protobuf:"bytes,3,opt,name=callbackSuffix,proto3" json:"callbackSuffix,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClientLoginRequest) Reset() {
	*x = ClientLoginRequest{}
	mi := &file_authv1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLoginRequest) ProtoMessage() {}

func (x *ClientLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLoginRequest.ProtoReflect.Descriptor instead.
func (*ClientLoginRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{1}
}

func (x *ClientLoginRequest) GetApiVersion() ClientLoginRequest_APIVersion {
	if x != nil {
		return x.ApiVersion
	}
	return ClientLoginRequest_UNKNOWN_VERSION
}

func (x *ClientLoginRequest) GetCallbackPort() uint32 {
	if x != nil {
		return x.CallbackPort
	}
	return 0
}

func (x *ClientLoginRequest) GetCallbackSuffix() string {
	if x != nil {
		return x.CallbackSuffix
	}
	return ""
}

type ClientLoginResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AuthenticationToken string                 `protobuf:"bytes,1,opt,name=authenticationToken,proto3" json:"authenticationToken,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ClientLoginResponse) Reset() {
	*x = ClientLoginResponse{}
	mi := &file_authv1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientLoginResponse) ProtoMessage() {}

func (x *ClientLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientLoginResponse.ProtoReflect.Descriptor instead.
func (*ClientLoginResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{2}
}

func (x *ClientLoginResponse) GetAuthenticationToken() string {
	if x != nil {
		return x.AuthenticationToken
	}
	return ""
}

type LogoutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	mi := &file_authv1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{3}
}

type LogoutResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	mi := &file_authv1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{4}
}

type RegisterDeviceBeginRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Info          *RegisterDeviceBeginRequest_Info `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceBeginRequest) Reset() {
	*x = RegisterDeviceBeginRequest{}
	mi := &file_authv1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceBeginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceBeginRequest) ProtoMessage() {}

func (x *RegisterDeviceBeginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceBeginRequest.ProtoReflect.Descriptor instead.
func (*RegisterDeviceBeginRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterDeviceBeginRequest) GetInfo() *RegisterDeviceBeginRequest_Info {
	if x != nil {
		return x.Info
	}
	return nil
}

type RegisterDeviceBeginResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Uid           string                                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Requests      []*RegisterDeviceBeginResponse_Request `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceBeginResponse) Reset() {
	*x = RegisterDeviceBeginResponse{}
	mi := &file_authv1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceBeginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceBeginResponse) ProtoMessage() {}

func (x *RegisterDeviceBeginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceBeginResponse.ProtoReflect.Descriptor instead.
func (*RegisterDeviceBeginResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterDeviceBeginResponse) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RegisterDeviceBeginResponse) GetRequests() []*RegisterDeviceBeginResponse_Request {
	if x != nil {
		return x.Requests
	}
	return nil
}

type RegisterDeviceFinishRequest struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Uid           string                                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Responses     []*RegisterDeviceFinishRequest_Response `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceFinishRequest) Reset() {
	*x = RegisterDeviceFinishRequest{}
	mi := &file_authv1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceFinishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceFinishRequest) ProtoMessage() {}

func (x *RegisterDeviceFinishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceFinishRequest.ProtoReflect.Descriptor instead.
func (*RegisterDeviceFinishRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterDeviceFinishRequest) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RegisterDeviceFinishRequest) GetResponses() []*RegisterDeviceFinishRequest_Response {
	if x != nil {
		return x.Responses
	}
	return nil
}

type RegisterDeviceFinishResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceFinishResponse) Reset() {
	*x = RegisterDeviceFinishResponse{}
	mi := &file_authv1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceFinishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceFinishResponse) ProtoMessage() {}

func (x *RegisterDeviceFinishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceFinishResponse.ProtoReflect.Descriptor instead.
func (*RegisterDeviceFinishResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{8}
}

type AuthenticateWithAuthenticationTokenRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AuthenticationToken string                 `protobuf:"bytes,1,opt,name=authenticationToken,proto3" json:"authenticationToken,omitempty"`
	Scopes              []string               `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AuthenticateWithAuthenticationTokenRequest) Reset() {
	*x = AuthenticateWithAuthenticationTokenRequest{}
	mi := &file_authv1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateWithAuthenticationTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateWithAuthenticationTokenRequest) ProtoMessage() {}

func (x *AuthenticateWithAuthenticationTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateWithAuthenticationTokenRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateWithAuthenticationTokenRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{9}
}

func (x *AuthenticateWithAuthenticationTokenRequest) GetAuthenticationToken() string {
	if x != nil {
		return x.AuthenticationToken
	}
	return ""
}

func (x *AuthenticateWithAuthenticationTokenRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type AuthenticateWithAssertionRequest struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	IdentityProviderRef *metav1.ObjectReference `protobuf:"bytes,1,opt,name=identityProviderRef,proto3" json:"identityProviderRef,omitempty"`
	Assertion           string                  `protobuf:"bytes,2,opt,name=assertion,proto3" json:"assertion,omitempty"`
	Scopes              []string                `protobuf:"bytes,3,rep,name=scopes,proto3" json:"scopes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AuthenticateWithAssertionRequest) Reset() {
	*x = AuthenticateWithAssertionRequest{}
	mi := &file_authv1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateWithAssertionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateWithAssertionRequest) ProtoMessage() {}

func (x *AuthenticateWithAssertionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateWithAssertionRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateWithAssertionRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{10}
}

func (x *AuthenticateWithAssertionRequest) GetIdentityProviderRef() *metav1.ObjectReference {
	if x != nil {
		return x.IdentityProviderRef
	}
	return nil
}

func (x *AuthenticateWithAssertionRequest) GetAssertion() string {
	if x != nil {
		return x.Assertion
	}
	return ""
}

func (x *AuthenticateWithAssertionRequest) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

type AuthenticateWithRefreshTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateWithRefreshTokenRequest) Reset() {
	*x = AuthenticateWithRefreshTokenRequest{}
	mi := &file_authv1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateWithRefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateWithRefreshTokenRequest) ProtoMessage() {}

func (x *AuthenticateWithRefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateWithRefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateWithRefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{11}
}

type TokenT0 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signature     []byte                 `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Content       *TokenT0_Content       `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenT0) Reset() {
	*x = TokenT0{}
	mi := &file_authv1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenT0) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenT0) ProtoMessage() {}

func (x *TokenT0) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenT0.ProtoReflect.Descriptor instead.
func (*TokenT0) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{12}
}

func (x *TokenT0) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TokenT0) GetContent() *TokenT0_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

type AuthenticateAuthenticatorBeginRequest struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	AuthenticatorRef *metav1.ObjectReference `protobuf:"bytes,1,opt,name=authenticatorRef,proto3" json:"authenticatorRef,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuthenticateAuthenticatorBeginRequest) Reset() {
	*x = AuthenticateAuthenticatorBeginRequest{}
	mi := &file_authv1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateAuthenticatorBeginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateAuthenticatorBeginRequest) ProtoMessage() {}

func (x *AuthenticateAuthenticatorBeginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateAuthenticatorBeginRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateAuthenticatorBeginRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{13}
}

func (x *AuthenticateAuthenticatorBeginRequest) GetAuthenticatorRef() *metav1.ObjectReference {
	if x != nil {
		return x.AuthenticatorRef
	}
	return nil
}

type AuthenticateAuthenticatorBeginResponse struct {
	state            protoimpl.MessageState                                   `protogen:"open.v1"`
	ChallengeRequest *AuthenticateAuthenticatorBeginResponse_ChallengeRequest `protobuf:"bytes,1,opt,name=challengeRequest,proto3" json:"challengeRequest,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuthenticateAuthenticatorBeginResponse) Reset() {
	*x = AuthenticateAuthenticatorBeginResponse{}
	mi := &file_authv1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateAuthenticatorBeginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateAuthenticatorBeginResponse) ProtoMessage() {}

func (x *AuthenticateAuthenticatorBeginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateAuthenticatorBeginResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateAuthenticatorBeginResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{14}
}

func (x *AuthenticateAuthenticatorBeginResponse) GetChallengeRequest() *AuthenticateAuthenticatorBeginResponse_ChallengeRequest {
	if x != nil {
		return x.ChallengeRequest
	}
	return nil
}

type RegisterAuthenticatorBeginRequest struct {
	state            protoimpl.MessageState                          `protogen:"open.v1"`
	AuthenticatorRef *metav1.ObjectReference                         `protobuf:"bytes,1,opt,name=authenticatorRef,proto3" json:"authenticatorRef,omitempty"`
	PreChallenge     *RegisterAuthenticatorBeginRequest_PreChallenge `protobuf:"bytes,2,opt,name=preChallenge,proto3" json:"preChallenge,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginRequest) Reset() {
	*x = RegisterAuthenticatorBeginRequest{}
	mi := &file_authv1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginRequest) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginRequest.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{15}
}

func (x *RegisterAuthenticatorBeginRequest) GetAuthenticatorRef() *metav1.ObjectReference {
	if x != nil {
		return x.AuthenticatorRef
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest) GetPreChallenge() *RegisterAuthenticatorBeginRequest_PreChallenge {
	if x != nil {
		return x.PreChallenge
	}
	return nil
}

type RegisterAuthenticatorBeginResponse struct {
	state            protoimpl.MessageState                               `protogen:"open.v1"`
	ChallengeRequest *RegisterAuthenticatorBeginResponse_ChallengeRequest `protobuf:"bytes,1,opt,name=challengeRequest,proto3" json:"challengeRequest,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginResponse) Reset() {
	*x = RegisterAuthenticatorBeginResponse{}
	mi := &file_authv1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginResponse) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginResponse.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{16}
}

func (x *RegisterAuthenticatorBeginResponse) GetChallengeRequest() *RegisterAuthenticatorBeginResponse_ChallengeRequest {
	if x != nil {
		return x.ChallengeRequest
	}
	return nil
}

type Authenticator struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version of the object.
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `Group`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// octelium.api.main.meta.v1.Metadata is the object's metadata.
	Metadata *metav1.Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Spec is the Group specification.
	Spec *Authenticator_Spec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status is the current status of the Group.
	Status        *Authenticator_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator) Reset() {
	*x = Authenticator{}
	mi := &file_authv1_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator) ProtoMessage() {}

func (x *Authenticator) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator.ProtoReflect.Descriptor instead.
func (*Authenticator) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{17}
}

func (x *Authenticator) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Authenticator) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Authenticator) GetMetadata() *metav1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Authenticator) GetSpec() *Authenticator_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Authenticator) GetStatus() *Authenticator_Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type AuthenticatorList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// APIVersion is the API version of the object.
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// Kind is the resource name (i.e. `GroupList`).
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Items is the list of Groups.
	Items []*Authenticator `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	// ListResponseMeta is common information about the list.
	ListResponseMeta *metav1.ListResponseMeta `protobuf:"bytes,4,opt,name=listResponseMeta,proto3" json:"listResponseMeta,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AuthenticatorList) Reset() {
	*x = AuthenticatorList{}
	mi := &file_authv1_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticatorList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatorList) ProtoMessage() {}

func (x *AuthenticatorList) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatorList.ProtoReflect.Descriptor instead.
func (*AuthenticatorList) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{18}
}

func (x *AuthenticatorList) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *AuthenticatorList) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AuthenticatorList) GetItems() []*Authenticator {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *AuthenticatorList) GetListResponseMeta() *metav1.ListResponseMeta {
	if x != nil {
		return x.ListResponseMeta
	}
	return nil
}

type ListAuthenticatorOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Page is the page number. Starts at 0
	Page uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// ItemsPerPage is the number of items per page
	ItemsPerPage  uint32 `protobuf:"varint,2,opt,name=itemsPerPage,proto3" json:"itemsPerPage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAuthenticatorOptions) Reset() {
	*x = ListAuthenticatorOptions{}
	mi := &file_authv1_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuthenticatorOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuthenticatorOptions) ProtoMessage() {}

func (x *ListAuthenticatorOptions) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuthenticatorOptions.ProtoReflect.Descriptor instead.
func (*ListAuthenticatorOptions) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{19}
}

func (x *ListAuthenticatorOptions) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListAuthenticatorOptions) GetItemsPerPage() uint32 {
	if x != nil {
		return x.ItemsPerPage
	}
	return 0
}

type CreateAuthenticatorRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Type          Authenticator_Status_Type `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.auth.v1.Authenticator_Status_Type" json:"type,omitempty"`
	DisplayName   string                    `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAuthenticatorRequest) Reset() {
	*x = CreateAuthenticatorRequest{}
	mi := &file_authv1_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAuthenticatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuthenticatorRequest) ProtoMessage() {}

func (x *CreateAuthenticatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuthenticatorRequest.ProtoReflect.Descriptor instead.
func (*CreateAuthenticatorRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{20}
}

func (x *CreateAuthenticatorRequest) GetType() Authenticator_Status_Type {
	if x != nil {
		return x.Type
	}
	return Authenticator_Status_TYPE_UNKNOWN
}

func (x *CreateAuthenticatorRequest) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type RegisterAuthenticatorFinishRequest struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	AuthenticatorRef  *metav1.ObjectReference `protobuf:"bytes,1,opt,name=authenticatorRef,proto3" json:"authenticatorRef,omitempty"`
	ChallengeResponse *ChallengeResponse      `protobuf:"bytes,2,opt,name=challengeResponse,proto3" json:"challengeResponse,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegisterAuthenticatorFinishRequest) Reset() {
	*x = RegisterAuthenticatorFinishRequest{}
	mi := &file_authv1_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorFinishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorFinishRequest) ProtoMessage() {}

func (x *RegisterAuthenticatorFinishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorFinishRequest.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorFinishRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{21}
}

func (x *RegisterAuthenticatorFinishRequest) GetAuthenticatorRef() *metav1.ObjectReference {
	if x != nil {
		return x.AuthenticatorRef
	}
	return nil
}

func (x *RegisterAuthenticatorFinishRequest) GetChallengeResponse() *ChallengeResponse {
	if x != nil {
		return x.ChallengeResponse
	}
	return nil
}

type RegisterAuthenticatorFinishResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorFinishResponse) Reset() {
	*x = RegisterAuthenticatorFinishResponse{}
	mi := &file_authv1_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorFinishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorFinishResponse) ProtoMessage() {}

func (x *RegisterAuthenticatorFinishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorFinishResponse.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorFinishResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{22}
}

type ChallengeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*ChallengeResponse_Fido
	//	*ChallengeResponse_Totp
	//	*ChallengeResponse_Tpm
	Type          isChallengeResponse_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeResponse) Reset() {
	*x = ChallengeResponse{}
	mi := &file_authv1_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse) ProtoMessage() {}

func (x *ChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse.ProtoReflect.Descriptor instead.
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{23}
}

func (x *ChallengeResponse) GetType() isChallengeResponse_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ChallengeResponse) GetFido() *ChallengeResponse_FIDO {
	if x != nil {
		if x, ok := x.Type.(*ChallengeResponse_Fido); ok {
			return x.Fido
		}
	}
	return nil
}

func (x *ChallengeResponse) GetTotp() *ChallengeResponse_TOTP {
	if x != nil {
		if x, ok := x.Type.(*ChallengeResponse_Totp); ok {
			return x.Totp
		}
	}
	return nil
}

func (x *ChallengeResponse) GetTpm() *ChallengeResponse_TPM {
	if x != nil {
		if x, ok := x.Type.(*ChallengeResponse_Tpm); ok {
			return x.Tpm
		}
	}
	return nil
}

type isChallengeResponse_Type interface {
	isChallengeResponse_Type()
}

type ChallengeResponse_Fido struct {
	Fido *ChallengeResponse_FIDO `protobuf:"bytes,1,opt,name=fido,proto3,oneof"`
}

type ChallengeResponse_Totp struct {
	Totp *ChallengeResponse_TOTP `protobuf:"bytes,2,opt,name=totp,proto3,oneof"`
}

type ChallengeResponse_Tpm struct {
	Tpm *ChallengeResponse_TPM `protobuf:"bytes,3,opt,name=tpm,proto3,oneof"`
}

func (*ChallengeResponse_Fido) isChallengeResponse_Type() {}

func (*ChallengeResponse_Totp) isChallengeResponse_Type() {}

func (*ChallengeResponse_Tpm) isChallengeResponse_Type() {}

type AuthenticateWithAuthenticatorRequest struct {
	state             protoimpl.MessageState  `protogen:"open.v1"`
	AuthenticatorRef  *metav1.ObjectReference `protobuf:"bytes,1,opt,name=authenticatorRef,proto3" json:"authenticatorRef,omitempty"`
	ChallengeResponse *ChallengeResponse      `protobuf:"bytes,2,opt,name=challengeResponse,proto3" json:"challengeResponse,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AuthenticateWithAuthenticatorRequest) Reset() {
	*x = AuthenticateWithAuthenticatorRequest{}
	mi := &file_authv1_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateWithAuthenticatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateWithAuthenticatorRequest) ProtoMessage() {}

func (x *AuthenticateWithAuthenticatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateWithAuthenticatorRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateWithAuthenticatorRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{24}
}

func (x *AuthenticateWithAuthenticatorRequest) GetAuthenticatorRef() *metav1.ObjectReference {
	if x != nil {
		return x.AuthenticatorRef
	}
	return nil
}

func (x *AuthenticateWithAuthenticatorRequest) GetChallengeResponse() *ChallengeResponse {
	if x != nil {
		return x.ChallengeResponse
	}
	return nil
}

type GetAvailableAuthenticatorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAvailableAuthenticatorRequest) Reset() {
	*x = GetAvailableAuthenticatorRequest{}
	mi := &file_authv1_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableAuthenticatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableAuthenticatorRequest) ProtoMessage() {}

func (x *GetAvailableAuthenticatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableAuthenticatorRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableAuthenticatorRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{25}
}

type GetAvailableAuthenticatorResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	MainAuthenticator       *Authenticator         `protobuf:"bytes,1,opt,name=mainAuthenticator,proto3" json:"mainAuthenticator,omitempty"`
	AvailableAuthenticators []*Authenticator       `protobuf:"bytes,2,rep,name=availableAuthenticators,proto3" json:"availableAuthenticators,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *GetAvailableAuthenticatorResponse) Reset() {
	*x = GetAvailableAuthenticatorResponse{}
	mi := &file_authv1_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableAuthenticatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableAuthenticatorResponse) ProtoMessage() {}

func (x *GetAvailableAuthenticatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableAuthenticatorResponse.ProtoReflect.Descriptor instead.
func (*GetAvailableAuthenticatorResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{26}
}

func (x *GetAvailableAuthenticatorResponse) GetMainAuthenticator() *Authenticator {
	if x != nil {
		return x.MainAuthenticator
	}
	return nil
}

func (x *GetAvailableAuthenticatorResponse) GetAvailableAuthenticators() []*Authenticator {
	if x != nil {
		return x.AvailableAuthenticators
	}
	return nil
}

type AuthenticateWithPasskeyBeginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateWithPasskeyBeginRequest) Reset() {
	*x = AuthenticateWithPasskeyBeginRequest{}
	mi := &file_authv1_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateWithPasskeyBeginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateWithPasskeyBeginRequest) ProtoMessage() {}

func (x *AuthenticateWithPasskeyBeginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateWithPasskeyBeginRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateWithPasskeyBeginRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{27}
}

func (x *AuthenticateWithPasskeyBeginRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type AuthenticateWithPasskeyBeginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       string                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateWithPasskeyBeginResponse) Reset() {
	*x = AuthenticateWithPasskeyBeginResponse{}
	mi := &file_authv1_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateWithPasskeyBeginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateWithPasskeyBeginResponse) ProtoMessage() {}

func (x *AuthenticateWithPasskeyBeginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateWithPasskeyBeginResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateWithPasskeyBeginResponse) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{28}
}

func (x *AuthenticateWithPasskeyBeginResponse) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type AuthenticateWithPasskeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateWithPasskeyRequest) Reset() {
	*x = AuthenticateWithPasskeyRequest{}
	mi := &file_authv1_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateWithPasskeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateWithPasskeyRequest) ProtoMessage() {}

func (x *AuthenticateWithPasskeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateWithPasskeyRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateWithPasskeyRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{29}
}

func (x *AuthenticateWithPasskeyRequest) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type RegisterDeviceBeginRequest_Info struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	OsType        RegisterDeviceBeginRequest_Info_OSType `protobuf:"varint,1,opt,name=osType,proto3,enum=octelium.api.main.auth.v1.RegisterDeviceBeginRequest_Info_OSType" json:"osType,omitempty"`
	Hostname      string                                 `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Id            string                                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	SerialNumber  string                                 `protobuf:"bytes,4,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	MacAddresses  []string                               `protobuf:"bytes,5,rep,name=macAddresses,proto3" json:"macAddresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceBeginRequest_Info) Reset() {
	*x = RegisterDeviceBeginRequest_Info{}
	mi := &file_authv1_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceBeginRequest_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceBeginRequest_Info) ProtoMessage() {}

func (x *RegisterDeviceBeginRequest_Info) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceBeginRequest_Info.ProtoReflect.Descriptor instead.
func (*RegisterDeviceBeginRequest_Info) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RegisterDeviceBeginRequest_Info) GetOsType() RegisterDeviceBeginRequest_Info_OSType {
	if x != nil {
		return x.OsType
	}
	return RegisterDeviceBeginRequest_Info_OS_TYPE_UNKNOWN
}

func (x *RegisterDeviceBeginRequest_Info) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegisterDeviceBeginRequest_Info) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RegisterDeviceBeginRequest_Info) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *RegisterDeviceBeginRequest_Info) GetMacAddresses() []string {
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

type RegisterDeviceBeginResponse_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Uid   string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*RegisterDeviceBeginResponse_Request_Command_
	//	*RegisterDeviceBeginResponse_Request_File_
	Type          isRegisterDeviceBeginResponse_Request_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceBeginResponse_Request) Reset() {
	*x = RegisterDeviceBeginResponse_Request{}
	mi := &file_authv1_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceBeginResponse_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceBeginResponse_Request) ProtoMessage() {}

func (x *RegisterDeviceBeginResponse_Request) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceBeginResponse_Request.ProtoReflect.Descriptor instead.
func (*RegisterDeviceBeginResponse_Request) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{6, 0}
}

func (x *RegisterDeviceBeginResponse_Request) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RegisterDeviceBeginResponse_Request) GetType() isRegisterDeviceBeginResponse_Request_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RegisterDeviceBeginResponse_Request) GetCommand() *RegisterDeviceBeginResponse_Request_Command {
	if x != nil {
		if x, ok := x.Type.(*RegisterDeviceBeginResponse_Request_Command_); ok {
			return x.Command
		}
	}
	return nil
}

func (x *RegisterDeviceBeginResponse_Request) GetFile() *RegisterDeviceBeginResponse_Request_File {
	if x != nil {
		if x, ok := x.Type.(*RegisterDeviceBeginResponse_Request_File_); ok {
			return x.File
		}
	}
	return nil
}

type isRegisterDeviceBeginResponse_Request_Type interface {
	isRegisterDeviceBeginResponse_Request_Type()
}

type RegisterDeviceBeginResponse_Request_Command_ struct {
	Command *RegisterDeviceBeginResponse_Request_Command `protobuf:"bytes,2,opt,name=command,proto3,oneof"`
}

type RegisterDeviceBeginResponse_Request_File_ struct {
	File *RegisterDeviceBeginResponse_Request_File `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

func (*RegisterDeviceBeginResponse_Request_Command_) isRegisterDeviceBeginResponse_Request_Type() {}

func (*RegisterDeviceBeginResponse_Request_File_) isRegisterDeviceBeginResponse_Request_Type() {}

type RegisterDeviceBeginResponse_Request_Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args          []string               `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceBeginResponse_Request_Command) Reset() {
	*x = RegisterDeviceBeginResponse_Request_Command{}
	mi := &file_authv1_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceBeginResponse_Request_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceBeginResponse_Request_Command) ProtoMessage() {}

func (x *RegisterDeviceBeginResponse_Request_Command) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceBeginResponse_Request_Command.ProtoReflect.Descriptor instead.
func (*RegisterDeviceBeginResponse_Request_Command) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{6, 0, 0}
}

func (x *RegisterDeviceBeginResponse_Request_Command) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RegisterDeviceBeginResponse_Request_Command) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type RegisterDeviceBeginResponse_Request_File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceBeginResponse_Request_File) Reset() {
	*x = RegisterDeviceBeginResponse_Request_File{}
	mi := &file_authv1_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceBeginResponse_Request_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceBeginResponse_Request_File) ProtoMessage() {}

func (x *RegisterDeviceBeginResponse_Request_File) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceBeginResponse_Request_File.ProtoReflect.Descriptor instead.
func (*RegisterDeviceBeginResponse_Request_File) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{6, 0, 1}
}

func (x *RegisterDeviceBeginResponse_Request_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type RegisterDeviceFinishRequest_Response struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Uid   string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*RegisterDeviceFinishRequest_Response_Command_
	//	*RegisterDeviceFinishRequest_Response_File_
	Type          isRegisterDeviceFinishRequest_Response_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceFinishRequest_Response) Reset() {
	*x = RegisterDeviceFinishRequest_Response{}
	mi := &file_authv1_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceFinishRequest_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceFinishRequest_Response) ProtoMessage() {}

func (x *RegisterDeviceFinishRequest_Response) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceFinishRequest_Response.ProtoReflect.Descriptor instead.
func (*RegisterDeviceFinishRequest_Response) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RegisterDeviceFinishRequest_Response) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RegisterDeviceFinishRequest_Response) GetType() isRegisterDeviceFinishRequest_Response_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RegisterDeviceFinishRequest_Response) GetCommand() *RegisterDeviceFinishRequest_Response_Command {
	if x != nil {
		if x, ok := x.Type.(*RegisterDeviceFinishRequest_Response_Command_); ok {
			return x.Command
		}
	}
	return nil
}

func (x *RegisterDeviceFinishRequest_Response) GetFile() *RegisterDeviceFinishRequest_Response_File {
	if x != nil {
		if x, ok := x.Type.(*RegisterDeviceFinishRequest_Response_File_); ok {
			return x.File
		}
	}
	return nil
}

type isRegisterDeviceFinishRequest_Response_Type interface {
	isRegisterDeviceFinishRequest_Response_Type()
}

type RegisterDeviceFinishRequest_Response_Command_ struct {
	Command *RegisterDeviceFinishRequest_Response_Command `protobuf:"bytes,2,opt,name=command,proto3,oneof"`
}

type RegisterDeviceFinishRequest_Response_File_ struct {
	File *RegisterDeviceFinishRequest_Response_File `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

func (*RegisterDeviceFinishRequest_Response_Command_) isRegisterDeviceFinishRequest_Response_Type() {}

func (*RegisterDeviceFinishRequest_Response_File_) isRegisterDeviceFinishRequest_Response_Type() {}

type RegisterDeviceFinishRequest_Response_Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        []byte                 `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceFinishRequest_Response_Command) Reset() {
	*x = RegisterDeviceFinishRequest_Response_Command{}
	mi := &file_authv1_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceFinishRequest_Response_Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceFinishRequest_Response_Command) ProtoMessage() {}

func (x *RegisterDeviceFinishRequest_Response_Command) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceFinishRequest_Response_Command.ProtoReflect.Descriptor instead.
func (*RegisterDeviceFinishRequest_Response_Command) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *RegisterDeviceFinishRequest_Response_Command) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type RegisterDeviceFinishRequest_Response_File struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Output        []byte                 `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterDeviceFinishRequest_Response_File) Reset() {
	*x = RegisterDeviceFinishRequest_Response_File{}
	mi := &file_authv1_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterDeviceFinishRequest_Response_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDeviceFinishRequest_Response_File) ProtoMessage() {}

func (x *RegisterDeviceFinishRequest_Response_File) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDeviceFinishRequest_Response_File.ProtoReflect.Descriptor instead.
func (*RegisterDeviceFinishRequest_Response_File) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{7, 0, 1}
}

func (x *RegisterDeviceFinishRequest_Response_File) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

type TokenT0_Content struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          TokenT0_Content_Type   `protobuf:"varint,1,opt,name=type,proto3,enum=octelium.api.main.auth.v1.TokenT0_Content_Type" json:"type,omitempty"`
	KeyID         []byte                 `protobuf:"bytes,2,opt,name=keyID,proto3" json:"keyID,omitempty"`
	Subject       []byte                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	TokenID       []byte                 `protobuf:"bytes,4,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	ExpiresAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenT0_Content) Reset() {
	*x = TokenT0_Content{}
	mi := &file_authv1_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenT0_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenT0_Content) ProtoMessage() {}

func (x *TokenT0_Content) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenT0_Content.ProtoReflect.Descriptor instead.
func (*TokenT0_Content) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{12, 0}
}

func (x *TokenT0_Content) GetType() TokenT0_Content_Type {
	if x != nil {
		return x.Type
	}
	return TokenT0_Content_TYPE_UNKNOWN
}

func (x *TokenT0_Content) GetKeyID() []byte {
	if x != nil {
		return x.KeyID
	}
	return nil
}

func (x *TokenT0_Content) GetSubject() []byte {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *TokenT0_Content) GetTokenID() []byte {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *TokenT0_Content) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Fido
	//	*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Totp
	//	*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Tpm
	Type          isAuthenticateAuthenticatorBeginResponse_ChallengeRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest) Reset() {
	*x = AuthenticateAuthenticatorBeginResponse_ChallengeRequest{}
	mi := &file_authv1_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest) ProtoMessage() {}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateAuthenticatorBeginResponse_ChallengeRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{14, 0}
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest) GetType() isAuthenticateAuthenticatorBeginResponse_ChallengeRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest) GetFido() *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO {
	if x != nil {
		if x, ok := x.Type.(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Fido); ok {
			return x.Fido
		}
	}
	return nil
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest) GetTotp() *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP {
	if x != nil {
		if x, ok := x.Type.(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Totp); ok {
			return x.Totp
		}
	}
	return nil
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest) GetTpm() *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM {
	if x != nil {
		if x, ok := x.Type.(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Tpm); ok {
			return x.Tpm
		}
	}
	return nil
}

type isAuthenticateAuthenticatorBeginResponse_ChallengeRequest_Type interface {
	isAuthenticateAuthenticatorBeginResponse_ChallengeRequest_Type()
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Fido struct {
	Fido *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO `protobuf:"bytes,1,opt,name=fido,proto3,oneof"`
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Totp struct {
	Totp *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP `protobuf:"bytes,2,opt,name=totp,proto3,oneof"`
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Tpm struct {
	Tpm *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM `protobuf:"bytes,3,opt,name=tpm,proto3,oneof"`
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Fido) isAuthenticateAuthenticatorBeginResponse_ChallengeRequest_Type() {
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Totp) isAuthenticateAuthenticatorBeginResponse_ChallengeRequest_Type() {
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Tpm) isAuthenticateAuthenticatorBeginResponse_ChallengeRequest_Type() {
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       string                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO) Reset() {
	*x = AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO{}
	mi := &file_authv1_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO) ProtoMessage() {}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO.ProtoReflect.Descriptor instead.
func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP) Reset() {
	*x = AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP{}
	mi := &file_authv1_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP) ProtoMessage() {}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP.ProtoReflect.Descriptor instead.
func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{14, 0, 1}
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM struct {
	state               protoimpl.MessageState                                                           `protogen:"open.v1"`
	EncryptedCredential *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential `protobuf:"bytes,1,opt,name=encryptedCredential,proto3" json:"encryptedCredential,omitempty"`
	AkBytes             []byte                                                                           `protobuf:"bytes,2,opt,name=akBytes,proto3" json:"akBytes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM) Reset() {
	*x = AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM{}
	mi := &file_authv1_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM) ProtoMessage() {}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM.ProtoReflect.Descriptor instead.
func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{14, 0, 2}
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM) GetEncryptedCredential() *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
	if x != nil {
		return x.EncryptedCredential
	}
	return nil
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM) GetAkBytes() []byte {
	if x != nil {
		return x.AkBytes
	}
	return nil
}

type AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credential    []byte                 `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Secret        []byte                 `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) Reset() {
	*x = AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential{}
	mi := &file_authv1_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) ProtoMessage() {
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential.ProtoReflect.Descriptor instead.
func (*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{14, 0, 2, 0}
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) GetCredential() []byte {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type RegisterAuthenticatorBeginRequest_PreChallenge struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RegisterAuthenticatorBeginRequest_PreChallenge_Tpm
	Type          isRegisterAuthenticatorBeginRequest_PreChallenge_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge) Reset() {
	*x = RegisterAuthenticatorBeginRequest_PreChallenge{}
	mi := &file_authv1_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginRequest_PreChallenge) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginRequest_PreChallenge.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginRequest_PreChallenge) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{15, 0}
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge) GetType() isRegisterAuthenticatorBeginRequest_PreChallenge_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge) GetTpm() *RegisterAuthenticatorBeginRequest_PreChallenge_TPM {
	if x != nil {
		if x, ok := x.Type.(*RegisterAuthenticatorBeginRequest_PreChallenge_Tpm); ok {
			return x.Tpm
		}
	}
	return nil
}

type isRegisterAuthenticatorBeginRequest_PreChallenge_Type interface {
	isRegisterAuthenticatorBeginRequest_PreChallenge_Type()
}

type RegisterAuthenticatorBeginRequest_PreChallenge_Tpm struct {
	Tpm *RegisterAuthenticatorBeginRequest_PreChallenge_TPM `protobuf:"bytes,1,opt,name=tpm,proto3,oneof"`
}

func (*RegisterAuthenticatorBeginRequest_PreChallenge_Tpm) isRegisterAuthenticatorBeginRequest_PreChallenge_Type() {
}

type RegisterAuthenticatorBeginRequest_PreChallenge_TPM struct {
	state                 protoimpl.MessageState                                                    `protogen:"open.v1"`
	AkBytes               []byte                                                                    `protobuf:"bytes,1,opt,name=akBytes,proto3" json:"akBytes,omitempty"`
	AttestationParameters *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters `protobuf:"bytes,2,opt,name=attestationParameters,proto3" json:"attestationParameters,omitempty"`
	// Types that are valid to be assigned to EkType:
	//
	//	*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkCertificateDER
	//	*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkPublicKey
	EkType        isRegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkType `protobuf_oneof:"ekType"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) Reset() {
	*x = RegisterAuthenticatorBeginRequest_PreChallenge_TPM{}
	mi := &file_authv1_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginRequest_PreChallenge_TPM) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginRequest_PreChallenge_TPM.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginRequest_PreChallenge_TPM) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{15, 0, 0}
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) GetAkBytes() []byte {
	if x != nil {
		return x.AkBytes
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) GetAttestationParameters() *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters {
	if x != nil {
		return x.AttestationParameters
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) GetEkType() isRegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkType {
	if x != nil {
		return x.EkType
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) GetEkCertificateDER() []byte {
	if x != nil {
		if x, ok := x.EkType.(*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkCertificateDER); ok {
			return x.EkCertificateDER
		}
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM) GetEkPublicKey() []byte {
	if x != nil {
		if x, ok := x.EkType.(*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkPublicKey); ok {
			return x.EkPublicKey
		}
	}
	return nil
}

type isRegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkType interface {
	isRegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkType()
}

type RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkCertificateDER struct {
	EkCertificateDER []byte `protobuf:"bytes,3,opt,name=ekCertificateDER,proto3,oneof"`
}

type RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkPublicKey struct {
	EkPublicKey []byte `protobuf:"bytes,4,opt,name=ekPublicKey,proto3,oneof"`
}

func (*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkCertificateDER) isRegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkType() {
}

func (*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkPublicKey) isRegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkType() {
}

type RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Public            []byte                 `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	CreateData        []byte                 `protobuf:"bytes,2,opt,name=createData,proto3" json:"createData,omitempty"`
	CreateAttestation []byte                 `protobuf:"bytes,3,opt,name=createAttestation,proto3" json:"createAttestation,omitempty"`
	CreateSignature   []byte                 `protobuf:"bytes,4,opt,name=createSignature,proto3" json:"createSignature,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) Reset() {
	*x = RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters{}
	mi := &file_authv1_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{15, 0, 0, 0}
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) GetPublic() []byte {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) GetCreateData() []byte {
	if x != nil {
		return x.CreateData
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) GetCreateAttestation() []byte {
	if x != nil {
		return x.CreateAttestation
	}
	return nil
}

func (x *RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters) GetCreateSignature() []byte {
	if x != nil {
		return x.CreateSignature
	}
	return nil
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RegisterAuthenticatorBeginResponse_ChallengeRequest_Fido
	//	*RegisterAuthenticatorBeginResponse_ChallengeRequest_Totp
	//	*RegisterAuthenticatorBeginResponse_ChallengeRequest_Tpm
	Type          isRegisterAuthenticatorBeginResponse_ChallengeRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest) Reset() {
	*x = RegisterAuthenticatorBeginResponse_ChallengeRequest{}
	mi := &file_authv1_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginResponse_ChallengeRequest.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginResponse_ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{16, 0}
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest) GetType() isRegisterAuthenticatorBeginResponse_ChallengeRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest) GetFido() *RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO {
	if x != nil {
		if x, ok := x.Type.(*RegisterAuthenticatorBeginResponse_ChallengeRequest_Fido); ok {
			return x.Fido
		}
	}
	return nil
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest) GetTotp() *RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP {
	if x != nil {
		if x, ok := x.Type.(*RegisterAuthenticatorBeginResponse_ChallengeRequest_Totp); ok {
			return x.Totp
		}
	}
	return nil
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest) GetTpm() *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM {
	if x != nil {
		if x, ok := x.Type.(*RegisterAuthenticatorBeginResponse_ChallengeRequest_Tpm); ok {
			return x.Tpm
		}
	}
	return nil
}

type isRegisterAuthenticatorBeginResponse_ChallengeRequest_Type interface {
	isRegisterAuthenticatorBeginResponse_ChallengeRequest_Type()
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest_Fido struct {
	Fido *RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO `protobuf:"bytes,1,opt,name=fido,proto3,oneof"`
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest_Totp struct {
	Totp *RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP `protobuf:"bytes,2,opt,name=totp,proto3,oneof"`
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest_Tpm struct {
	Tpm *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM `protobuf:"bytes,3,opt,name=tpm,proto3,oneof"`
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_Fido) isRegisterAuthenticatorBeginResponse_ChallengeRequest_Type() {
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_Totp) isRegisterAuthenticatorBeginResponse_ChallengeRequest_Type() {
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_Tpm) isRegisterAuthenticatorBeginResponse_ChallengeRequest_Type() {
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       string                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO) Reset() {
	*x = RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO{}
	mi := &file_authv1_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{16, 0, 0}
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP) Reset() {
	*x = RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP{}
	mi := &file_authv1_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{16, 0, 1}
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM struct {
	state               protoimpl.MessageState                                                       `protogen:"open.v1"`
	EncryptedCredential *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential `protobuf:"bytes,1,opt,name=encryptedCredential,proto3" json:"encryptedCredential,omitempty"`
	AkBytes             []byte                                                                       `protobuf:"bytes,2,opt,name=akBytes,proto3" json:"akBytes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM) Reset() {
	*x = RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM{}
	mi := &file_authv1_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{16, 0, 2}
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM) GetEncryptedCredential() *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
	if x != nil {
		return x.EncryptedCredential
	}
	return nil
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM) GetAkBytes() []byte {
	if x != nil {
		return x.AkBytes
	}
	return nil
}

type RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Credential    []byte                 `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Secret        []byte                 `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) Reset() {
	*x = RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential{}
	mi := &file_authv1_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) ProtoMessage() {}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential.ProtoReflect.Descriptor instead.
func (*RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{16, 0, 2, 0}
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) GetCredential() []byte {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential) GetSecret() []byte {
	if x != nil {
		return x.Secret
	}
	return nil
}

type Authenticator_Spec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DisplayName   string                 `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator_Spec) Reset() {
	*x = Authenticator_Spec{}
	mi := &file_authv1_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Spec) ProtoMessage() {}

func (x *Authenticator_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Spec.ProtoReflect.Descriptor instead.
func (*Authenticator_Spec) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Authenticator_Spec) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

type Authenticator_Status struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	IsRegistered  bool                      `protobuf:"varint,1,opt,name=isRegistered,proto3" json:"isRegistered,omitempty"`
	Type          Authenticator_Status_Type `protobuf:"varint,2,opt,name=type,proto3,enum=octelium.api.main.auth.v1.Authenticator_Status_Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Authenticator_Status) Reset() {
	*x = Authenticator_Status{}
	mi := &file_authv1_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Authenticator_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Status) ProtoMessage() {}

func (x *Authenticator_Status) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Status.ProtoReflect.Descriptor instead.
func (*Authenticator_Status) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Authenticator_Status) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

func (x *Authenticator_Status) GetType() Authenticator_Status_Type {
	if x != nil {
		return x.Type
	}
	return Authenticator_Status_TYPE_UNKNOWN
}

type ChallengeResponse_FIDO struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeResponse_FIDO) Reset() {
	*x = ChallengeResponse_FIDO{}
	mi := &file_authv1_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeResponse_FIDO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse_FIDO) ProtoMessage() {}

func (x *ChallengeResponse_FIDO) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse_FIDO.ProtoReflect.Descriptor instead.
func (*ChallengeResponse_FIDO) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ChallengeResponse_FIDO) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type ChallengeResponse_TOTP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeResponse_TOTP) Reset() {
	*x = ChallengeResponse_TOTP{}
	mi := &file_authv1_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeResponse_TOTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse_TOTP) ProtoMessage() {}

func (x *ChallengeResponse_TOTP) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse_TOTP.ProtoReflect.Descriptor instead.
func (*ChallengeResponse_TOTP) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{23, 1}
}

func (x *ChallengeResponse_TOTP) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type ChallengeResponse_TPM struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      []byte                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeResponse_TPM) Reset() {
	*x = ChallengeResponse_TPM{}
	mi := &file_authv1_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeResponse_TPM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse_TPM) ProtoMessage() {}

func (x *ChallengeResponse_TPM) ProtoReflect() protoreflect.Message {
	mi := &file_authv1_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse_TPM.ProtoReflect.Descriptor instead.
func (*ChallengeResponse_TPM) Descriptor() ([]byte, []int) {
	return file_authv1_proto_rawDescGZIP(), []int{23, 2}
}

func (x *ChallengeResponse_TPM) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_authv1_proto protoreflect.FileDescriptor

var file_authv1_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x26, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0xe5, 0x01,
	0x0a, 0x12, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x58, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x22, 0x29, 0x0a, 0x0a, 0x41, 0x50,
	0x49, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x56, 0x31, 0x10, 0x01, 0x22, 0x47, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x0f,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x10, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x9a, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x1a, 0xab, 0x02, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x06, 0x6f, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x41, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x53, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x06, 0x4f, 0x53, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55, 0x58,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x41, 0x43, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4e, 0x44, 0x52,
	0x4f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10, 0x05, 0x22, 0xc5,
	0x03, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x5a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0xb7, 0x02, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x62, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x59,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x1a, 0x1a, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x1a, 0xa8, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x63, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x21, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x0a, 0x04, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x76, 0x0a, 0x2a, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5c, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x07, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xa1, 0x02, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x30, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22,
	0x4d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x7f,
	0x0a, 0x25, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x22,
	0xc9, 0x06, 0x0a, 0x26, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x10, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x9e, 0x05, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6d, 0x0a, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x49, 0x44, 0x4f, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x12, 0x6d,
	0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x4f, 0x54, 0x50, 0x48, 0x00, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x12, 0x6a, 0x0a,
	0x03, 0x74, 0x70, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x50, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x74, 0x70, 0x6d, 0x1a, 0x20, 0x0a, 0x04, 0x46, 0x49, 0x44,
	0x4f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x0a, 0x04, 0x54,
	0x4f, 0x54, 0x50, 0x1a, 0x8d, 0x02, 0x0a, 0x03, 0x54, 0x50, 0x4d, 0x12, 0x9c, 0x01, 0x0a, 0x13,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6a, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x50,
	0x4d, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6b,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x6b, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x06, 0x0a, 0x21,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x12, 0x6d, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72,
	0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x1a, 0xbd, 0x04, 0x0a, 0x0c, 0x50, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x61, 0x0a, 0x03, 0x74, 0x70, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x54, 0x50, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x74, 0x70, 0x6d, 0x1a, 0xc1, 0x03, 0x0a,
	0x03, 0x54, 0x50, 0x4d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x99,
	0x01, 0x0a, 0x15, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x63,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x54, 0x50, 0x4d, 0x2e, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x15, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x10, 0x65, 0x6b,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x45, 0x52, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x10, 0x65, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x45, 0x52, 0x12, 0x22, 0x0a, 0x0b, 0x65, 0x6b, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0b, 0x65, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x1a, 0xa7, 0x01, 0x0a,
	0x15, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc3, 0x06, 0x0a, 0x22, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7a, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c,
	0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xa0, 0x05, 0x0a, 0x10,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x69, 0x0a, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x49, 0x44, 0x4f, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x12, 0x69, 0x0a, 0x04, 0x74,
	0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x4f, 0x54, 0x50, 0x48, 0x00,
	0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x12, 0x66, 0x0a, 0x03, 0x74, 0x70, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x50, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x74, 0x70, 0x6d, 0x1a, 0x20,
	0x0a, 0x04, 0x46, 0x49, 0x44, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x0a, 0x04, 0x54, 0x4f, 0x54, 0x50, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x89, 0x02, 0x0a, 0x03, 0x54,
	0x50, 0x4d, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x66, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x54, 0x50, 0x4d, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x13, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xea,
	0x03, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x1a, 0x28, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xad, 0x01, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x46, 0x49, 0x44, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x4f, 0x54, 0x50,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x50, 0x4d, 0x10, 0x03, 0x22, 0xe0, 0x01, 0x0a, 0x11,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x52,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd8, 0x01,
	0x0a, 0x22, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x12, 0x5a, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69,
	0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x23, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xde, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x49, 0x44, 0x4f, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x64, 0x6f, 0x12, 0x47,
	0x0a, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x4f, 0x54, 0x50, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x6f, 0x74, 0x70, 0x12, 0x44, 0x0a, 0x03, 0x74, 0x70, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x54, 0x50, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x74, 0x70, 0x6d, 0x1a, 0x22, 0x0a,
	0x04, 0x46, 0x49, 0x44, 0x4f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x22, 0x0a, 0x04, 0x54, 0x4f, 0x54, 0x50, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x21, 0x0a, 0x03, 0x54, 0x50, 0x4d, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xda, 0x01, 0x0a, 0x24, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x10, 0x61, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x10, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x66, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0xdf, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x6d, 0x61,
	0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x62, 0x0a, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x40, 0x0a, 0x24, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x3c, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x9d, 0x13, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x97, 0x01, 0x0a, 0x23, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x45, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00,
	0x12, 0x89, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a,
	0x1d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x06, 0x4c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x12, 0x35, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x36, 0x2e,
	0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69,
	0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x28, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x35,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x1a, 0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x78,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x33, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c,
	0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x28, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x2a, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x3c, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75,
	0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x3d, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x1e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x40, 0x2e, 0x6f, 0x63, 0x74, 0x65,
	0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x98, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b,
	0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f, 0x63,
	0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x1c,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79,
	0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7f, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x2e, 0x6f, 0x63, 0x74,
	0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73, 0x6b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x69, 0x6e, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00,
	0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x6f, 0x63, 0x74, 0x65, 0x6c, 0x69, 0x75, 0x6d,
	0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_authv1_proto_rawDescOnce sync.Once
	file_authv1_proto_rawDescData = file_authv1_proto_rawDesc
)

func file_authv1_proto_rawDescGZIP() []byte {
	file_authv1_proto_rawDescOnce.Do(func() {
		file_authv1_proto_rawDescData = protoimpl.X.CompressGZIP(file_authv1_proto_rawDescData)
	})
	return file_authv1_proto_rawDescData
}

var file_authv1_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_authv1_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_authv1_proto_goTypes = []any{
	(ClientLoginRequest_APIVersion)(0),                                                      // 0: octelium.api.main.auth.v1.ClientLoginRequest.APIVersion
	(RegisterDeviceBeginRequest_Info_OSType)(0),                                             // 1: octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.OSType
	(TokenT0_Content_Type)(0),                                                               // 2: octelium.api.main.auth.v1.TokenT0.Content.Type
	(Authenticator_Status_Type)(0),                                                          // 3: octelium.api.main.auth.v1.Authenticator.Status.Type
	(*SessionToken)(nil),                                                                    // 4: octelium.api.main.auth.v1.SessionToken
	(*ClientLoginRequest)(nil),                                                              // 5: octelium.api.main.auth.v1.ClientLoginRequest
	(*ClientLoginResponse)(nil),                                                             // 6: octelium.api.main.auth.v1.ClientLoginResponse
	(*LogoutRequest)(nil),                                                                   // 7: octelium.api.main.auth.v1.LogoutRequest
	(*LogoutResponse)(nil),                                                                  // 8: octelium.api.main.auth.v1.LogoutResponse
	(*RegisterDeviceBeginRequest)(nil),                                                      // 9: octelium.api.main.auth.v1.RegisterDeviceBeginRequest
	(*RegisterDeviceBeginResponse)(nil),                                                     // 10: octelium.api.main.auth.v1.RegisterDeviceBeginResponse
	(*RegisterDeviceFinishRequest)(nil),                                                     // 11: octelium.api.main.auth.v1.RegisterDeviceFinishRequest
	(*RegisterDeviceFinishResponse)(nil),                                                    // 12: octelium.api.main.auth.v1.RegisterDeviceFinishResponse
	(*AuthenticateWithAuthenticationTokenRequest)(nil),                                      // 13: octelium.api.main.auth.v1.AuthenticateWithAuthenticationTokenRequest
	(*AuthenticateWithAssertionRequest)(nil),                                                // 14: octelium.api.main.auth.v1.AuthenticateWithAssertionRequest
	(*AuthenticateWithRefreshTokenRequest)(nil),                                             // 15: octelium.api.main.auth.v1.AuthenticateWithRefreshTokenRequest
	(*TokenT0)(nil),                                                                         // 16: octelium.api.main.auth.v1.TokenT0
	(*AuthenticateAuthenticatorBeginRequest)(nil),                                           // 17: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginRequest
	(*AuthenticateAuthenticatorBeginResponse)(nil),                                          // 18: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse
	(*RegisterAuthenticatorBeginRequest)(nil),                                               // 19: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest
	(*RegisterAuthenticatorBeginResponse)(nil),                                              // 20: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse
	(*Authenticator)(nil),                                                                   // 21: octelium.api.main.auth.v1.Authenticator
	(*AuthenticatorList)(nil),                                                               // 22: octelium.api.main.auth.v1.AuthenticatorList
	(*ListAuthenticatorOptions)(nil),                                                        // 23: octelium.api.main.auth.v1.ListAuthenticatorOptions
	(*CreateAuthenticatorRequest)(nil),                                                      // 24: octelium.api.main.auth.v1.CreateAuthenticatorRequest
	(*RegisterAuthenticatorFinishRequest)(nil),                                              // 25: octelium.api.main.auth.v1.RegisterAuthenticatorFinishRequest
	(*RegisterAuthenticatorFinishResponse)(nil),                                             // 26: octelium.api.main.auth.v1.RegisterAuthenticatorFinishResponse
	(*ChallengeResponse)(nil),                                                               // 27: octelium.api.main.auth.v1.ChallengeResponse
	(*AuthenticateWithAuthenticatorRequest)(nil),                                            // 28: octelium.api.main.auth.v1.AuthenticateWithAuthenticatorRequest
	(*GetAvailableAuthenticatorRequest)(nil),                                                // 29: octelium.api.main.auth.v1.GetAvailableAuthenticatorRequest
	(*GetAvailableAuthenticatorResponse)(nil),                                               // 30: octelium.api.main.auth.v1.GetAvailableAuthenticatorResponse
	(*AuthenticateWithPasskeyBeginRequest)(nil),                                             // 31: octelium.api.main.auth.v1.AuthenticateWithPasskeyBeginRequest
	(*AuthenticateWithPasskeyBeginResponse)(nil),                                            // 32: octelium.api.main.auth.v1.AuthenticateWithPasskeyBeginResponse
	(*AuthenticateWithPasskeyRequest)(nil),                                                  // 33: octelium.api.main.auth.v1.AuthenticateWithPasskeyRequest
	(*RegisterDeviceBeginRequest_Info)(nil),                                                 // 34: octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info
	(*RegisterDeviceBeginResponse_Request)(nil),                                             // 35: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request
	(*RegisterDeviceBeginResponse_Request_Command)(nil),                                     // 36: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command
	(*RegisterDeviceBeginResponse_Request_File)(nil),                                        // 37: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File
	(*RegisterDeviceFinishRequest_Response)(nil),                                            // 38: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response
	(*RegisterDeviceFinishRequest_Response_Command)(nil),                                    // 39: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command
	(*RegisterDeviceFinishRequest_Response_File)(nil),                                       // 40: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File
	(*TokenT0_Content)(nil),                                                                 // 41: octelium.api.main.auth.v1.TokenT0.Content
	(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest)(nil),                         // 42: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest
	(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO)(nil),                    // 43: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO
	(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP)(nil),                    // 44: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP
	(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM)(nil),                     // 45: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM
	(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential)(nil), // 46: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
	(*RegisterAuthenticatorBeginRequest_PreChallenge)(nil),                                  // 47: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge
	(*RegisterAuthenticatorBeginRequest_PreChallenge_TPM)(nil),                              // 48: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM
	(*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters)(nil),        // 49: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters
	(*RegisterAuthenticatorBeginResponse_ChallengeRequest)(nil),                             // 50: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest
	(*RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO)(nil),                        // 51: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO
	(*RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP)(nil),                        // 52: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP
	(*RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM)(nil),                         // 53: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM
	(*RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential)(nil),     // 54: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
	(*Authenticator_Spec)(nil),                                                              // 55: octelium.api.main.auth.v1.Authenticator.Spec
	(*Authenticator_Status)(nil),                                                            // 56: octelium.api.main.auth.v1.Authenticator.Status
	(*ChallengeResponse_FIDO)(nil),                                                          // 57: octelium.api.main.auth.v1.ChallengeResponse.FIDO
	(*ChallengeResponse_TOTP)(nil),                                                          // 58: octelium.api.main.auth.v1.ChallengeResponse.TOTP
	(*ChallengeResponse_TPM)(nil),                                                           // 59: octelium.api.main.auth.v1.ChallengeResponse.TPM
	(*metav1.ObjectReference)(nil),                                                          // 60: octelium.api.main.meta.v1.ObjectReference
	(*metav1.Metadata)(nil),                                                                 // 61: octelium.api.main.meta.v1.Metadata
	(*metav1.ListResponseMeta)(nil),                                                         // 62: octelium.api.main.meta.v1.ListResponseMeta
	(*timestamppb.Timestamp)(nil),                                                           // 63: google.protobuf.Timestamp
	(*metav1.GetOptions)(nil),                                                               // 64: octelium.api.main.meta.v1.GetOptions
	(*metav1.DeleteOptions)(nil),                                                            // 65: octelium.api.main.meta.v1.DeleteOptions
	(*metav1.OperationResult)(nil),                                                          // 66: octelium.api.main.meta.v1.OperationResult
}
var file_authv1_proto_depIdxs = []int32{
	0,  // 0: octelium.api.main.auth.v1.ClientLoginRequest.apiVersion:type_name -> octelium.api.main.auth.v1.ClientLoginRequest.APIVersion
	34, // 1: octelium.api.main.auth.v1.RegisterDeviceBeginRequest.info:type_name -> octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info
	35, // 2: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.requests:type_name -> octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request
	38, // 3: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.responses:type_name -> octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response
	60, // 4: octelium.api.main.auth.v1.AuthenticateWithAssertionRequest.identityProviderRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	41, // 5: octelium.api.main.auth.v1.TokenT0.content:type_name -> octelium.api.main.auth.v1.TokenT0.Content
	60, // 6: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginRequest.authenticatorRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	42, // 7: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.challengeRequest:type_name -> octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest
	60, // 8: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.authenticatorRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	47, // 9: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.preChallenge:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge
	50, // 10: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.challengeRequest:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest
	61, // 11: octelium.api.main.auth.v1.Authenticator.metadata:type_name -> octelium.api.main.meta.v1.Metadata
	55, // 12: octelium.api.main.auth.v1.Authenticator.spec:type_name -> octelium.api.main.auth.v1.Authenticator.Spec
	56, // 13: octelium.api.main.auth.v1.Authenticator.status:type_name -> octelium.api.main.auth.v1.Authenticator.Status
	21, // 14: octelium.api.main.auth.v1.AuthenticatorList.items:type_name -> octelium.api.main.auth.v1.Authenticator
	62, // 15: octelium.api.main.auth.v1.AuthenticatorList.listResponseMeta:type_name -> octelium.api.main.meta.v1.ListResponseMeta
	3,  // 16: octelium.api.main.auth.v1.CreateAuthenticatorRequest.type:type_name -> octelium.api.main.auth.v1.Authenticator.Status.Type
	60, // 17: octelium.api.main.auth.v1.RegisterAuthenticatorFinishRequest.authenticatorRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	27, // 18: octelium.api.main.auth.v1.RegisterAuthenticatorFinishRequest.challengeResponse:type_name -> octelium.api.main.auth.v1.ChallengeResponse
	57, // 19: octelium.api.main.auth.v1.ChallengeResponse.fido:type_name -> octelium.api.main.auth.v1.ChallengeResponse.FIDO
	58, // 20: octelium.api.main.auth.v1.ChallengeResponse.totp:type_name -> octelium.api.main.auth.v1.ChallengeResponse.TOTP
	59, // 21: octelium.api.main.auth.v1.ChallengeResponse.tpm:type_name -> octelium.api.main.auth.v1.ChallengeResponse.TPM
	60, // 22: octelium.api.main.auth.v1.AuthenticateWithAuthenticatorRequest.authenticatorRef:type_name -> octelium.api.main.meta.v1.ObjectReference
	27, // 23: octelium.api.main.auth.v1.AuthenticateWithAuthenticatorRequest.challengeResponse:type_name -> octelium.api.main.auth.v1.ChallengeResponse
	21, // 24: octelium.api.main.auth.v1.GetAvailableAuthenticatorResponse.mainAuthenticator:type_name -> octelium.api.main.auth.v1.Authenticator
	21, // 25: octelium.api.main.auth.v1.GetAvailableAuthenticatorResponse.availableAuthenticators:type_name -> octelium.api.main.auth.v1.Authenticator
	1,  // 26: octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.osType:type_name -> octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.OSType
	36, // 27: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.command:type_name -> octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command
	37, // 28: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.file:type_name -> octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File
	39, // 29: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.command:type_name -> octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command
	40, // 30: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.file:type_name -> octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File
	2,  // 31: octelium.api.main.auth.v1.TokenT0.Content.type:type_name -> octelium.api.main.auth.v1.TokenT0.Content.Type
	63, // 32: octelium.api.main.auth.v1.TokenT0.Content.expiresAt:type_name -> google.protobuf.Timestamp
	43, // 33: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.fido:type_name -> octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO
	44, // 34: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.totp:type_name -> octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP
	45, // 35: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.tpm:type_name -> octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM
	46, // 36: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.encryptedCredential:type_name -> octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
	48, // 37: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.tpm:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM
	49, // 38: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.attestationParameters:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters
	51, // 39: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.fido:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO
	52, // 40: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.totp:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP
	53, // 41: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.tpm:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM
	54, // 42: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.encryptedCredential:type_name -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
	3,  // 43: octelium.api.main.auth.v1.Authenticator.Status.type:type_name -> octelium.api.main.auth.v1.Authenticator.Status.Type
	13, // 44: octelium.api.main.auth.v1.MainService.AuthenticateWithAuthenticationToken:input_type -> octelium.api.main.auth.v1.AuthenticateWithAuthenticationTokenRequest
	14, // 45: octelium.api.main.auth.v1.MainService.AuthenticateWithAssertion:input_type -> octelium.api.main.auth.v1.AuthenticateWithAssertionRequest
	15, // 46: octelium.api.main.auth.v1.MainService.AuthenticateWithRefreshToken:input_type -> octelium.api.main.auth.v1.AuthenticateWithRefreshTokenRequest
	28, // 47: octelium.api.main.auth.v1.MainService.AuthenticateWithAuthenticator:input_type -> octelium.api.main.auth.v1.AuthenticateWithAuthenticatorRequest
	7,  // 48: octelium.api.main.auth.v1.MainService.Logout:input_type -> octelium.api.main.auth.v1.LogoutRequest
	9,  // 49: octelium.api.main.auth.v1.MainService.RegisterDeviceBegin:input_type -> octelium.api.main.auth.v1.RegisterDeviceBeginRequest
	11, // 50: octelium.api.main.auth.v1.MainService.RegisterDeviceFinish:input_type -> octelium.api.main.auth.v1.RegisterDeviceFinishRequest
	64, // 51: octelium.api.main.auth.v1.MainService.GetAuthenticator:input_type -> octelium.api.main.meta.v1.GetOptions
	24, // 52: octelium.api.main.auth.v1.MainService.CreateAuthenticator:input_type -> octelium.api.main.auth.v1.CreateAuthenticatorRequest
	21, // 53: octelium.api.main.auth.v1.MainService.UpdateAuthenticator:input_type -> octelium.api.main.auth.v1.Authenticator
	23, // 54: octelium.api.main.auth.v1.MainService.ListAuthenticator:input_type -> octelium.api.main.auth.v1.ListAuthenticatorOptions
	65, // 55: octelium.api.main.auth.v1.MainService.DeleteAuthenticator:input_type -> octelium.api.main.meta.v1.DeleteOptions
	19, // 56: octelium.api.main.auth.v1.MainService.RegisterAuthenticatorBegin:input_type -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest
	25, // 57: octelium.api.main.auth.v1.MainService.RegisterAuthenticatorFinish:input_type -> octelium.api.main.auth.v1.RegisterAuthenticatorFinishRequest
	17, // 58: octelium.api.main.auth.v1.MainService.AuthenticateAuthenticatorBegin:input_type -> octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginRequest
	29, // 59: octelium.api.main.auth.v1.MainService.GetAvailableAuthenticator:input_type -> octelium.api.main.auth.v1.GetAvailableAuthenticatorRequest
	31, // 60: octelium.api.main.auth.v1.MainService.AuthenticateWithPasskeyBegin:input_type -> octelium.api.main.auth.v1.AuthenticateWithPasskeyBeginRequest
	33, // 61: octelium.api.main.auth.v1.MainService.AuthenticateWithPasskey:input_type -> octelium.api.main.auth.v1.AuthenticateWithPasskeyRequest
	4,  // 62: octelium.api.main.auth.v1.MainService.AuthenticateWithAuthenticationToken:output_type -> octelium.api.main.auth.v1.SessionToken
	4,  // 63: octelium.api.main.auth.v1.MainService.AuthenticateWithAssertion:output_type -> octelium.api.main.auth.v1.SessionToken
	4,  // 64: octelium.api.main.auth.v1.MainService.AuthenticateWithRefreshToken:output_type -> octelium.api.main.auth.v1.SessionToken
	4,  // 65: octelium.api.main.auth.v1.MainService.AuthenticateWithAuthenticator:output_type -> octelium.api.main.auth.v1.SessionToken
	8,  // 66: octelium.api.main.auth.v1.MainService.Logout:output_type -> octelium.api.main.auth.v1.LogoutResponse
	10, // 67: octelium.api.main.auth.v1.MainService.RegisterDeviceBegin:output_type -> octelium.api.main.auth.v1.RegisterDeviceBeginResponse
	12, // 68: octelium.api.main.auth.v1.MainService.RegisterDeviceFinish:output_type -> octelium.api.main.auth.v1.RegisterDeviceFinishResponse
	21, // 69: octelium.api.main.auth.v1.MainService.GetAuthenticator:output_type -> octelium.api.main.auth.v1.Authenticator
	21, // 70: octelium.api.main.auth.v1.MainService.CreateAuthenticator:output_type -> octelium.api.main.auth.v1.Authenticator
	21, // 71: octelium.api.main.auth.v1.MainService.UpdateAuthenticator:output_type -> octelium.api.main.auth.v1.Authenticator
	22, // 72: octelium.api.main.auth.v1.MainService.ListAuthenticator:output_type -> octelium.api.main.auth.v1.AuthenticatorList
	66, // 73: octelium.api.main.auth.v1.MainService.DeleteAuthenticator:output_type -> octelium.api.main.meta.v1.OperationResult
	20, // 74: octelium.api.main.auth.v1.MainService.RegisterAuthenticatorBegin:output_type -> octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse
	26, // 75: octelium.api.main.auth.v1.MainService.RegisterAuthenticatorFinish:output_type -> octelium.api.main.auth.v1.RegisterAuthenticatorFinishResponse
	18, // 76: octelium.api.main.auth.v1.MainService.AuthenticateAuthenticatorBegin:output_type -> octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse
	30, // 77: octelium.api.main.auth.v1.MainService.GetAvailableAuthenticator:output_type -> octelium.api.main.auth.v1.GetAvailableAuthenticatorResponse
	32, // 78: octelium.api.main.auth.v1.MainService.AuthenticateWithPasskeyBegin:output_type -> octelium.api.main.auth.v1.AuthenticateWithPasskeyBeginResponse
	4,  // 79: octelium.api.main.auth.v1.MainService.AuthenticateWithPasskey:output_type -> octelium.api.main.auth.v1.SessionToken
	62, // [62:80] is the sub-list for method output_type
	44, // [44:62] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_authv1_proto_init() }
func file_authv1_proto_init() {
	if File_authv1_proto != nil {
		return
	}
	file_authv1_proto_msgTypes[23].OneofWrappers = []any{
		(*ChallengeResponse_Fido)(nil),
		(*ChallengeResponse_Totp)(nil),
		(*ChallengeResponse_Tpm)(nil),
	}
	file_authv1_proto_msgTypes[31].OneofWrappers = []any{
		(*RegisterDeviceBeginResponse_Request_Command_)(nil),
		(*RegisterDeviceBeginResponse_Request_File_)(nil),
	}
	file_authv1_proto_msgTypes[34].OneofWrappers = []any{
		(*RegisterDeviceFinishRequest_Response_Command_)(nil),
		(*RegisterDeviceFinishRequest_Response_File_)(nil),
	}
	file_authv1_proto_msgTypes[38].OneofWrappers = []any{
		(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Fido)(nil),
		(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Totp)(nil),
		(*AuthenticateAuthenticatorBeginResponse_ChallengeRequest_Tpm)(nil),
	}
	file_authv1_proto_msgTypes[43].OneofWrappers = []any{
		(*RegisterAuthenticatorBeginRequest_PreChallenge_Tpm)(nil),
	}
	file_authv1_proto_msgTypes[44].OneofWrappers = []any{
		(*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkCertificateDER)(nil),
		(*RegisterAuthenticatorBeginRequest_PreChallenge_TPM_EkPublicKey)(nil),
	}
	file_authv1_proto_msgTypes[46].OneofWrappers = []any{
		(*RegisterAuthenticatorBeginResponse_ChallengeRequest_Fido)(nil),
		(*RegisterAuthenticatorBeginResponse_ChallengeRequest_Totp)(nil),
		(*RegisterAuthenticatorBeginResponse_ChallengeRequest_Tpm)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authv1_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authv1_proto_goTypes,
		DependencyIndexes: file_authv1_proto_depIdxs,
		EnumInfos:         file_authv1_proto_enumTypes,
		MessageInfos:      file_authv1_proto_msgTypes,
	}.Build()
	File_authv1_proto = out.File
	file_authv1_proto_rawDesc = nil
	file_authv1_proto_goTypes = nil
	file_authv1_proto_depIdxs = nil
}
