// @generated by protobuf-ts 2.10.0 with parameter long_type_number
// @generated from protobuf file "apis/protobuf/main/userv1/userv1.proto" (package "octelium.api.main.user.v1", syntax proto3)
// tslint:disable
//
// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { MainService } from "./userv1";
import type { Service } from "./userv1";
import type { GetOptions } from "../metav1/metav1";
import type { SetServiceConfigsResponse } from "./userv1";
import type { SetServiceConfigsRequest } from "./userv1";
import type { GetStatusResponse } from "./userv1";
import type { GetStatusRequest } from "./userv1";
import type { NamespaceList } from "./userv1";
import type { ListNamespaceOptions } from "./userv1";
import type { ServiceList } from "./userv1";
import type { ListServiceOptions } from "./userv1";
import type { DisconnectResponse } from "./userv1";
import type { DisconnectRequest } from "./userv1";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ConnectResponse } from "./userv1";
import type { ConnectRequest } from "./userv1";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service octelium.api.main.user.v1.MainService
 */
export interface IMainServiceClient {
    /**
     * Connect connects to the Cluster
     *
     * @generated from protobuf rpc: Connect(stream octelium.api.main.user.v1.ConnectRequest) returns (stream octelium.api.main.user.v1.ConnectResponse);
     */
    connect(options?: RpcOptions): DuplexStreamingCall<ConnectRequest, ConnectResponse>;
    /**
     * Disconnect disconnects from a Cluster
     *
     * @generated from protobuf rpc: Disconnect(octelium.api.main.user.v1.DisconnectRequest) returns (octelium.api.main.user.v1.DisconnectResponse);
     */
    disconnect(input: DisconnectRequest, options?: RpcOptions): UnaryCall<DisconnectRequest, DisconnectResponse>;
    /**
     * ListService lists Services
     *
     * @generated from protobuf rpc: ListService(octelium.api.main.user.v1.ListServiceOptions) returns (octelium.api.main.user.v1.ServiceList);
     */
    listService(input: ListServiceOptions, options?: RpcOptions): UnaryCall<ListServiceOptions, ServiceList>;
    /**
     * ListNamespace lists Namespaces
     *
     * @generated from protobuf rpc: ListNamespace(octelium.api.main.user.v1.ListNamespaceOptions) returns (octelium.api.main.user.v1.NamespaceList);
     */
    listNamespace(input: ListNamespaceOptions, options?: RpcOptions): UnaryCall<ListNamespaceOptions, NamespaceList>;
    /**
     * GetStatus retrieves User status
     *
     * @generated from protobuf rpc: GetStatus(octelium.api.main.user.v1.GetStatusRequest) returns (octelium.api.main.user.v1.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse>;
    /**
     * SetServiceConfigs sets the Service configs needed to use the Service from
     * the client host (e.g. setting up kubeconfigs)
     *
     * @generated from protobuf rpc: SetServiceConfigs(octelium.api.main.user.v1.SetServiceConfigsRequest) returns (octelium.api.main.user.v1.SetServiceConfigsResponse);
     */
    setServiceConfigs(input: SetServiceConfigsRequest, options?: RpcOptions): UnaryCall<SetServiceConfigsRequest, SetServiceConfigsResponse>;
    /**
     * GetService retrieves a Service
     *
     * @generated from protobuf rpc: GetService(octelium.api.main.meta.v1.GetOptions) returns (octelium.api.main.user.v1.Service);
     */
    getService(input: GetOptions, options?: RpcOptions): UnaryCall<GetOptions, Service>;
}
/**
 * @generated from protobuf service octelium.api.main.user.v1.MainService
 */
export class MainServiceClient implements IMainServiceClient, ServiceInfo {
    typeName = MainService.typeName;
    methods = MainService.methods;
    options = MainService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Connect connects to the Cluster
     *
     * @generated from protobuf rpc: Connect(stream octelium.api.main.user.v1.ConnectRequest) returns (stream octelium.api.main.user.v1.ConnectResponse);
     */
    connect(options?: RpcOptions): DuplexStreamingCall<ConnectRequest, ConnectResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConnectRequest, ConnectResponse>("duplex", this._transport, method, opt);
    }
    /**
     * Disconnect disconnects from a Cluster
     *
     * @generated from protobuf rpc: Disconnect(octelium.api.main.user.v1.DisconnectRequest) returns (octelium.api.main.user.v1.DisconnectResponse);
     */
    disconnect(input: DisconnectRequest, options?: RpcOptions): UnaryCall<DisconnectRequest, DisconnectResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DisconnectRequest, DisconnectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ListService lists Services
     *
     * @generated from protobuf rpc: ListService(octelium.api.main.user.v1.ListServiceOptions) returns (octelium.api.main.user.v1.ServiceList);
     */
    listService(input: ListServiceOptions, options?: RpcOptions): UnaryCall<ListServiceOptions, ServiceList> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListServiceOptions, ServiceList>("unary", this._transport, method, opt, input);
    }
    /**
     * ListNamespace lists Namespaces
     *
     * @generated from protobuf rpc: ListNamespace(octelium.api.main.user.v1.ListNamespaceOptions) returns (octelium.api.main.user.v1.NamespaceList);
     */
    listNamespace(input: ListNamespaceOptions, options?: RpcOptions): UnaryCall<ListNamespaceOptions, NamespaceList> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListNamespaceOptions, NamespaceList>("unary", this._transport, method, opt, input);
    }
    /**
     * GetStatus retrieves User status
     *
     * @generated from protobuf rpc: GetStatus(octelium.api.main.user.v1.GetStatusRequest) returns (octelium.api.main.user.v1.GetStatusResponse);
     */
    getStatus(input: GetStatusRequest, options?: RpcOptions): UnaryCall<GetStatusRequest, GetStatusResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetStatusRequest, GetStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SetServiceConfigs sets the Service configs needed to use the Service from
     * the client host (e.g. setting up kubeconfigs)
     *
     * @generated from protobuf rpc: SetServiceConfigs(octelium.api.main.user.v1.SetServiceConfigsRequest) returns (octelium.api.main.user.v1.SetServiceConfigsResponse);
     */
    setServiceConfigs(input: SetServiceConfigsRequest, options?: RpcOptions): UnaryCall<SetServiceConfigsRequest, SetServiceConfigsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetServiceConfigsRequest, SetServiceConfigsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GetService retrieves a Service
     *
     * @generated from protobuf rpc: GetService(octelium.api.main.meta.v1.GetOptions) returns (octelium.api.main.user.v1.Service);
     */
    getService(input: GetOptions, options?: RpcOptions): UnaryCall<GetOptions, Service> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOptions, Service>("unary", this._transport, method, opt, input);
    }
}
