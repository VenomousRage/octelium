// @generated by protobuf-ts 2.10.0 with parameter long_type_number
// @generated from protobuf file "apis/protobuf/main/authv1/authv1.proto" (package "octelium.api.main.auth.v1", syntax proto3)
// tslint:disable
//
// Copyright Octelium Labs, LLC. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import { OperationResult } from "../metav1/metav1";
import { DeleteOptions } from "../metav1/metav1";
import { GetOptions } from "../metav1/metav1";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ListResponseMeta } from "../metav1/metav1";
import { Metadata } from "../metav1/metav1";
import { Timestamp } from "../google/protobuf/timestamp";
import { ObjectReference } from "../metav1/metav1";
/**
 * @generated from protobuf message octelium.api.main.auth.v1.SessionToken
 */
export interface SessionToken {
    /**
     * @generated from protobuf field: string accessToken = 1;
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string refreshToken = 2;
     */
    refreshToken: string;
    /**
     * @generated from protobuf field: int64 expiresIn = 3;
     */
    expiresIn: number;
    /**
     * @generated from protobuf field: int64 refreshTokenExpiresIn = 4;
     */
    refreshTokenExpiresIn: number;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.ClientLoginRequest
 */
export interface ClientLoginRequest {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.ClientLoginRequest.APIVersion apiVersion = 1;
     */
    apiVersion: ClientLoginRequest_APIVersion;
    /**
     * @generated from protobuf field: uint32 callbackPort = 2;
     */
    callbackPort: number;
    /**
     * @generated from protobuf field: string callbackSuffix = 3;
     */
    callbackSuffix: string;
}
/**
 * @generated from protobuf enum octelium.api.main.auth.v1.ClientLoginRequest.APIVersion
 */
export enum ClientLoginRequest_APIVersion {
    /**
     * @generated from protobuf enum value: UNKNOWN_VERSION = 0;
     */
    UNKNOWN_VERSION = 0,
    /**
     * @generated from protobuf enum value: V1 = 1;
     */
    V1 = 1
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.ClientLoginResponse
 */
export interface ClientLoginResponse {
    /**
     * @generated from protobuf field: string authenticationToken = 1;
     */
    authenticationToken: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.LogoutRequest
 */
export interface LogoutRequest {
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.LogoutResponse
 */
export interface LogoutResponse {
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginRequest
 */
export interface RegisterDeviceBeginRequest {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info info = 1;
     */
    info?: RegisterDeviceBeginRequest_Info;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info
 */
export interface RegisterDeviceBeginRequest_Info {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.OSType osType = 1;
     */
    osType: RegisterDeviceBeginRequest_Info_OSType;
    /**
     * @generated from protobuf field: string hostname = 2;
     */
    hostname: string;
    /**
     * @generated from protobuf field: string id = 3;
     */
    id: string;
    /**
     * @generated from protobuf field: string serialNumber = 4;
     */
    serialNumber: string;
    /**
     * @generated from protobuf field: repeated string macAddresses = 5;
     */
    macAddresses: string[];
}
/**
 * @generated from protobuf enum octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.OSType
 */
export enum RegisterDeviceBeginRequest_Info_OSType {
    /**
     * @generated from protobuf enum value: OS_TYPE_UNKNOWN = 0;
     */
    OS_TYPE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: LINUX = 1;
     */
    LINUX = 1,
    /**
     * @generated from protobuf enum value: WINDOWS = 2;
     */
    WINDOWS = 2,
    /**
     * @generated from protobuf enum value: MAC = 3;
     */
    MAC = 3,
    /**
     * @generated from protobuf enum value: ANDROID = 4;
     */
    ANDROID = 4,
    /**
     * @generated from protobuf enum value: IOS = 5;
     */
    IOS = 5
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse
 */
export interface RegisterDeviceBeginResponse {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
    /**
     * @generated from protobuf field: repeated octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request requests = 2;
     */
    requests: RegisterDeviceBeginResponse_Request[];
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request
 */
export interface RegisterDeviceBeginResponse_Request {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "command";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command command = 2;
         */
        command: RegisterDeviceBeginResponse_Request_Command;
    } | {
        oneofKind: "file";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File file = 3;
         */
        file: RegisterDeviceBeginResponse_Request_File;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command
 */
export interface RegisterDeviceBeginResponse_Request_Command {
    /**
     * @generated from protobuf field: string command = 1;
     */
    command: string;
    /**
     * @generated from protobuf field: repeated string args = 2;
     */
    args: string[];
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File
 */
export interface RegisterDeviceBeginResponse_Request_File {
    /**
     * @generated from protobuf field: string path = 1;
     */
    path: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest
 */
export interface RegisterDeviceFinishRequest {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
    /**
     * @generated from protobuf field: repeated octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response responses = 2;
     */
    responses: RegisterDeviceFinishRequest_Response[];
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response
 */
export interface RegisterDeviceFinishRequest_Response {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "command";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command command = 2;
         */
        command: RegisterDeviceFinishRequest_Response_Command;
    } | {
        oneofKind: "file";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File file = 3;
         */
        file: RegisterDeviceFinishRequest_Response_File;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command
 */
export interface RegisterDeviceFinishRequest_Response_Command {
    /**
     * @generated from protobuf field: bytes output = 1;
     */
    output: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File
 */
export interface RegisterDeviceFinishRequest_Response_File {
    /**
     * @generated from protobuf field: bytes output = 1;
     */
    output: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishResponse
 */
export interface RegisterDeviceFinishResponse {
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateWithAuthenticationTokenRequest
 */
export interface AuthenticateWithAuthenticationTokenRequest {
    /**
     * @generated from protobuf field: string authenticationToken = 1;
     */
    authenticationToken: string;
    /**
     * @generated from protobuf field: repeated string scopes = 2;
     */
    scopes: string[];
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateWithAssertionRequest
 */
export interface AuthenticateWithAssertionRequest {
    /**
     * @generated from protobuf field: octelium.api.main.meta.v1.ObjectReference identityProviderRef = 1;
     */
    identityProviderRef?: ObjectReference;
    /**
     * @generated from protobuf field: string assertion = 2;
     */
    assertion: string;
    /**
     * @generated from protobuf field: repeated string scopes = 3;
     */
    scopes: string[];
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateWithRefreshTokenRequest
 */
export interface AuthenticateWithRefreshTokenRequest {
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.TokenT0
 */
export interface TokenT0 {
    /**
     * @generated from protobuf field: bytes signature = 1;
     */
    signature: Uint8Array;
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.TokenT0.Content content = 2;
     */
    content?: TokenT0_Content;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.TokenT0.Content
 */
export interface TokenT0_Content {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.TokenT0.Content.Type type = 1;
     */
    type: TokenT0_Content_Type;
    /**
     * @generated from protobuf field: bytes keyID = 2;
     */
    keyID: Uint8Array;
    /**
     * @generated from protobuf field: bytes subject = 3;
     */
    subject: Uint8Array;
    /**
     * @generated from protobuf field: bytes tokenID = 4;
     */
    tokenID: Uint8Array;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiresAt = 5;
     */
    expiresAt?: Timestamp;
}
/**
 * @generated from protobuf enum octelium.api.main.auth.v1.TokenT0.Content.Type
 */
export enum TokenT0_Content_Type {
    /**
     * @generated from protobuf enum value: TYPE_UNKNOWN = 0;
     */
    TYPE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: ACCESS_TOKEN = 1;
     */
    ACCESS_TOKEN = 1,
    /**
     * @generated from protobuf enum value: REFRESH_TOKEN = 2;
     */
    REFRESH_TOKEN = 2,
    /**
     * @generated from protobuf enum value: CREDENTIAL = 3;
     */
    CREDENTIAL = 3
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginRequest
 */
export interface AuthenticateAuthenticatorBeginRequest {
    /**
     * @generated from protobuf field: octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1;
     */
    authenticatorRef?: ObjectReference;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse
 */
export interface AuthenticateAuthenticatorBeginResponse {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest challengeRequest = 1;
     */
    challengeRequest?: AuthenticateAuthenticatorBeginResponse_ChallengeRequest;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest
 */
export interface AuthenticateAuthenticatorBeginResponse_ChallengeRequest {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "fido";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO fido = 1;
         */
        fido: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO;
    } | {
        oneofKind: "totp";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP totp = 2;
         */
        totp: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP;
    } | {
        oneofKind: "tpm";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM tpm = 3;
         */
        tpm: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO
 */
export interface AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO {
    /**
     * @generated from protobuf field: string request = 1;
     */
    request: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP
 */
export interface AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP {
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM
 */
export interface AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential encryptedCredential = 1;
     */
    encryptedCredential?: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential;
    /**
     * @generated from protobuf field: bytes akBytes = 2;
     */
    akBytes: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
 */
export interface AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
    /**
     * @generated from protobuf field: bytes credential = 1;
     */
    credential: Uint8Array;
    /**
     * @generated from protobuf field: bytes secret = 2;
     */
    secret: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest
 */
export interface RegisterAuthenticatorBeginRequest {
    /**
     * @generated from protobuf field: octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1;
     */
    authenticatorRef?: ObjectReference;
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge preChallenge = 2;
     */
    preChallenge?: RegisterAuthenticatorBeginRequest_PreChallenge;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge
 */
export interface RegisterAuthenticatorBeginRequest_PreChallenge {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "tpm";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM tpm = 1;
         */
        tpm: RegisterAuthenticatorBeginRequest_PreChallenge_TPM;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM
 */
export interface RegisterAuthenticatorBeginRequest_PreChallenge_TPM {
    /**
     * @generated from protobuf field: bytes akBytes = 1;
     */
    akBytes: Uint8Array;
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters attestationParameters = 2;
     */
    attestationParameters?: RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters;
    /**
     * @generated from protobuf oneof: ekType
     */
    ekType: {
        oneofKind: "ekCertificateDER";
        /**
         * @generated from protobuf field: bytes ekCertificateDER = 3;
         */
        ekCertificateDER: Uint8Array;
    } | {
        oneofKind: "ekPublicKey";
        /**
         * @generated from protobuf field: bytes ekPublicKey = 4;
         */
        ekPublicKey: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters
 */
export interface RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters {
    /**
     * @generated from protobuf field: bytes public = 1;
     */
    public: Uint8Array;
    /**
     * @generated from protobuf field: bytes createData = 2;
     */
    createData: Uint8Array;
    /**
     * @generated from protobuf field: bytes createAttestation = 3;
     */
    createAttestation: Uint8Array;
    /**
     * @generated from protobuf field: bytes createSignature = 4;
     */
    createSignature: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse
 */
export interface RegisterAuthenticatorBeginResponse {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest challengeRequest = 1;
     */
    challengeRequest?: RegisterAuthenticatorBeginResponse_ChallengeRequest;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest
 */
export interface RegisterAuthenticatorBeginResponse_ChallengeRequest {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "fido";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO fido = 1;
         */
        fido: RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO;
    } | {
        oneofKind: "totp";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP totp = 2;
         */
        totp: RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP;
    } | {
        oneofKind: "tpm";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM tpm = 3;
         */
        tpm: RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO
 */
export interface RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO {
    /**
     * @generated from protobuf field: string request = 1;
     */
    request: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP
 */
export interface RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM
 */
export interface RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential encryptedCredential = 1;
     */
    encryptedCredential?: RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential;
    /**
     * @generated from protobuf field: bytes akBytes = 2;
     */
    akBytes: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
 */
export interface RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
    /**
     * @generated from protobuf field: bytes credential = 1;
     */
    credential: Uint8Array;
    /**
     * @generated from protobuf field: bytes secret = 2;
     */
    secret: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.Authenticator
 */
export interface Authenticator {
    /**
     * APIVersion is the API version of the object.
     *
     * @generated from protobuf field: string apiVersion = 1;
     */
    apiVersion: string;
    /**
     * Kind is the resource name (i.e. `Group`).
     *
     * @generated from protobuf field: string kind = 2;
     */
    kind: string;
    /**
     * octelium.api.main.meta.v1.Metadata is the object's metadata.
     *
     * @generated from protobuf field: octelium.api.main.meta.v1.Metadata metadata = 3;
     */
    metadata?: Metadata;
    /**
     * Spec is the Group specification.
     *
     * @generated from protobuf field: octelium.api.main.auth.v1.Authenticator.Spec spec = 4;
     */
    spec?: Authenticator_Spec;
    /**
     * Status is the current status of the Group.
     *
     * @generated from protobuf field: octelium.api.main.auth.v1.Authenticator.Status status = 5;
     */
    status?: Authenticator_Status;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.Authenticator.Spec
 */
export interface Authenticator_Spec {
    /**
     * @generated from protobuf field: string displayName = 1;
     */
    displayName: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.Authenticator.Status
 */
export interface Authenticator_Status {
    /**
     * @generated from protobuf field: bool isRegistered = 1;
     */
    isRegistered: boolean;
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.Authenticator.Status.Type type = 2;
     */
    type: Authenticator_Status_Type;
}
/**
 * @generated from protobuf enum octelium.api.main.auth.v1.Authenticator.Status.Type
 */
export enum Authenticator_Status_Type {
    /**
     * @generated from protobuf enum value: TYPE_UNKNOWN = 0;
     */
    TYPE_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: FIDO = 1;
     */
    FIDO = 1,
    /**
     * @generated from protobuf enum value: TOTP = 2;
     */
    TOTP = 2,
    /**
     * @generated from protobuf enum value: TPM = 3;
     */
    TPM = 3
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticatorList
 */
export interface AuthenticatorList {
    /**
     * APIVersion is the API version of the object.
     *
     * @generated from protobuf field: string apiVersion = 1;
     */
    apiVersion: string;
    /**
     * Kind is the resource name (i.e. `GroupList`).
     *
     * @generated from protobuf field: string kind = 2;
     */
    kind: string;
    /**
     * Items is the list of Groups.
     *
     * @generated from protobuf field: repeated octelium.api.main.auth.v1.Authenticator items = 3;
     */
    items: Authenticator[];
    /**
     * ListResponseMeta is common information about the list.
     *
     * @generated from protobuf field: octelium.api.main.meta.v1.ListResponseMeta listResponseMeta = 4;
     */
    listResponseMeta?: ListResponseMeta;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.ListAuthenticatorOptions
 */
export interface ListAuthenticatorOptions {
    /**
     * Page is the page number. Starts at 0
     *
     * @generated from protobuf field: uint32 page = 1;
     */
    page: number;
    /**
     * ItemsPerPage is the number of items per page
     *
     * @generated from protobuf field: uint32 itemsPerPage = 2;
     */
    itemsPerPage: number;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.CreateAuthenticatorRequest
 */
export interface CreateAuthenticatorRequest {
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.Authenticator.Status.Type type = 1;
     */
    type: Authenticator_Status_Type;
    /**
     * @generated from protobuf field: string displayName = 2;
     */
    displayName: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorFinishRequest
 */
export interface RegisterAuthenticatorFinishRequest {
    /**
     * @generated from protobuf field: octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1;
     */
    authenticatorRef?: ObjectReference;
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.ChallengeResponse challengeResponse = 2;
     */
    challengeResponse?: ChallengeResponse;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorFinishResponse
 */
export interface RegisterAuthenticatorFinishResponse {
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.ChallengeResponse
 */
export interface ChallengeResponse {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "fido";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.ChallengeResponse.FIDO fido = 1;
         */
        fido: ChallengeResponse_FIDO;
    } | {
        oneofKind: "totp";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.ChallengeResponse.TOTP totp = 2;
         */
        totp: ChallengeResponse_TOTP;
    } | {
        oneofKind: "tpm";
        /**
         * @generated from protobuf field: octelium.api.main.auth.v1.ChallengeResponse.TPM tpm = 3;
         */
        tpm: ChallengeResponse_TPM;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.ChallengeResponse.FIDO
 */
export interface ChallengeResponse_FIDO {
    /**
     * @generated from protobuf field: string response = 1;
     */
    response: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.ChallengeResponse.TOTP
 */
export interface ChallengeResponse_TOTP {
    /**
     * @generated from protobuf field: string response = 1;
     */
    response: string;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.ChallengeResponse.TPM
 */
export interface ChallengeResponse_TPM {
    /**
     * @generated from protobuf field: bytes response = 1;
     */
    response: Uint8Array;
}
/**
 * @generated from protobuf message octelium.api.main.auth.v1.AuthenticateWithAuthenticatorRequest
 */
export interface AuthenticateWithAuthenticatorRequest {
    /**
     * @generated from protobuf field: octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1;
     */
    authenticatorRef?: ObjectReference;
    /**
     * @generated from protobuf field: octelium.api.main.auth.v1.ChallengeResponse challengeResponse = 2;
     */
    challengeResponse?: ChallengeResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class SessionToken$Type extends MessageType<SessionToken> {
    constructor() {
        super("octelium.api.main.auth.v1.SessionToken", [
            { no: 1, name: "accessToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refreshToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expiresIn", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "refreshTokenExpiresIn", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<SessionToken>): SessionToken {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessToken = "";
        message.refreshToken = "";
        message.expiresIn = 0;
        message.refreshTokenExpiresIn = 0;
        if (value !== undefined)
            reflectionMergePartial<SessionToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionToken): SessionToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string accessToken */ 1:
                    message.accessToken = reader.string();
                    break;
                case /* string refreshToken */ 2:
                    message.refreshToken = reader.string();
                    break;
                case /* int64 expiresIn */ 3:
                    message.expiresIn = reader.int64().toNumber();
                    break;
                case /* int64 refreshTokenExpiresIn */ 4:
                    message.refreshTokenExpiresIn = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string accessToken = 1; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* string refreshToken = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        /* int64 expiresIn = 3; */
        if (message.expiresIn !== 0)
            writer.tag(3, WireType.Varint).int64(message.expiresIn);
        /* int64 refreshTokenExpiresIn = 4; */
        if (message.refreshTokenExpiresIn !== 0)
            writer.tag(4, WireType.Varint).int64(message.refreshTokenExpiresIn);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.SessionToken
 */
export const SessionToken = new SessionToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientLoginRequest$Type extends MessageType<ClientLoginRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.ClientLoginRequest", [
            { no: 1, name: "apiVersion", kind: "enum", T: () => ["octelium.api.main.auth.v1.ClientLoginRequest.APIVersion", ClientLoginRequest_APIVersion] },
            { no: 2, name: "callbackPort", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "callbackSuffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientLoginRequest>): ClientLoginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.apiVersion = 0;
        message.callbackPort = 0;
        message.callbackSuffix = "";
        if (value !== undefined)
            reflectionMergePartial<ClientLoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientLoginRequest): ClientLoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.ClientLoginRequest.APIVersion apiVersion */ 1:
                    message.apiVersion = reader.int32();
                    break;
                case /* uint32 callbackPort */ 2:
                    message.callbackPort = reader.uint32();
                    break;
                case /* string callbackSuffix */ 3:
                    message.callbackSuffix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientLoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.ClientLoginRequest.APIVersion apiVersion = 1; */
        if (message.apiVersion !== 0)
            writer.tag(1, WireType.Varint).int32(message.apiVersion);
        /* uint32 callbackPort = 2; */
        if (message.callbackPort !== 0)
            writer.tag(2, WireType.Varint).uint32(message.callbackPort);
        /* string callbackSuffix = 3; */
        if (message.callbackSuffix !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.callbackSuffix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.ClientLoginRequest
 */
export const ClientLoginRequest = new ClientLoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientLoginResponse$Type extends MessageType<ClientLoginResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.ClientLoginResponse", [
            { no: 1, name: "authenticationToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientLoginResponse>): ClientLoginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.authenticationToken = "";
        if (value !== undefined)
            reflectionMergePartial<ClientLoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientLoginResponse): ClientLoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string authenticationToken */ 1:
                    message.authenticationToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientLoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string authenticationToken = 1; */
        if (message.authenticationToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.authenticationToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.ClientLoginResponse
 */
export const ClientLoginResponse = new ClientLoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutRequest$Type extends MessageType<LogoutRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.LogoutRequest", []);
    }
    create(value?: PartialMessage<LogoutRequest>): LogoutRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LogoutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutRequest): LogoutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.LogoutRequest
 */
export const LogoutRequest = new LogoutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutResponse$Type extends MessageType<LogoutResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.LogoutResponse", []);
    }
    create(value?: PartialMessage<LogoutResponse>): LogoutResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LogoutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutResponse): LogoutResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.LogoutResponse
 */
export const LogoutResponse = new LogoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceBeginRequest$Type extends MessageType<RegisterDeviceBeginRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceBeginRequest", [
            { no: 1, name: "info", kind: "message", T: () => RegisterDeviceBeginRequest_Info }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceBeginRequest>): RegisterDeviceBeginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceBeginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceBeginRequest): RegisterDeviceBeginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info info */ 1:
                    message.info = RegisterDeviceBeginRequest_Info.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceBeginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info info = 1; */
        if (message.info)
            RegisterDeviceBeginRequest_Info.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginRequest
 */
export const RegisterDeviceBeginRequest = new RegisterDeviceBeginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceBeginRequest_Info$Type extends MessageType<RegisterDeviceBeginRequest_Info> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info", [
            { no: 1, name: "osType", kind: "enum", T: () => ["octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.OSType", RegisterDeviceBeginRequest_Info_OSType] },
            { no: 2, name: "hostname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "serialNumber", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "macAddresses", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceBeginRequest_Info>): RegisterDeviceBeginRequest_Info {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.osType = 0;
        message.hostname = "";
        message.id = "";
        message.serialNumber = "";
        message.macAddresses = [];
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceBeginRequest_Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceBeginRequest_Info): RegisterDeviceBeginRequest_Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.OSType osType */ 1:
                    message.osType = reader.int32();
                    break;
                case /* string hostname */ 2:
                    message.hostname = reader.string();
                    break;
                case /* string id */ 3:
                    message.id = reader.string();
                    break;
                case /* string serialNumber */ 4:
                    message.serialNumber = reader.string();
                    break;
                case /* repeated string macAddresses */ 5:
                    message.macAddresses.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceBeginRequest_Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info.OSType osType = 1; */
        if (message.osType !== 0)
            writer.tag(1, WireType.Varint).int32(message.osType);
        /* string hostname = 2; */
        if (message.hostname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.hostname);
        /* string id = 3; */
        if (message.id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.id);
        /* string serialNumber = 4; */
        if (message.serialNumber !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.serialNumber);
        /* repeated string macAddresses = 5; */
        for (let i = 0; i < message.macAddresses.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.macAddresses[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginRequest.Info
 */
export const RegisterDeviceBeginRequest_Info = new RegisterDeviceBeginRequest_Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceBeginResponse$Type extends MessageType<RegisterDeviceBeginResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceBeginResponse", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "requests", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RegisterDeviceBeginResponse_Request }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceBeginResponse>): RegisterDeviceBeginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = "";
        message.requests = [];
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceBeginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceBeginResponse): RegisterDeviceBeginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                case /* repeated octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request requests */ 2:
                    message.requests.push(RegisterDeviceBeginResponse_Request.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceBeginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        /* repeated octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request requests = 2; */
        for (let i = 0; i < message.requests.length; i++)
            RegisterDeviceBeginResponse_Request.internalBinaryWrite(message.requests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse
 */
export const RegisterDeviceBeginResponse = new RegisterDeviceBeginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceBeginResponse_Request$Type extends MessageType<RegisterDeviceBeginResponse_Request> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "command", kind: "message", oneof: "type", T: () => RegisterDeviceBeginResponse_Request_Command },
            { no: 3, name: "file", kind: "message", oneof: "type", T: () => RegisterDeviceBeginResponse_Request_File }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceBeginResponse_Request>): RegisterDeviceBeginResponse_Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = "";
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceBeginResponse_Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceBeginResponse_Request): RegisterDeviceBeginResponse_Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                case /* octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command command */ 2:
                    message.type = {
                        oneofKind: "command",
                        command: RegisterDeviceBeginResponse_Request_Command.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).command)
                    };
                    break;
                case /* octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File file */ 3:
                    message.type = {
                        oneofKind: "file",
                        file: RegisterDeviceBeginResponse_Request_File.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).file)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceBeginResponse_Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        /* octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command command = 2; */
        if (message.type.oneofKind === "command")
            RegisterDeviceBeginResponse_Request_Command.internalBinaryWrite(message.type.command, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File file = 3; */
        if (message.type.oneofKind === "file")
            RegisterDeviceBeginResponse_Request_File.internalBinaryWrite(message.type.file, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request
 */
export const RegisterDeviceBeginResponse_Request = new RegisterDeviceBeginResponse_Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceBeginResponse_Request_Command$Type extends MessageType<RegisterDeviceBeginResponse_Request_Command> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command", [
            { no: 1, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "args", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceBeginResponse_Request_Command>): RegisterDeviceBeginResponse_Request_Command {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = "";
        message.args = [];
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceBeginResponse_Request_Command>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceBeginResponse_Request_Command): RegisterDeviceBeginResponse_Request_Command {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string command */ 1:
                    message.command = reader.string();
                    break;
                case /* repeated string args */ 2:
                    message.args.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceBeginResponse_Request_Command, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string command = 1; */
        if (message.command !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.command);
        /* repeated string args = 2; */
        for (let i = 0; i < message.args.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.args[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.Command
 */
export const RegisterDeviceBeginResponse_Request_Command = new RegisterDeviceBeginResponse_Request_Command$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceBeginResponse_Request_File$Type extends MessageType<RegisterDeviceBeginResponse_Request_File> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceBeginResponse_Request_File>): RegisterDeviceBeginResponse_Request_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceBeginResponse_Request_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceBeginResponse_Request_File): RegisterDeviceBeginResponse_Request_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceBeginResponse_Request_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceBeginResponse.Request.File
 */
export const RegisterDeviceBeginResponse_Request_File = new RegisterDeviceBeginResponse_Request_File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceFinishRequest$Type extends MessageType<RegisterDeviceFinishRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceFinishRequest", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "responses", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RegisterDeviceFinishRequest_Response }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceFinishRequest>): RegisterDeviceFinishRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = "";
        message.responses = [];
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceFinishRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceFinishRequest): RegisterDeviceFinishRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                case /* repeated octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response responses */ 2:
                    message.responses.push(RegisterDeviceFinishRequest_Response.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceFinishRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        /* repeated octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response responses = 2; */
        for (let i = 0; i < message.responses.length; i++)
            RegisterDeviceFinishRequest_Response.internalBinaryWrite(message.responses[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest
 */
export const RegisterDeviceFinishRequest = new RegisterDeviceFinishRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceFinishRequest_Response$Type extends MessageType<RegisterDeviceFinishRequest_Response> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "command", kind: "message", oneof: "type", T: () => RegisterDeviceFinishRequest_Response_Command },
            { no: 3, name: "file", kind: "message", oneof: "type", T: () => RegisterDeviceFinishRequest_Response_File }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceFinishRequest_Response>): RegisterDeviceFinishRequest_Response {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = "";
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceFinishRequest_Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceFinishRequest_Response): RegisterDeviceFinishRequest_Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                case /* octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command command */ 2:
                    message.type = {
                        oneofKind: "command",
                        command: RegisterDeviceFinishRequest_Response_Command.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).command)
                    };
                    break;
                case /* octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File file */ 3:
                    message.type = {
                        oneofKind: "file",
                        file: RegisterDeviceFinishRequest_Response_File.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).file)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceFinishRequest_Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        /* octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command command = 2; */
        if (message.type.oneofKind === "command")
            RegisterDeviceFinishRequest_Response_Command.internalBinaryWrite(message.type.command, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File file = 3; */
        if (message.type.oneofKind === "file")
            RegisterDeviceFinishRequest_Response_File.internalBinaryWrite(message.type.file, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response
 */
export const RegisterDeviceFinishRequest_Response = new RegisterDeviceFinishRequest_Response$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceFinishRequest_Response_Command$Type extends MessageType<RegisterDeviceFinishRequest_Response_Command> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command", [
            { no: 1, name: "output", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceFinishRequest_Response_Command>): RegisterDeviceFinishRequest_Response_Command {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.output = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceFinishRequest_Response_Command>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceFinishRequest_Response_Command): RegisterDeviceFinishRequest_Response_Command {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes output */ 1:
                    message.output = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceFinishRequest_Response_Command, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes output = 1; */
        if (message.output.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.output);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.Command
 */
export const RegisterDeviceFinishRequest_Response_Command = new RegisterDeviceFinishRequest_Response_Command$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceFinishRequest_Response_File$Type extends MessageType<RegisterDeviceFinishRequest_Response_File> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File", [
            { no: 1, name: "output", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterDeviceFinishRequest_Response_File>): RegisterDeviceFinishRequest_Response_File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.output = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceFinishRequest_Response_File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceFinishRequest_Response_File): RegisterDeviceFinishRequest_Response_File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes output */ 1:
                    message.output = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceFinishRequest_Response_File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes output = 1; */
        if (message.output.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.output);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishRequest.Response.File
 */
export const RegisterDeviceFinishRequest_Response_File = new RegisterDeviceFinishRequest_Response_File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterDeviceFinishResponse$Type extends MessageType<RegisterDeviceFinishResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterDeviceFinishResponse", []);
    }
    create(value?: PartialMessage<RegisterDeviceFinishResponse>): RegisterDeviceFinishResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterDeviceFinishResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterDeviceFinishResponse): RegisterDeviceFinishResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterDeviceFinishResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterDeviceFinishResponse
 */
export const RegisterDeviceFinishResponse = new RegisterDeviceFinishResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateWithAuthenticationTokenRequest$Type extends MessageType<AuthenticateWithAuthenticationTokenRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateWithAuthenticationTokenRequest", [
            { no: 1, name: "authenticationToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "scopes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateWithAuthenticationTokenRequest>): AuthenticateWithAuthenticationTokenRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.authenticationToken = "";
        message.scopes = [];
        if (value !== undefined)
            reflectionMergePartial<AuthenticateWithAuthenticationTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateWithAuthenticationTokenRequest): AuthenticateWithAuthenticationTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string authenticationToken */ 1:
                    message.authenticationToken = reader.string();
                    break;
                case /* repeated string scopes */ 2:
                    message.scopes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateWithAuthenticationTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string authenticationToken = 1; */
        if (message.authenticationToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.authenticationToken);
        /* repeated string scopes = 2; */
        for (let i = 0; i < message.scopes.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.scopes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateWithAuthenticationTokenRequest
 */
export const AuthenticateWithAuthenticationTokenRequest = new AuthenticateWithAuthenticationTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateWithAssertionRequest$Type extends MessageType<AuthenticateWithAssertionRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateWithAssertionRequest", [
            { no: 1, name: "identityProviderRef", kind: "message", T: () => ObjectReference },
            { no: 2, name: "assertion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "scopes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateWithAssertionRequest>): AuthenticateWithAssertionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.assertion = "";
        message.scopes = [];
        if (value !== undefined)
            reflectionMergePartial<AuthenticateWithAssertionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateWithAssertionRequest): AuthenticateWithAssertionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.meta.v1.ObjectReference identityProviderRef */ 1:
                    message.identityProviderRef = ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.identityProviderRef);
                    break;
                case /* string assertion */ 2:
                    message.assertion = reader.string();
                    break;
                case /* repeated string scopes */ 3:
                    message.scopes.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateWithAssertionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.meta.v1.ObjectReference identityProviderRef = 1; */
        if (message.identityProviderRef)
            ObjectReference.internalBinaryWrite(message.identityProviderRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string assertion = 2; */
        if (message.assertion !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.assertion);
        /* repeated string scopes = 3; */
        for (let i = 0; i < message.scopes.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.scopes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateWithAssertionRequest
 */
export const AuthenticateWithAssertionRequest = new AuthenticateWithAssertionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateWithRefreshTokenRequest$Type extends MessageType<AuthenticateWithRefreshTokenRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateWithRefreshTokenRequest", []);
    }
    create(value?: PartialMessage<AuthenticateWithRefreshTokenRequest>): AuthenticateWithRefreshTokenRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthenticateWithRefreshTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateWithRefreshTokenRequest): AuthenticateWithRefreshTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateWithRefreshTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateWithRefreshTokenRequest
 */
export const AuthenticateWithRefreshTokenRequest = new AuthenticateWithRefreshTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenT0$Type extends MessageType<TokenT0> {
    constructor() {
        super("octelium.api.main.auth.v1.TokenT0", [
            { no: 1, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "content", kind: "message", T: () => TokenT0_Content }
        ]);
    }
    create(value?: PartialMessage<TokenT0>): TokenT0 {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signature = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TokenT0>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenT0): TokenT0 {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes signature */ 1:
                    message.signature = reader.bytes();
                    break;
                case /* octelium.api.main.auth.v1.TokenT0.Content content */ 2:
                    message.content = TokenT0_Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenT0, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes signature = 1; */
        if (message.signature.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.signature);
        /* octelium.api.main.auth.v1.TokenT0.Content content = 2; */
        if (message.content)
            TokenT0_Content.internalBinaryWrite(message.content, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.TokenT0
 */
export const TokenT0 = new TokenT0$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenT0_Content$Type extends MessageType<TokenT0_Content> {
    constructor() {
        super("octelium.api.main.auth.v1.TokenT0.Content", [
            { no: 1, name: "type", kind: "enum", T: () => ["octelium.api.main.auth.v1.TokenT0.Content.Type", TokenT0_Content_Type] },
            { no: 2, name: "keyID", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "subject", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "tokenID", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "expiresAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<TokenT0_Content>): TokenT0_Content {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.keyID = new Uint8Array(0);
        message.subject = new Uint8Array(0);
        message.tokenID = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<TokenT0_Content>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenT0_Content): TokenT0_Content {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.TokenT0.Content.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* bytes keyID */ 2:
                    message.keyID = reader.bytes();
                    break;
                case /* bytes subject */ 3:
                    message.subject = reader.bytes();
                    break;
                case /* bytes tokenID */ 4:
                    message.tokenID = reader.bytes();
                    break;
                case /* google.protobuf.Timestamp expiresAt */ 5:
                    message.expiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiresAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenT0_Content, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.TokenT0.Content.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* bytes keyID = 2; */
        if (message.keyID.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.keyID);
        /* bytes subject = 3; */
        if (message.subject.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.subject);
        /* bytes tokenID = 4; */
        if (message.tokenID.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.tokenID);
        /* google.protobuf.Timestamp expiresAt = 5; */
        if (message.expiresAt)
            Timestamp.internalBinaryWrite(message.expiresAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.TokenT0.Content
 */
export const TokenT0_Content = new TokenT0_Content$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateAuthenticatorBeginRequest$Type extends MessageType<AuthenticateAuthenticatorBeginRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginRequest", [
            { no: 1, name: "authenticatorRef", kind: "message", T: () => ObjectReference }
        ]);
    }
    create(value?: PartialMessage<AuthenticateAuthenticatorBeginRequest>): AuthenticateAuthenticatorBeginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthenticateAuthenticatorBeginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateAuthenticatorBeginRequest): AuthenticateAuthenticatorBeginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.meta.v1.ObjectReference authenticatorRef */ 1:
                    message.authenticatorRef = ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.authenticatorRef);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateAuthenticatorBeginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1; */
        if (message.authenticatorRef)
            ObjectReference.internalBinaryWrite(message.authenticatorRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginRequest
 */
export const AuthenticateAuthenticatorBeginRequest = new AuthenticateAuthenticatorBeginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateAuthenticatorBeginResponse$Type extends MessageType<AuthenticateAuthenticatorBeginResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse", [
            { no: 1, name: "challengeRequest", kind: "message", T: () => AuthenticateAuthenticatorBeginResponse_ChallengeRequest }
        ]);
    }
    create(value?: PartialMessage<AuthenticateAuthenticatorBeginResponse>): AuthenticateAuthenticatorBeginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthenticateAuthenticatorBeginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateAuthenticatorBeginResponse): AuthenticateAuthenticatorBeginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest challengeRequest */ 1:
                    message.challengeRequest = AuthenticateAuthenticatorBeginResponse_ChallengeRequest.internalBinaryRead(reader, reader.uint32(), options, message.challengeRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateAuthenticatorBeginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest challengeRequest = 1; */
        if (message.challengeRequest)
            AuthenticateAuthenticatorBeginResponse_ChallengeRequest.internalBinaryWrite(message.challengeRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse
 */
export const AuthenticateAuthenticatorBeginResponse = new AuthenticateAuthenticatorBeginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateAuthenticatorBeginResponse_ChallengeRequest$Type extends MessageType<AuthenticateAuthenticatorBeginResponse_ChallengeRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest", [
            { no: 1, name: "fido", kind: "message", oneof: "type", T: () => AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO },
            { no: 2, name: "totp", kind: "message", oneof: "type", T: () => AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP },
            { no: 3, name: "tpm", kind: "message", oneof: "type", T: () => AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM }
        ]);
    }
    create(value?: PartialMessage<AuthenticateAuthenticatorBeginResponse_ChallengeRequest>): AuthenticateAuthenticatorBeginResponse_ChallengeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<AuthenticateAuthenticatorBeginResponse_ChallengeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateAuthenticatorBeginResponse_ChallengeRequest): AuthenticateAuthenticatorBeginResponse_ChallengeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO fido */ 1:
                    message.type = {
                        oneofKind: "fido",
                        fido: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).fido)
                    };
                    break;
                case /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP totp */ 2:
                    message.type = {
                        oneofKind: "totp",
                        totp: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).totp)
                    };
                    break;
                case /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM tpm */ 3:
                    message.type = {
                        oneofKind: "tpm",
                        tpm: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tpm)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateAuthenticatorBeginResponse_ChallengeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO fido = 1; */
        if (message.type.oneofKind === "fido")
            AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO.internalBinaryWrite(message.type.fido, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP totp = 2; */
        if (message.type.oneofKind === "totp")
            AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP.internalBinaryWrite(message.type.totp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM tpm = 3; */
        if (message.type.oneofKind === "tpm")
            AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM.internalBinaryWrite(message.type.tpm, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest
 */
export const AuthenticateAuthenticatorBeginResponse_ChallengeRequest = new AuthenticateAuthenticatorBeginResponse_ChallengeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO$Type extends MessageType<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO", [
            { no: 1, name: "request", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO>): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = "";
        if (value !== undefined)
            reflectionMergePartial<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string request */ 1:
                    message.request = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string request = 1; */
        if (message.request !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.request);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.FIDO
 */
export const AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO = new AuthenticateAuthenticatorBeginResponse_ChallengeRequest_FIDO$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP$Type extends MessageType<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP", []);
    }
    create(value?: PartialMessage<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP>): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TOTP
 */
export const AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP = new AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TOTP$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM$Type extends MessageType<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM", [
            { no: 1, name: "encryptedCredential", kind: "message", T: () => AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential },
            { no: 2, name: "akBytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM>): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.akBytes = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential encryptedCredential */ 1:
                    message.encryptedCredential = AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential.internalBinaryRead(reader, reader.uint32(), options, message.encryptedCredential);
                    break;
                case /* bytes akBytes */ 2:
                    message.akBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential encryptedCredential = 1; */
        if (message.encryptedCredential)
            AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential.internalBinaryWrite(message.encryptedCredential, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes akBytes = 2; */
        if (message.akBytes.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.akBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM
 */
export const AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM = new AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential$Type extends MessageType<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential", [
            { no: 1, name: "credential", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "secret", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential>): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.credential = new Uint8Array(0);
        message.secret = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential): AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes credential */ 1:
                    message.credential = reader.bytes();
                    break;
                case /* bytes secret */ 2:
                    message.secret = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes credential = 1; */
        if (message.credential.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.credential);
        /* bytes secret = 2; */
        if (message.secret.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
 */
export const AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential = new AuthenticateAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginRequest$Type extends MessageType<RegisterAuthenticatorBeginRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest", [
            { no: 1, name: "authenticatorRef", kind: "message", T: () => ObjectReference },
            { no: 2, name: "preChallenge", kind: "message", T: () => RegisterAuthenticatorBeginRequest_PreChallenge }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginRequest>): RegisterAuthenticatorBeginRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginRequest): RegisterAuthenticatorBeginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.meta.v1.ObjectReference authenticatorRef */ 1:
                    message.authenticatorRef = ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.authenticatorRef);
                    break;
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge preChallenge */ 2:
                    message.preChallenge = RegisterAuthenticatorBeginRequest_PreChallenge.internalBinaryRead(reader, reader.uint32(), options, message.preChallenge);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1; */
        if (message.authenticatorRef)
            ObjectReference.internalBinaryWrite(message.authenticatorRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge preChallenge = 2; */
        if (message.preChallenge)
            RegisterAuthenticatorBeginRequest_PreChallenge.internalBinaryWrite(message.preChallenge, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest
 */
export const RegisterAuthenticatorBeginRequest = new RegisterAuthenticatorBeginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginRequest_PreChallenge$Type extends MessageType<RegisterAuthenticatorBeginRequest_PreChallenge> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge", [
            { no: 1, name: "tpm", kind: "message", oneof: "type", T: () => RegisterAuthenticatorBeginRequest_PreChallenge_TPM }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginRequest_PreChallenge>): RegisterAuthenticatorBeginRequest_PreChallenge {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginRequest_PreChallenge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginRequest_PreChallenge): RegisterAuthenticatorBeginRequest_PreChallenge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM tpm */ 1:
                    message.type = {
                        oneofKind: "tpm",
                        tpm: RegisterAuthenticatorBeginRequest_PreChallenge_TPM.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tpm)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginRequest_PreChallenge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM tpm = 1; */
        if (message.type.oneofKind === "tpm")
            RegisterAuthenticatorBeginRequest_PreChallenge_TPM.internalBinaryWrite(message.type.tpm, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge
 */
export const RegisterAuthenticatorBeginRequest_PreChallenge = new RegisterAuthenticatorBeginRequest_PreChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginRequest_PreChallenge_TPM$Type extends MessageType<RegisterAuthenticatorBeginRequest_PreChallenge_TPM> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM", [
            { no: 1, name: "akBytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "attestationParameters", kind: "message", T: () => RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters },
            { no: 3, name: "ekCertificateDER", kind: "scalar", oneof: "ekType", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "ekPublicKey", kind: "scalar", oneof: "ekType", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginRequest_PreChallenge_TPM>): RegisterAuthenticatorBeginRequest_PreChallenge_TPM {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.akBytes = new Uint8Array(0);
        message.ekType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginRequest_PreChallenge_TPM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginRequest_PreChallenge_TPM): RegisterAuthenticatorBeginRequest_PreChallenge_TPM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes akBytes */ 1:
                    message.akBytes = reader.bytes();
                    break;
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters attestationParameters */ 2:
                    message.attestationParameters = RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters.internalBinaryRead(reader, reader.uint32(), options, message.attestationParameters);
                    break;
                case /* bytes ekCertificateDER */ 3:
                    message.ekType = {
                        oneofKind: "ekCertificateDER",
                        ekCertificateDER: reader.bytes()
                    };
                    break;
                case /* bytes ekPublicKey */ 4:
                    message.ekType = {
                        oneofKind: "ekPublicKey",
                        ekPublicKey: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginRequest_PreChallenge_TPM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes akBytes = 1; */
        if (message.akBytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.akBytes);
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters attestationParameters = 2; */
        if (message.attestationParameters)
            RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters.internalBinaryWrite(message.attestationParameters, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes ekCertificateDER = 3; */
        if (message.ekType.oneofKind === "ekCertificateDER")
            writer.tag(3, WireType.LengthDelimited).bytes(message.ekType.ekCertificateDER);
        /* bytes ekPublicKey = 4; */
        if (message.ekType.oneofKind === "ekPublicKey")
            writer.tag(4, WireType.LengthDelimited).bytes(message.ekType.ekPublicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM
 */
export const RegisterAuthenticatorBeginRequest_PreChallenge_TPM = new RegisterAuthenticatorBeginRequest_PreChallenge_TPM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters$Type extends MessageType<RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters", [
            { no: 1, name: "public", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "createData", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "createAttestation", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "createSignature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters>): RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.public = new Uint8Array(0);
        message.createData = new Uint8Array(0);
        message.createAttestation = new Uint8Array(0);
        message.createSignature = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters): RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes public */ 1:
                    message.public = reader.bytes();
                    break;
                case /* bytes createData */ 2:
                    message.createData = reader.bytes();
                    break;
                case /* bytes createAttestation */ 3:
                    message.createAttestation = reader.bytes();
                    break;
                case /* bytes createSignature */ 4:
                    message.createSignature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes public = 1; */
        if (message.public.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.public);
        /* bytes createData = 2; */
        if (message.createData.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.createData);
        /* bytes createAttestation = 3; */
        if (message.createAttestation.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.createAttestation);
        /* bytes createSignature = 4; */
        if (message.createSignature.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.createSignature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginRequest.PreChallenge.TPM.AttestationParameters
 */
export const RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters = new RegisterAuthenticatorBeginRequest_PreChallenge_TPM_AttestationParameters$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginResponse$Type extends MessageType<RegisterAuthenticatorBeginResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse", [
            { no: 1, name: "challengeRequest", kind: "message", T: () => RegisterAuthenticatorBeginResponse_ChallengeRequest }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginResponse>): RegisterAuthenticatorBeginResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginResponse): RegisterAuthenticatorBeginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest challengeRequest */ 1:
                    message.challengeRequest = RegisterAuthenticatorBeginResponse_ChallengeRequest.internalBinaryRead(reader, reader.uint32(), options, message.challengeRequest);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest challengeRequest = 1; */
        if (message.challengeRequest)
            RegisterAuthenticatorBeginResponse_ChallengeRequest.internalBinaryWrite(message.challengeRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse
 */
export const RegisterAuthenticatorBeginResponse = new RegisterAuthenticatorBeginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginResponse_ChallengeRequest$Type extends MessageType<RegisterAuthenticatorBeginResponse_ChallengeRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest", [
            { no: 1, name: "fido", kind: "message", oneof: "type", T: () => RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO },
            { no: 2, name: "totp", kind: "message", oneof: "type", T: () => RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP },
            { no: 3, name: "tpm", kind: "message", oneof: "type", T: () => RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginResponse_ChallengeRequest>): RegisterAuthenticatorBeginResponse_ChallengeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginResponse_ChallengeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginResponse_ChallengeRequest): RegisterAuthenticatorBeginResponse_ChallengeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO fido */ 1:
                    message.type = {
                        oneofKind: "fido",
                        fido: RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).fido)
                    };
                    break;
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP totp */ 2:
                    message.type = {
                        oneofKind: "totp",
                        totp: RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).totp)
                    };
                    break;
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM tpm */ 3:
                    message.type = {
                        oneofKind: "tpm",
                        tpm: RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tpm)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginResponse_ChallengeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO fido = 1; */
        if (message.type.oneofKind === "fido")
            RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO.internalBinaryWrite(message.type.fido, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP totp = 2; */
        if (message.type.oneofKind === "totp")
            RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP.internalBinaryWrite(message.type.totp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM tpm = 3; */
        if (message.type.oneofKind === "tpm")
            RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM.internalBinaryWrite(message.type.tpm, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest
 */
export const RegisterAuthenticatorBeginResponse_ChallengeRequest = new RegisterAuthenticatorBeginResponse_ChallengeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO$Type extends MessageType<RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO", [
            { no: 1, name: "request", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO>): RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO): RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string request */ 1:
                    message.request = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string request = 1; */
        if (message.request !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.request);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.FIDO
 */
export const RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO = new RegisterAuthenticatorBeginResponse_ChallengeRequest_FIDO$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP$Type extends MessageType<RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP>): RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP): RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TOTP
 */
export const RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP = new RegisterAuthenticatorBeginResponse_ChallengeRequest_TOTP$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM$Type extends MessageType<RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM", [
            { no: 1, name: "encryptedCredential", kind: "message", T: () => RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential },
            { no: 2, name: "akBytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM>): RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.akBytes = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM): RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential encryptedCredential */ 1:
                    message.encryptedCredential = RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential.internalBinaryRead(reader, reader.uint32(), options, message.encryptedCredential);
                    break;
                case /* bytes akBytes */ 2:
                    message.akBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential encryptedCredential = 1; */
        if (message.encryptedCredential)
            RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential.internalBinaryWrite(message.encryptedCredential, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes akBytes = 2; */
        if (message.akBytes.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.akBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM
 */
export const RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM = new RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential$Type extends MessageType<RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential", [
            { no: 1, name: "credential", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "secret", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential>): RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.credential = new Uint8Array(0);
        message.secret = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential): RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes credential */ 1:
                    message.credential = reader.bytes();
                    break;
                case /* bytes secret */ 2:
                    message.secret = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes credential = 1; */
        if (message.credential.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.credential);
        /* bytes secret = 2; */
        if (message.secret.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.secret);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorBeginResponse.ChallengeRequest.TPM.EncryptedCredential
 */
export const RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential = new RegisterAuthenticatorBeginResponse_ChallengeRequest_TPM_EncryptedCredential$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Authenticator$Type extends MessageType<Authenticator> {
    constructor() {
        super("octelium.api.main.auth.v1.Authenticator", [
            { no: 1, name: "apiVersion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "metadata", kind: "message", T: () => Metadata },
            { no: 4, name: "spec", kind: "message", T: () => Authenticator_Spec },
            { no: 5, name: "status", kind: "message", T: () => Authenticator_Status }
        ]);
    }
    create(value?: PartialMessage<Authenticator>): Authenticator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.apiVersion = "";
        message.kind = "";
        if (value !== undefined)
            reflectionMergePartial<Authenticator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Authenticator): Authenticator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string apiVersion */ 1:
                    message.apiVersion = reader.string();
                    break;
                case /* string kind */ 2:
                    message.kind = reader.string();
                    break;
                case /* octelium.api.main.meta.v1.Metadata metadata */ 3:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* octelium.api.main.auth.v1.Authenticator.Spec spec */ 4:
                    message.spec = Authenticator_Spec.internalBinaryRead(reader, reader.uint32(), options, message.spec);
                    break;
                case /* octelium.api.main.auth.v1.Authenticator.Status status */ 5:
                    message.status = Authenticator_Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Authenticator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string apiVersion = 1; */
        if (message.apiVersion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.apiVersion);
        /* string kind = 2; */
        if (message.kind !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.kind);
        /* octelium.api.main.meta.v1.Metadata metadata = 3; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.Authenticator.Spec spec = 4; */
        if (message.spec)
            Authenticator_Spec.internalBinaryWrite(message.spec, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.Authenticator.Status status = 5; */
        if (message.status)
            Authenticator_Status.internalBinaryWrite(message.status, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.Authenticator
 */
export const Authenticator = new Authenticator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Authenticator_Spec$Type extends MessageType<Authenticator_Spec> {
    constructor() {
        super("octelium.api.main.auth.v1.Authenticator.Spec", [
            { no: 1, name: "displayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Authenticator_Spec>): Authenticator_Spec {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.displayName = "";
        if (value !== undefined)
            reflectionMergePartial<Authenticator_Spec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Authenticator_Spec): Authenticator_Spec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string displayName */ 1:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Authenticator_Spec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string displayName = 1; */
        if (message.displayName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.Authenticator.Spec
 */
export const Authenticator_Spec = new Authenticator_Spec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Authenticator_Status$Type extends MessageType<Authenticator_Status> {
    constructor() {
        super("octelium.api.main.auth.v1.Authenticator.Status", [
            { no: 1, name: "isRegistered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["octelium.api.main.auth.v1.Authenticator.Status.Type", Authenticator_Status_Type] }
        ]);
    }
    create(value?: PartialMessage<Authenticator_Status>): Authenticator_Status {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isRegistered = false;
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<Authenticator_Status>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Authenticator_Status): Authenticator_Status {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isRegistered */ 1:
                    message.isRegistered = reader.bool();
                    break;
                case /* octelium.api.main.auth.v1.Authenticator.Status.Type type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Authenticator_Status, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isRegistered = 1; */
        if (message.isRegistered !== false)
            writer.tag(1, WireType.Varint).bool(message.isRegistered);
        /* octelium.api.main.auth.v1.Authenticator.Status.Type type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.Authenticator.Status
 */
export const Authenticator_Status = new Authenticator_Status$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticatorList$Type extends MessageType<AuthenticatorList> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticatorList", [
            { no: 1, name: "apiVersion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Authenticator },
            { no: 4, name: "listResponseMeta", kind: "message", T: () => ListResponseMeta }
        ]);
    }
    create(value?: PartialMessage<AuthenticatorList>): AuthenticatorList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.apiVersion = "";
        message.kind = "";
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<AuthenticatorList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticatorList): AuthenticatorList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string apiVersion */ 1:
                    message.apiVersion = reader.string();
                    break;
                case /* string kind */ 2:
                    message.kind = reader.string();
                    break;
                case /* repeated octelium.api.main.auth.v1.Authenticator items */ 3:
                    message.items.push(Authenticator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* octelium.api.main.meta.v1.ListResponseMeta listResponseMeta */ 4:
                    message.listResponseMeta = ListResponseMeta.internalBinaryRead(reader, reader.uint32(), options, message.listResponseMeta);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticatorList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string apiVersion = 1; */
        if (message.apiVersion !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.apiVersion);
        /* string kind = 2; */
        if (message.kind !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.kind);
        /* repeated octelium.api.main.auth.v1.Authenticator items = 3; */
        for (let i = 0; i < message.items.length; i++)
            Authenticator.internalBinaryWrite(message.items[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.meta.v1.ListResponseMeta listResponseMeta = 4; */
        if (message.listResponseMeta)
            ListResponseMeta.internalBinaryWrite(message.listResponseMeta, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticatorList
 */
export const AuthenticatorList = new AuthenticatorList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAuthenticatorOptions$Type extends MessageType<ListAuthenticatorOptions> {
    constructor() {
        super("octelium.api.main.auth.v1.ListAuthenticatorOptions", [
            { no: 1, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "itemsPerPage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListAuthenticatorOptions>): ListAuthenticatorOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.itemsPerPage = 0;
        if (value !== undefined)
            reflectionMergePartial<ListAuthenticatorOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAuthenticatorOptions): ListAuthenticatorOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 page */ 1:
                    message.page = reader.uint32();
                    break;
                case /* uint32 itemsPerPage */ 2:
                    message.itemsPerPage = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAuthenticatorOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).uint32(message.page);
        /* uint32 itemsPerPage = 2; */
        if (message.itemsPerPage !== 0)
            writer.tag(2, WireType.Varint).uint32(message.itemsPerPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.ListAuthenticatorOptions
 */
export const ListAuthenticatorOptions = new ListAuthenticatorOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAuthenticatorRequest$Type extends MessageType<CreateAuthenticatorRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.CreateAuthenticatorRequest", [
            { no: 1, name: "type", kind: "enum", T: () => ["octelium.api.main.auth.v1.Authenticator.Status.Type", Authenticator_Status_Type] },
            { no: 2, name: "displayName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAuthenticatorRequest>): CreateAuthenticatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.displayName = "";
        if (value !== undefined)
            reflectionMergePartial<CreateAuthenticatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAuthenticatorRequest): CreateAuthenticatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.Authenticator.Status.Type type */ 1:
                    message.type = reader.int32();
                    break;
                case /* string displayName */ 2:
                    message.displayName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAuthenticatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.Authenticator.Status.Type type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* string displayName = 2; */
        if (message.displayName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.displayName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.CreateAuthenticatorRequest
 */
export const CreateAuthenticatorRequest = new CreateAuthenticatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorFinishRequest$Type extends MessageType<RegisterAuthenticatorFinishRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorFinishRequest", [
            { no: 1, name: "authenticatorRef", kind: "message", T: () => ObjectReference },
            { no: 2, name: "challengeResponse", kind: "message", T: () => ChallengeResponse }
        ]);
    }
    create(value?: PartialMessage<RegisterAuthenticatorFinishRequest>): RegisterAuthenticatorFinishRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorFinishRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorFinishRequest): RegisterAuthenticatorFinishRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.meta.v1.ObjectReference authenticatorRef */ 1:
                    message.authenticatorRef = ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.authenticatorRef);
                    break;
                case /* octelium.api.main.auth.v1.ChallengeResponse challengeResponse */ 2:
                    message.challengeResponse = ChallengeResponse.internalBinaryRead(reader, reader.uint32(), options, message.challengeResponse);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorFinishRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1; */
        if (message.authenticatorRef)
            ObjectReference.internalBinaryWrite(message.authenticatorRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.ChallengeResponse challengeResponse = 2; */
        if (message.challengeResponse)
            ChallengeResponse.internalBinaryWrite(message.challengeResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorFinishRequest
 */
export const RegisterAuthenticatorFinishRequest = new RegisterAuthenticatorFinishRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterAuthenticatorFinishResponse$Type extends MessageType<RegisterAuthenticatorFinishResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.RegisterAuthenticatorFinishResponse", []);
    }
    create(value?: PartialMessage<RegisterAuthenticatorFinishResponse>): RegisterAuthenticatorFinishResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterAuthenticatorFinishResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterAuthenticatorFinishResponse): RegisterAuthenticatorFinishResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterAuthenticatorFinishResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.RegisterAuthenticatorFinishResponse
 */
export const RegisterAuthenticatorFinishResponse = new RegisterAuthenticatorFinishResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeResponse$Type extends MessageType<ChallengeResponse> {
    constructor() {
        super("octelium.api.main.auth.v1.ChallengeResponse", [
            { no: 1, name: "fido", kind: "message", oneof: "type", T: () => ChallengeResponse_FIDO },
            { no: 2, name: "totp", kind: "message", oneof: "type", T: () => ChallengeResponse_TOTP },
            { no: 3, name: "tpm", kind: "message", oneof: "type", T: () => ChallengeResponse_TPM }
        ]);
    }
    create(value?: PartialMessage<ChallengeResponse>): ChallengeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ChallengeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeResponse): ChallengeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.auth.v1.ChallengeResponse.FIDO fido */ 1:
                    message.type = {
                        oneofKind: "fido",
                        fido: ChallengeResponse_FIDO.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).fido)
                    };
                    break;
                case /* octelium.api.main.auth.v1.ChallengeResponse.TOTP totp */ 2:
                    message.type = {
                        oneofKind: "totp",
                        totp: ChallengeResponse_TOTP.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).totp)
                    };
                    break;
                case /* octelium.api.main.auth.v1.ChallengeResponse.TPM tpm */ 3:
                    message.type = {
                        oneofKind: "tpm",
                        tpm: ChallengeResponse_TPM.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).tpm)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.auth.v1.ChallengeResponse.FIDO fido = 1; */
        if (message.type.oneofKind === "fido")
            ChallengeResponse_FIDO.internalBinaryWrite(message.type.fido, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.ChallengeResponse.TOTP totp = 2; */
        if (message.type.oneofKind === "totp")
            ChallengeResponse_TOTP.internalBinaryWrite(message.type.totp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.ChallengeResponse.TPM tpm = 3; */
        if (message.type.oneofKind === "tpm")
            ChallengeResponse_TPM.internalBinaryWrite(message.type.tpm, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.ChallengeResponse
 */
export const ChallengeResponse = new ChallengeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeResponse_FIDO$Type extends MessageType<ChallengeResponse_FIDO> {
    constructor() {
        super("octelium.api.main.auth.v1.ChallengeResponse.FIDO", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChallengeResponse_FIDO>): ChallengeResponse_FIDO {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = "";
        if (value !== undefined)
            reflectionMergePartial<ChallengeResponse_FIDO>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeResponse_FIDO): ChallengeResponse_FIDO {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeResponse_FIDO, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.ChallengeResponse.FIDO
 */
export const ChallengeResponse_FIDO = new ChallengeResponse_FIDO$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeResponse_TOTP$Type extends MessageType<ChallengeResponse_TOTP> {
    constructor() {
        super("octelium.api.main.auth.v1.ChallengeResponse.TOTP", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChallengeResponse_TOTP>): ChallengeResponse_TOTP {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = "";
        if (value !== undefined)
            reflectionMergePartial<ChallengeResponse_TOTP>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeResponse_TOTP): ChallengeResponse_TOTP {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeResponse_TOTP, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.ChallengeResponse.TOTP
 */
export const ChallengeResponse_TOTP = new ChallengeResponse_TOTP$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeResponse_TPM$Type extends MessageType<ChallengeResponse_TPM> {
    constructor() {
        super("octelium.api.main.auth.v1.ChallengeResponse.TPM", [
            { no: 1, name: "response", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ChallengeResponse_TPM>): ChallengeResponse_TPM {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ChallengeResponse_TPM>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeResponse_TPM): ChallengeResponse_TPM {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes response */ 1:
                    message.response = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeResponse_TPM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes response = 1; */
        if (message.response.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.response);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.ChallengeResponse.TPM
 */
export const ChallengeResponse_TPM = new ChallengeResponse_TPM$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthenticateWithAuthenticatorRequest$Type extends MessageType<AuthenticateWithAuthenticatorRequest> {
    constructor() {
        super("octelium.api.main.auth.v1.AuthenticateWithAuthenticatorRequest", [
            { no: 1, name: "authenticatorRef", kind: "message", T: () => ObjectReference },
            { no: 2, name: "challengeResponse", kind: "message", T: () => ChallengeResponse }
        ]);
    }
    create(value?: PartialMessage<AuthenticateWithAuthenticatorRequest>): AuthenticateWithAuthenticatorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AuthenticateWithAuthenticatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthenticateWithAuthenticatorRequest): AuthenticateWithAuthenticatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* octelium.api.main.meta.v1.ObjectReference authenticatorRef */ 1:
                    message.authenticatorRef = ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.authenticatorRef);
                    break;
                case /* octelium.api.main.auth.v1.ChallengeResponse challengeResponse */ 2:
                    message.challengeResponse = ChallengeResponse.internalBinaryRead(reader, reader.uint32(), options, message.challengeResponse);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthenticateWithAuthenticatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* octelium.api.main.meta.v1.ObjectReference authenticatorRef = 1; */
        if (message.authenticatorRef)
            ObjectReference.internalBinaryWrite(message.authenticatorRef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* octelium.api.main.auth.v1.ChallengeResponse challengeResponse = 2; */
        if (message.challengeResponse)
            ChallengeResponse.internalBinaryWrite(message.challengeResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message octelium.api.main.auth.v1.AuthenticateWithAuthenticatorRequest
 */
export const AuthenticateWithAuthenticatorRequest = new AuthenticateWithAuthenticatorRequest$Type();
/**
 * @generated ServiceType for protobuf service octelium.api.main.auth.v1.MainService
 */
export const MainService = new ServiceType("octelium.api.main.auth.v1.MainService", [
    { name: "AuthenticateWithAuthenticationToken", options: {}, I: AuthenticateWithAuthenticationTokenRequest, O: SessionToken },
    { name: "AuthenticateWithAssertion", options: {}, I: AuthenticateWithAssertionRequest, O: SessionToken },
    { name: "AuthenticateWithRefreshToken", options: {}, I: AuthenticateWithRefreshTokenRequest, O: SessionToken },
    { name: "AuthenticateWithAuthenticator", options: {}, I: AuthenticateWithAuthenticatorRequest, O: SessionToken },
    { name: "Logout", options: {}, I: LogoutRequest, O: LogoutResponse },
    { name: "RegisterDeviceBegin", options: {}, I: RegisterDeviceBeginRequest, O: RegisterDeviceBeginResponse },
    { name: "RegisterDeviceFinish", options: {}, I: RegisterDeviceFinishRequest, O: RegisterDeviceFinishResponse },
    { name: "GetAuthenticator", options: {}, I: GetOptions, O: Authenticator },
    { name: "CreateAuthenticator", options: {}, I: CreateAuthenticatorRequest, O: Authenticator },
    { name: "UpdateAuthenticator", options: {}, I: Authenticator, O: Authenticator },
    { name: "ListAuthenticator", options: {}, I: ListAuthenticatorOptions, O: AuthenticatorList },
    { name: "DeleteAuthenticator", options: {}, I: DeleteOptions, O: OperationResult },
    { name: "RegisterAuthenticatorBegin", options: {}, I: RegisterAuthenticatorBeginRequest, O: RegisterAuthenticatorBeginResponse },
    { name: "RegisterAuthenticatorFinish", options: {}, I: RegisterAuthenticatorFinishRequest, O: RegisterAuthenticatorFinishResponse },
    { name: "AuthenticateAuthenticatorBegin", options: {}, I: AuthenticateAuthenticatorBeginRequest, O: AuthenticateAuthenticatorBeginResponse }
]);
